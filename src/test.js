var m;function aa(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function ba(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:aa(a)}}var ea="function"==typeof Object.create?Object.create:function(a){function b(){}b.prototype=a;return new b},ha="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(a==Array.prototype||a==Object.prototype)return a;a[b]=c.value;return a};
function ia(a){a=["object"==typeof globalThis&&globalThis,a,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error("Cannot find global object");}var ja=ia(this);function ka(a,b){if(b)a:{var c=ja;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ha(c,a,{configurable:!0,writable:!0,value:b})}}var la;
if("function"==typeof Object.setPrototypeOf)la=Object.setPrototypeOf;else{var ma;a:{var na={a:!0},oa={};try{oa.__proto__=na;ma=oa.a;break a}catch(a){}ma=!1}la=ma?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null}var pa=la;
function A(a,b){a.prototype=ea(b.prototype);a.prototype.constructor=a;if(pa)pa(a,b);else for(var c in b)if("prototype"!=c)if(Object.defineProperties){var d=Object.getOwnPropertyDescriptor(b,c);d&&Object.defineProperty(a,c,d)}else a[c]=b[c];a.ji=b.prototype}
ka("Symbol",function(a){function b(e){if(this instanceof b)throw new TypeError("Symbol is not a constructor");return new c("jscomp_symbol_"+(e||"")+"_"+d++,e)}function c(e,f){this.h=e;ha(this,"description",{configurable:!0,writable:!0,value:f})}if(a)return a;c.prototype.toString=function(){return this.h};var d=0;return b});
ka("Symbol.iterator",function(a){if(a)return a;a=Symbol("Symbol.iterator");for(var b="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),c=0;c<b.length;c++){var d=ja[b[c]];"function"===typeof d&&"function"!=typeof d.prototype[a]&&ha(d.prototype,a,{configurable:!0,writable:!0,value:function(){return qa(aa(this))}})}return a});function qa(a){a={next:a};a[Symbol.iterator]=function(){return this};return a}
ka("Number.MAX_SAFE_INTEGER",function(){return 9007199254740991});function ra(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var sa="function"==typeof Object.assign?Object.assign:function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(d)for(var e in d)ra(d,e)&&(a[e]=d[e])}return a};ka("Object.assign",function(a){return a||sa});
ka("String.prototype.repeat",function(a){return a?a:function(b){if(null==this)throw new TypeError("The 'this' value for String.prototype.repeat must not be null or undefined");var c=this;if(0>b||1342177279<b)throw new RangeError("Invalid count value");b|=0;for(var d="";b;)if(b&1&&(d+=c),b>>>=1)c+=c;return d}});
function ta(a,b){a instanceof String&&(a+="");var c=0,d=!1,e={next:function(){if(!d&&c<a.length){var f=c++;return{value:b(f,a[f]),done:!1}}d=!0;return{done:!0,value:void 0}}};e[Symbol.iterator]=function(){return e};return e}ka("Array.prototype.keys",function(a){return a?a:function(){return ta(this,function(b){return b})}});
ka("WeakMap",function(a){function b(k){this.h=(h+=Math.random()+1).toString();if(k){k=ba(k);for(var l;!(l=k.next()).done;)l=l.value,this.set(l[0],l[1])}}function c(){}function d(k){var l=typeof k;return"object"===l&&null!==k||"function"===l}function e(k){if(!ra(k,g)){var l=new c;ha(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(p){if(p instanceof c)return p;Object.isExtensible(p)&&e(p);return l(p)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),
p=new a([[k,2],[l,3]]);if(2!=p.get(k)||3!=p.get(l))return!1;p.delete(k);p.set(l,4);return!p.has(k)&&4==p.get(l)}catch(n){return!1}}())return a;var g="$jscomp_hidden_"+Math.random();f("freeze");f("preventExtensions");f("seal");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error("Invalid WeakMap key");e(k);if(!ra(k,g))throw Error("WeakMap key fail: "+k);k[g][this.h]=l;return this};b.prototype.get=function(k){return d(k)&&ra(k,g)?k[g][this.h]:void 0};b.prototype.has=function(k){return d(k)&&ra(k,
g)&&ra(k[g],this.h)};b.prototype.delete=function(k){return d(k)&&ra(k,g)&&ra(k[g],this.h)?delete k[g][this.h]:!1};return b});ka("Math.log2",function(a){return a?a:function(b){return Math.log(b)/Math.LN2}});for(var C=[],ua=0;256>ua;ua++)C[ua]=(16>ua?"0":"")+ua.toString(16);var va=Math.PI/180;
function wa(){var a=4294967295*Math.random()|0,b=4294967295*Math.random()|0,c=4294967295*Math.random()|0,d=4294967295*Math.random()|0;return(C[a&255]+C[a>>8&255]+C[a>>16&255]+C[a>>24&255]+"-"+C[b&255]+C[b>>8&255]+"-"+C[b>>16&15|64]+C[b>>24&255]+"-"+C[c&63|128]+C[c>>8&255]+"-"+C[c>>16&255]+C[c>>24&255]+C[d&255]+C[d>>8&255]+C[d>>16&255]+C[d>>24&255]).toUpperCase()}function xa(a,b){return Math.max(b,Math.min(1,a))}function ya(a){return 0===(a&a-1)&&0!==a}
function za(a){return Math.pow(2,Math.floor(Math.log(a)/Math.LN2))};function Aa(a,b,c,d){this.s=void 0===a?0:a;this.u=void 0===b?0:b;this.v=void 0===c?0:c;this.K=void 0===d?1:d}m=Aa.prototype;m.set=function(a,b,c,d){this.s=a;this.u=b;this.v=c;this.K=d;this.Z();return this};m.clone=function(){return new this.constructor(this.s,this.u,this.v,this.K)};m.l=function(a){this.s=a.x;this.u=a.y;this.v=a.z;this.K=a.w;this.Z();return this};
m.Mc=function(a){var b=a.elements,c=b[0];a=b[4];var d=b[8],e=b[1],f=b[5],g=b[9],h=b[2],k=b[6];b=b[10];var l=c+f+b;0<l?(c=.5/Math.sqrt(l+1),this.K=.25/c,this.s=(k-g)*c,this.u=(d-h)*c,this.v=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this.K=(k-g)/c,this.s=.25*c,this.u=(a+e)/c,this.v=(d+h)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this.K=(d-h)/c,this.s=(a+e)/c,this.u=.25*c,this.v=(g+k)/c):(c=2*Math.sqrt(1+b-c-f),this.K=(e-a)/c,this.s=(d+h)/c,this.u=(g+k)/c,this.v=.25*c);this.Z()};
m.Kb=function(){this.s*=-1;this.u*=-1;this.v*=-1;this.Z();return this};m.tc=function(a){return this.s*a.s+this.u*a.u+this.v*a.v+this.K*a.K};m.Cc=function(){return this.s*this.s+this.u*this.u+this.v*this.v+this.K*this.K};m.length=function(){return Math.sqrt(this.s*this.s+this.u*this.u+this.v*this.v+this.K*this.K)};m.normalize=function(){var a=this.length();0===a?(this.v=this.u=this.s=0,this.K=1):(a=1/a,this.s*=a,this.u*=a,this.v*=a,this.K*=a);this.Z();return this};
m.multiply=function(a,b){return void 0!==b?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),Ia(this,a,b)):Ia(this,this,a)};function Ia(a,b,c){var d=b.s,e=b.u,f=b.v;b=b.K;var g=c.s,h=c.u,k=c.v;c=c.K;a.s=d*c+b*g+e*k-f*h;a.u=e*c+b*h+f*g-d*k;a.v=f*c+b*k+d*h-e*g;a.K=b*c-d*g-e*h-f*k;a.Z();return a}m.oa=function(a){return a.s===this.s&&a.u===this.u&&a.v===this.v&&a.K===this.K};
m.La=function(a,b){b=void 0===b?0:b;this.s=a[b];this.u=a[b+1];this.v=a[b+2];this.K=a[b+3];this.Z();return this};m.ha=function(a,b){a=void 0===a?[]:a;b=void 0===b?0:b;a[b]=this.s;a[b+1]=this.u;a[b+2]=this.v;a[b+3]=this.K;return a};m.ib=function(a,b){this.s=Ja(a,b);this.u=Ka(a,b);this.v=La(a,b);this.K=a.R[b*a.ua+3]};m.vd=function(a){this.Z=a};m.Z=function(){};
ja.Object.defineProperties(Aa.prototype,{x:{configurable:!0,enumerable:!0,get:function(){return this.s},set:function(a){this.s=a;this.Z()}},y:{configurable:!0,enumerable:!0,get:function(){return this.u},set:function(a){this.u=a;this.Z()}},z:{configurable:!0,enumerable:!0,get:function(){return this.v},set:function(a){this.v=a;this.Z()}},w:{configurable:!0,enumerable:!0,get:function(){return this.K},set:function(a){this.K=a;this.Z()}}});Aa.prototype.jg=!0;function D(a,b,c){this.x=void 0===a?0:a;this.y=void 0===b?0:b;this.z=void 0===c?0:c}m=D.prototype;m.set=function(a,b,c){void 0===c&&(c=this.z);this.x=a;this.y=b;this.z=c;return this};m.clone=function(){return new D(this.x,this.y,this.z)};m.l=function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this};m.add=function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.Ta(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this};
m.Ta=function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this};m.wd=function(a,b){this.x+=a.x*b;this.y+=a.y*b;this.z+=a.z*b};m.sub=function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.kc(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this};m.kc=function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this};
m.multiply=function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.x=a.x*b.x,this.y=a.y*b.y,this.z=a.z*b.z,this;this.x*=a.x;this.y*=a.y;this.z*=a.z;return this};m.X=function(a){this.x*=a;this.y*=a;this.z*=a;return this};m.Yb=function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this};m.xd=function(a){this.Yb(a).normalize()};
m.L=function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;var e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this};m.lc=function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*b+a[6]*c+a[10]*d;this.normalize()};m.sc=function(a){return this.X(1/a)};
m.min=function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);this.z=Math.min(this.z,a.z);return this};m.max=function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);this.z=Math.max(this.z,a.z);return this};m.floor=function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this};m.ceil=function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this};
m.round=function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this};m.Qa=function(){this.x=-this.x;this.y=-this.y;this.z=-this.z};m.tc=function(a){return this.x*a.x+this.y*a.y+this.z*a.z};m.Cc=function(){return this.x*this.x+this.y*this.y+this.z*this.z};m.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)};m.normalize=function(){return this.sc(this.length()||1)};
function Ma(a,b,c){var d=b.x,e=b.y;b=b.z;var f=c.x,g=c.y;c=c.z;a.x=e*c-b*g;a.y=b*f-d*c;a.z=d*g-e*f}m.Hd=function(a){var b=this.x-a.x,c=this.y-a.y;a=this.z-a.z;return b*b+c*c+a*a};function E(a,b){b=b.elements;a.x=b[12];a.y=b[13];a.z=b[14];return a}m.oa=function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z};m.La=function(a,b){b=void 0===b?0:b;this.x=a[b];this.y=a[b+1];this.z=a[b+2];return this};m.ha=function(a,b){a=void 0===a?[]:a;b=void 0===b?0:b;a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;return a};
m.ib=function(a,b){this.x=Ja(a,b);this.y=Ka(a,b);this.z=La(a,b)};m.random=function(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this};m.isVector3=!0;function G(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];0<arguments.length&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}m=G.prototype;m.set=function(a,b,c,d,e,f,g,h,k,l,p,n,q,r,u,t){var v=this.elements;v[0]=a;v[4]=b;v[8]=c;v[12]=d;v[1]=e;v[5]=f;v[9]=g;v[13]=h;v[2]=k;v[6]=l;v[10]=p;v[14]=n;v[3]=q;v[7]=r;v[11]=u;v[15]=t;return this};m.clone=function(){return(new G).La(this.elements)};
m.l=function(a){var b=this.elements;a=a.elements;b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=a[12];b[13]=a[13];b[14]=a[14];b[15]=a[15];return this};
function Na(a,b){a=a.elements;var c=b.elements,d=1/Oa.La(b.elements,0).length(),e=1/Oa.La(b.elements,4).length();b=1/Oa.La(b.elements,8).length();a[0]=c[0]*d;a[1]=c[1]*d;a[2]=c[2]*d;a[3]=0;a[4]=c[4]*e;a[5]=c[5]*e;a[6]=c[6]*e;a[7]=0;a[8]=c[8]*b;a[9]=c[9]*b;a[10]=c[10]*b;a[11]=0;a[12]=0;a[13]=0;a[14]=0;a[15]=1}
m.Oa=function(a,b,c){var d=this.elements;H.kc(a,b);0===H.Cc()&&(H.z=1);H.normalize();Ma(Pa,c,H);0===Pa.Cc()&&(1===Math.abs(c.z)?H.x+=1E-4:H.z+=1E-4,H.normalize(),Ma(Pa,c,H));Pa.normalize();Ma(Qa,H,Pa);d[0]=Pa.x;d[4]=Qa.x;d[8]=H.x;d[1]=Pa.y;d[5]=Qa.y;d[9]=H.y;d[2]=Pa.z;d[6]=Qa.z;d[10]=H.z};m.multiply=function(a,b){return void 0!==b?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.Pa(a,b)):this.Pa(this,a)};
m.Pa=function(a,b){var c=a.elements,d=b.elements;b=this.elements;a=c[0];var e=c[4],f=c[8],g=c[12],h=c[1],k=c[5],l=c[9],p=c[13],n=c[2],q=c[6],r=c[10],u=c[14],t=c[3],v=c[7],x=c[11];c=c[15];var w=d[0],y=d[4],z=d[8],B=d[12],T=d[1],da=d[5],Ba=d[9],Ca=d[13],Da=d[2],Ea=d[6],Fa=d[10],Ga=d[14],Ha=d[3],fa=d[7],F=d[11];d=d[15];b[0]=a*w+e*T+f*Da+g*Ha;b[4]=a*y+e*da+f*Ea+g*fa;b[8]=a*z+e*Ba+f*Fa+g*F;b[12]=a*B+e*Ca+f*Ga+g*d;b[1]=h*w+k*T+l*Da+p*Ha;b[5]=h*y+k*da+l*Ea+p*fa;b[9]=h*z+k*Ba+l*Fa+p*F;b[13]=h*B+k*Ca+l*Ga+
p*d;b[2]=n*w+q*T+r*Da+u*Ha;b[6]=n*y+q*da+r*Ea+u*fa;b[10]=n*z+q*Ba+r*Fa+u*F;b[14]=n*B+q*Ca+r*Ga+u*d;b[3]=t*w+v*T+x*Da+c*Ha;b[7]=t*y+v*da+x*Ea+c*fa;b[11]=t*z+v*Ba+x*Fa+c*F;b[15]=t*B+v*Ca+x*Ga+c*d;return this};m.X=function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this};
function Ra(a){a=a.elements;var b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=a[5],h=a[9],k=a[13],l=a[2],p=a[6],n=a[10],q=a[14];return a[3]*(+e*h*p-d*k*p-e*g*n+c*k*n+d*g*q-c*h*q)+a[7]*(+b*h*q-b*k*n+e*f*n-d*f*q+d*k*l-e*h*l)+a[11]*(+b*k*p-b*g*q-e*f*p+c*f*q+e*g*l-c*k*l)+a[15]*(-d*g*l-b*h*p+b*g*n+d*f*p-c*f*n+c*h*l)}
m.Kb=function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],k=a[7],l=a[8],p=a[9],n=a[10],q=a[11],r=a[12],u=a[13],t=a[14],v=a[15],x=p*t*k-u*n*k+u*h*q-g*t*q-p*h*v+g*n*v,w=r*n*k-l*t*k-r*h*q+f*t*q+l*h*v-f*n*v,y=l*u*k-r*p*k+r*g*q-f*u*q-l*g*v+f*p*v,z=r*p*h-l*u*h-r*g*n+f*u*n+l*g*t-f*p*t,B=b*x+c*w+d*y+e*z;if(0===B)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);B=1/B;a[0]=x*B;a[1]=(u*n*e-p*t*e-u*d*q+c*t*q+p*d*v-c*n*v)*B;a[2]=(g*t*e-u*h*e+u*d*k-c*t*k-g*d*v+c*h*v)*B;a[3]=(p*h*e-g*
n*e-p*d*k+c*n*k+g*d*q-c*h*q)*B;a[4]=w*B;a[5]=(l*t*e-r*n*e+r*d*q-b*t*q-l*d*v+b*n*v)*B;a[6]=(r*h*e-f*t*e-r*d*k+b*t*k+f*d*v-b*h*v)*B;a[7]=(f*n*e-l*h*e+l*d*k-b*n*k-f*d*q+b*h*q)*B;a[8]=y*B;a[9]=(r*p*e-l*u*e-r*c*q+b*u*q+l*c*v-b*p*v)*B;a[10]=(f*u*e-r*g*e+r*c*k-b*u*k-f*c*v+b*g*v)*B;a[11]=(l*g*e-f*p*e-l*c*k+b*p*k+f*c*q-b*g*q)*B;a[12]=z*B;a[13]=(l*u*d-r*p*d+r*c*n-b*u*n-l*c*t+b*p*t)*B;a[14]=(r*g*d-f*u*d-r*c*h+b*u*h+f*c*t-b*g*t)*B;a[15]=(f*p*d-l*g*d+l*c*h-b*p*h-f*c*n+b*g*n)*B;return this};
m.scale=function(a){var b=this.elements,c=a.x,d=a.y;a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this};
function Sa(a,b,c,d){a=a.elements;var e=c.s,f=c.u,g=c.v,h=c.K,k=e+e,l=f+f,p=g+g;c=e*k;var n=e*l;e*=p;var q=f*l;f*=p;g*=p;k*=h;l*=h;h*=p;p=d.x;var r=d.y;d=d.z;a[0]=(1-(q+g))*p;a[1]=(n+h)*p;a[2]=(e-l)*p;a[3]=0;a[4]=(n-h)*r;a[5]=(1-(c+g))*r;a[6]=(f+k)*r;a[7]=0;a[8]=(e+l)*d;a[9]=(f-k)*d;a[10]=(1-(c+q))*d;a[11]=0;a[12]=b.x;a[13]=b.y;a[14]=b.z;a[15]=1}m.oa=function(a){var b=this.elements;a=a.elements;for(var c=0;16>c;c++)if(b[c]!==a[c])return!1;return!0};
m.La=function(a,b){b=void 0===b?0:b;for(var c=0;16>c;c++)this.elements[c]=a[c+b];return this};m.ha=function(a,b){a=void 0===a?[]:a;b=void 0===b?0:b;var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a};m.Pe=!0;var Oa=new D,I=new G,Ta=new D(0,0,0),Ua=new D(1,1,1),Pa=new D,Qa=new D,H=new D;function Va(){this.va=void 0}Va.prototype.addEventListener=function(a,b){void 0===this.va&&(this.va={});var c=this.va;void 0===c[a]&&(c[a]=[]);-1===c[a].indexOf(b)&&c[a].push(b)};Va.prototype.removeEventListener=function(a,b){void 0!==this.va&&(a=this.va[a],void 0!==a&&(b=a.indexOf(b),-1!==b&&a.splice(b,1)))};Va.prototype.dispatchEvent=function(a){if(void 0!==this.va){var b=this.va[a.type];if(void 0!==b){a.target=this;b=b.slice(0);for(var c=0,d=b.length;c<d;c++)b[c].call(this,a)}}};var Ya=new G;function Za(a,b,c,d){d=void 0===d?$a:d;this.s=void 0===a?0:a;this.u=void 0===b?0:b;this.v=void 0===c?0:c;this.Ba=d}m=Za.prototype;m.set=function(a,b,c,d){this.s=a;this.u=b;this.v=c;this.Ba=d||this.Ba;this.Z();return this};m.clone=function(){return new this.constructor(this.s,this.u,this.v,this.Ba)};m.l=function(a){this.s=a.s;this.u=a.u;this.v=a.v;this.Ba=a.Ba;this.Z();return this};
m.Mc=function(a,b,c){var d=a.elements;a=d[0];var e=d[4],f=d[8],g=d[1],h=d[5],k=d[9],l=d[2],p=d[6];d=d[10];b=b||this.Ba;switch(b){case "XYZ":this.u=Math.asin(xa(f,-1));.9999999>Math.abs(f)?(this.s=Math.atan2(-k,d),this.v=Math.atan2(-e,a)):(this.s=Math.atan2(p,h),this.v=0);break;case "YXZ":this.s=Math.asin(-xa(k,-1));.9999999>Math.abs(k)?(this.u=Math.atan2(f,d),this.v=Math.atan2(g,h)):(this.u=Math.atan2(-l,a),this.v=0);break;case "ZXY":this.s=Math.asin(xa(p,-1));.9999999>Math.abs(p)?(this.u=Math.atan2(-l,
d),this.v=Math.atan2(-e,h)):(this.u=0,this.v=Math.atan2(g,a));break;case "ZYX":this.u=Math.asin(-xa(l,-1));.9999999>Math.abs(l)?(this.s=Math.atan2(p,d),this.v=Math.atan2(g,a)):(this.s=0,this.v=Math.atan2(-e,h));break;case "YZX":this.v=Math.asin(xa(g,-1));.9999999>Math.abs(g)?(this.s=Math.atan2(-k,h),this.u=Math.atan2(-l,a)):(this.s=0,this.u=Math.atan2(f,d));break;case "XZY":this.v=Math.asin(-xa(e,-1));.9999999>Math.abs(e)?(this.s=Math.atan2(p,h),this.u=Math.atan2(f,a)):(this.s=Math.atan2(-k,d),this.u=
0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+b)}this.Ba=b;!1!==c&&this.Z()};m.oa=function(a){return a.s===this.s&&a.u===this.u&&a.v===this.v&&a.Ba===this.Ba};m.La=function(a){this.s=a[0];this.u=a[1];this.v=a[2];void 0!==a[3]&&(this.Ba=a[3]);this.Z();return this};m.ha=function(a,b){a=void 0===a?[]:a;b=void 0===b?0:b;a[b]=this.s;a[b+1]=this.u;a[b+2]=this.v;a[b+3]=this.Ba;return a};m.vd=function(a){this.Z=a};m.Z=function(){};
ja.Object.defineProperties(Za.prototype,{x:{configurable:!0,enumerable:!0,get:function(){return this.s},set:function(a){this.s=a;this.Z()}},y:{configurable:!0,enumerable:!0,get:function(){return this.u},set:function(a){this.u=a;this.Z()}},z:{configurable:!0,enumerable:!0,get:function(){return this.v},set:function(a){this.v=a;this.Z()}},order:{configurable:!0,enumerable:!0,get:function(){return this.Ba},set:function(a){this.Ba=a;this.Z()}}});Za.prototype.dg=!0;var $a="XYZ";function ab(){this.h=1}ab.prototype.set=function(a){this.h=1<<a|0};function bb(a,b){a.h=a.h|1<<b|0}ab.prototype.test=function(a){return 0!==(this.h&a.h)};function cb(){this.elements=[1,0,0,0,1,0,0,0,1];0<arguments.length&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}m=cb.prototype;m.set=function(a,b,c,d,e,f,g,h,k){var l=this.elements;l[0]=a;l[1]=d;l[2]=g;l[3]=b;l[4]=e;l[5]=h;l[6]=c;l[7]=f;l[8]=k;return this};m.l=function(a){var b=this.elements;a=a.elements;b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];return this};
m.multiply=function(a){return this.Pa(this,a)};m.Pa=function(a,b){var c=a.elements,d=b.elements;b=this.elements;a=c[0];var e=c[3],f=c[6],g=c[1],h=c[4],k=c[7],l=c[2],p=c[5];c=c[8];var n=d[0],q=d[3],r=d[6],u=d[1],t=d[4],v=d[7],x=d[2],w=d[5];d=d[8];b[0]=a*n+e*u+f*x;b[3]=a*q+e*t+f*w;b[6]=a*r+e*v+f*d;b[1]=g*n+h*u+k*x;b[4]=g*q+h*t+k*w;b[7]=g*r+h*v+k*d;b[2]=l*n+p*u+c*x;b[5]=l*q+p*t+c*w;b[8]=l*r+p*v+c*d;return this};
m.X=function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this};m.Kb=function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],k=a[7],l=a[8],p=l*f-g*k,n=g*h-l*e,q=k*e-f*h,r=b*p+c*n+d*q;if(0===r)return this.set(0,0,0,0,0,0,0,0,0);r=1/r;a[0]=p*r;a[1]=(d*k-l*c)*r;a[2]=(g*c-d*f)*r;a[3]=n*r;a[4]=(l*b-d*h)*r;a[5]=(d*e-g*b)*r;a[6]=q*r;a[7]=(c*h-k*b)*r;a[8]=(f*b-c*e)*r;return this};
function db(a,b){b=b.elements;a.set(b[0],b[4],b[8],b[1],b[5],b[9],b[2],b[6],b[10]);a=a.Kb();var c=a.elements;b=c[1];c[1]=c[3];c[3]=b;b=c[2];c[2]=c[6];c[6]=b;b=c[5];c[5]=c[7];c[7]=b;return a}m.scale=function(a,b){var c=this.elements;c[0]*=a;c[3]*=a;c[6]*=a;c[1]*=b;c[4]*=b;c[7]*=b;return this};m.oa=function(a){var b=this.elements;a=a.elements;for(var c=0;9>c;c++)if(b[c]!==a[c])return!1;return!0};m.La=function(a,b){b=void 0===b?0:b;for(var c=0;9>c;c++)this.elements[c]=a[c+b];return this};
m.ha=function(a,b){a=void 0===a?[]:a;b=void 0===b?0:b;var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];return a};m.clone=function(){return(new this.constructor).La(this.elements)};m.isMatrix3=!0;var eb=0,fb=new Aa,gb=new G,hb=new D,ib=new D,jb={type:"added"},kb={type:"removed"};
function J(){this.va=void 0;lb=new D(0,1,0);mb=!0;this.id=eb++;this.F=wa();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.ab=lb.clone();var a=new D,b=new Za,c=new Aa,d=new D(1,1,1);b.vd(function(){if(!b||!b.dg)throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var e=b.s,f=b.u,g=b.v,h=b.Ba,k=Math.cos,l=Math.sin,p=k(e/2),n=k(f/2);k=k(g/2);e=l(e/2);f=l(f/2);g=l(g/2);switch(h){case "XYZ":c.s=e*n*k+p*f*g;c.u=p*f*k-e*
n*g;c.v=p*n*g+e*f*k;c.K=p*n*k-e*f*g;break;case "YXZ":c.s=e*n*k+p*f*g;c.u=p*f*k-e*n*g;c.v=p*n*g-e*f*k;c.K=p*n*k+e*f*g;break;case "ZXY":c.s=e*n*k-p*f*g;c.u=p*f*k+e*n*g;c.v=p*n*g+e*f*k;c.K=p*n*k-e*f*g;break;case "ZYX":c.s=e*n*k-p*f*g;c.u=p*f*k+e*n*g;c.v=p*n*g-e*f*k;c.K=p*n*k+e*f*g;break;case "YZX":c.s=e*n*k+p*f*g;c.u=p*f*k+e*n*g;c.v=p*n*g-e*f*k;c.K=p*n*k-e*f*g;break;case "XZY":c.s=e*n*k-p*f*g;c.u=p*f*k-e*n*g;c.v=p*n*g+e*f*k;c.K=p*n*k+e*f*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+
h)}});c.vd(function(){Sa(Ya,Ta,c,Ua);b.Mc(Ya,void 0,!1)});this.position=a;this.rotation=b;this.ic=c;this.scale=d;this.jd=new G;this.Ve=new cb;this.matrix=new G;this.I=new G;this.pa=mb;this.Dc=!1;this.P=new ab;this.visible=!0;this.Za=this.Ka=!1;this.Ib=!0;this.na=0;this.eb=[];this.qa={};this.ig=!0}var lb,mb;A(J,Va);m=J.prototype;m.be=function(){};
m.L=function(a){this.pa&&this.bb();var b=this.matrix;b.Pa(a,b);var c=this.matrix,d=this.position;a=this.ic;b=this.scale;var e=c.elements,f=Oa.set(e[0],e[1],e[2]).length(),g=Oa.set(e[4],e[5],e[6]).length(),h=Oa.set(e[8],e[9],e[10]).length();0>Ra(c)&&(f=-f);d.x=e[12];d.y=e[13];d.z=e[14];I.l(c);c=1/f;d=1/g;e=1/h;I.elements[0]*=c;I.elements[1]*=c;I.elements[2]*=c;I.elements[4]*=d;I.elements[5]*=d;I.elements[6]*=d;I.elements[8]*=e;I.elements[9]*=e;I.elements[10]*=e;a.Mc(I);b.x=f;b.y=g;b.z=h};
m.Oa=function(a,b,c){a.isVector3?hb.l(a):hb.set(a,b,c);a=this.parent;this.Xc(!0,!1);E(ib,this.I);this.Je||this.Oe?gb.Oa(ib,hb,this.ab):gb.Oa(hb,ib,this.ab);this.ic.Mc(gb);a&&(Na(gb,a.I),fb.Mc(gb),a=this.ic,b=fb.Kb(),Ia(a,b,a))};
m.add=function(a){if(1<arguments.length){for(var b=0;b<arguments.length;b++)this.add(arguments[b]);return this}if(a===this)return console.error("THREE.Object3D.add: object can't be added as a child of itself.",a),this;a&&a.ig?(null!==a.parent&&a.parent.remove(a),a.parent=this,this.children.push(a),a.dispatchEvent(jb)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",a);return this};
m.remove=function(a){if(1<arguments.length){for(var b=0;b<arguments.length;b++)this.remove(arguments[b]);return this}b=this.children.indexOf(a);-1!==b&&(a.parent=null,this.children.splice(b,1),a.dispatchEvent(kb));return this};m.clear=function(){for(var a=0;a<this.children.length;a++){var b=this.children[a];b.parent=null;b.dispatchEvent(kb)}this.children.length=0;return this};function nb(a,b){b(a);a=a.children;for(var c=0,d=a.length;c<d;c++)nb(a[c],b)}
function ob(a,b){if(!1!==a.visible){b(a);a=a.children;for(var c=0,d=a.length;c<d;c++)ob(a[c],b)}}m.bb=function(){Sa(this.matrix,this.position,this.ic,this.scale);this.Dc=!0};m.mc=function(a){this.pa&&this.bb();if(this.Dc||a)null===this.parent?this.I.l(this.matrix):this.I.Pa(this.parent.I,this.matrix),this.Dc=!1,a=!0;for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].mc(a)};
m.Xc=function(a,b){var c=this.parent;!0===a&&null!==c&&c.Xc(!0,!1);this.pa&&this.bb();null===this.parent?this.I.l(this.matrix):this.I.Pa(this.parent.I,this.matrix);if(!0===b)for(a=this.children,b=0,c=a.length;b<c;b++)a[b].Xc(!1,!0)};
m.toJSON=function(a){function b(q,r){void 0===q[r.F]&&(q[r.F]=r.toJSON(a));return r.F}function c(q){var r=[],u;for(u in q){var t=q[u];delete t.Ec;r.push(t)}return r}var d=void 0===a||"string"===typeof a,e={};d&&(a={wa:{},bc:{},ea:{},images:{},jc:{},ie:{},eb:{}},e.Ec={version:4.5,type:"Object",Jd:"Object3D.toJSON"});var f={};f.F=this.F;f.type=this.type;""!==this.name&&(f.name=this.name);!0===this.Ka&&(f.Ka=!0);!0===this.Za&&(f.Za=!0);!1===this.visible&&(f.visible=!1);!1===this.Ib&&(f.Ib=!1);0!==this.na&&
(f.na=this.na);"{}"!==JSON.stringify(this.qa)&&(f.qa=this.qa);f.P=this.P.h;f.matrix=this.matrix.ha();!1===this.pa&&(f.pa=!1);this.Lb&&(f.type="InstancedMesh",f.count=this.count,f.dd=this.dd.toJSON());if(this.Ac||this.Pd||this.Td){f.$=b(a.wa,this.$);var g=this.$.parameters;if(void 0!==g&&void 0!==g.jc)if(g=g.jc,Array.isArray(g))for(var h=0,k=g.length;h<k;h++)b(a.jc,g[h]);else b(a.jc,g)}this.Ud&&(f.Cf=this.Cf,f.Bf=this.Bf.ha(),void 0!==this.vb&&(b(a.ie,this.vb),f.vb=this.vb.F));if(void 0!==this.M)if(Array.isArray(this.M)){g=
[];h=0;for(k=this.M.length;h<k;h++)g.push(b(a.bc,this.M[h]));f.M=g}else f.M=b(a.bc,this.M);if(0<this.children.length)for(f.children=[],g=0;g<this.children.length;g++)f.children.push(this.children[g].toJSON(a).object);if(0<this.eb.length)for(f.eb=[],g=0;g<this.eb.length;g++)f.eb.push(b(a.eb,this.eb[g]));if(d){d=c(a.wa);g=c(a.bc);h=c(a.ea);k=c(a.images);var l=c(a.jc),p=c(a.ie),n=c(a.eb);0<d.length&&(e.wa=d);0<g.length&&(e.bc=g);0<h.length&&(e.ea=h);0<k.length&&(e.images=k);0<l.length&&(e.jc=l);0<p.length&&
(e.ie=p);0<n.length&&(e.eb=n)}e.object=f;return e};m.clone=function(a){return(new this.constructor).l(this,a)};
m.l=function(a,b){b=void 0===b?!0:b;this.name=a.name;this.ab.l(a.ab);this.position.l(a.position);this.rotation.order=a.rotation.order;this.ic.l(a.ic);this.scale.l(a.scale);this.matrix.l(a.matrix);this.I.l(a.I);this.pa=a.pa;this.Dc=a.Dc;this.P.h=a.P.h;this.visible=a.visible;this.Ka=a.Ka;this.Za=a.Za;this.Ib=a.Ib;this.na=a.na;this.qa=JSON.parse(JSON.stringify(a.qa));if(!0===b)for(b=0;b<a.children.length;b++)this.add(a.children[b].clone());return this};function pb(){J.call(this);this.type="Camera";this.Ya=new G;this.hc=new G;this.ee=new G;this.Je=!0}A(pb,J);pb.prototype.l=function(a,b){J.prototype.l.call(this,a,b);this.Ya.l(a.Ya);this.hc.l(a.hc);this.ee.l(a.ee);return this};pb.prototype.mc=function(a){J.prototype.mc.call(this,a);this.Ya.l(this.I).Kb()};pb.prototype.Xc=function(a,b){J.prototype.Xc.call(this,a,b);this.Ya.l(this.I).Kb()};pb.prototype.clone=function(){return(new this.constructor).l(this)};function K(a,b,c,d){this.x=void 0===a?0:a;this.y=void 0===b?0:b;this.z=void 0===c?0:c;this.w=void 0===d?1:d}m=K.prototype;m.set=function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this};m.clone=function(){return new this.constructor(this.x,this.y,this.z,this.w)};m.l=function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this};
m.add=function(a,b){if(void 0!==b)return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.Ta(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this};m.Ta=function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this};m.wd=function(a,b){this.x+=a.x*b;this.y+=a.y*b;this.z+=a.z*b;this.w+=a.w*b};
m.sub=function(a,b){if(void 0!==b)return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.kc(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this};m.kc=function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this};m.multiply=function(a){this.x*=a.x;this.y*=a.y;this.z*=a.z;this.w*=a.w;return this};m.X=function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this};
m.L=function(a){var b=this.x,c=this.y,d=this.z,e=this.w;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this};m.sc=function(a){return this.X(1/a)};m.min=function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);this.z=Math.min(this.z,a.z);this.w=Math.min(this.w,a.w);return this};
m.max=function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);this.z=Math.max(this.z,a.z);this.w=Math.max(this.w,a.w);return this};m.floor=function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this};m.ceil=function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this};
m.round=function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this};m.Qa=function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w};m.tc=function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w};m.Cc=function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w};m.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)};
m.normalize=function(){return this.sc(this.length()||1)};m.oa=function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w};m.La=function(a,b){b=void 0===b?0:b;this.x=a[b];this.y=a[b+1];this.z=a[b+2];this.w=a[b+3];return this};m.ha=function(a,b){a=void 0===a?[]:a;b=void 0===b?0:b;a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;a[b+3]=this.w;return a};m.ib=function(a,b){this.x=Ja(a,b);this.y=Ka(a,b);this.z=La(a,b);this.w=a.R[b*a.ua+3]};
m.random=function(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this};ja.Object.defineProperties(K.prototype,{width:{configurable:!0,enumerable:!0,get:function(){return this.z},set:function(a){this.z=a}},height:{configurable:!0,enumerable:!0,get:function(){return this.w},set:function(a){this.w=a}}});K.prototype.Vd=!0;function L(a,b,c,d){a=void 0===a?50:a;b=void 0===b?1:b;c=void 0===c?.1:c;d=void 0===d?2E3:d;pb.call(this);this.type="PerspectiveCamera";this.wc=a;this.zoom=1;this.lb=c;this.Va=d;this.focus=10;this.Cb=b;this.view=null;this.uc=35;this.vc=0;qb(this)}A(L,pb);L.prototype.l=function(a,b){pb.prototype.l.call(this,a,b);this.wc=a.wc;this.zoom=a.zoom;this.lb=a.lb;this.Va=a.Va;this.focus=a.focus;this.Cb=a.Cb;this.view=null===a.view?null:Object.assign({},a.view);this.uc=a.uc;this.vc=a.vc;return this};
function qb(a){var b=a.lb,c=b*Math.tan(.5*va*a.wc)/a.zoom,d=2*c,e=a.Cb*d,f=-.5*e,g=a.view;if(null!==a.view&&a.view.enabled){var h=g.Mh,k=g.Lh;f+=g.offsetX*e/h;c-=g.offsetY*d/k;e*=g.width/h;d*=g.height/k}g=a.vc;0!==g&&(f+=b*g/(a.uc*Math.min(a.Cb,1)));h=a.hc;g=f;e=f+e;f=c;c-=d;d=a.Va;void 0===d&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");h=h.elements;h[0]=2*b/(e-g);h[4]=0;h[8]=(e+g)/(e-g);h[12]=0;h[1]=0;h[5]=2*b/(f-c);h[9]=(f+
c)/(f-c);h[13]=0;h[2]=0;h[6]=0;h[10]=-(d+b)/(d-b);h[14]=-2*d*b/(d-b);h[3]=0;h[7]=0;h[11]=-1;h[15]=0;a.ee.l(a.hc).Kb()}L.prototype.toJSON=function(a){a=J.prototype.toJSON.call(this,a);a.object.wc=this.wc;a.object.zoom=this.zoom;a.object.lb=this.lb;a.object.Va=this.Va;a.object.focus=this.focus;a.object.Cb=this.Cb;null!==this.view&&(a.object.view=Object.assign({},this.view));a.object.uc=this.uc;a.object.vc=this.vc;return a};var rb={};function sb(){this.enabled=!1}sb.prototype.add=function(a,b){!1!==this.enabled&&(rb[a]=b)};sb.prototype.get=function(a){if(!1!==this.enabled)return rb[a]};sb.prototype.remove=function(a){delete rb[a]};sb.prototype.clear=function(){};var tb=new sb;function ub(a){a.j++;a.h=!0}function vb(a){a.i++;a.i===a.j&&(a.h=!1)}var wb=new function(){this.h=!1;this.j=this.i=0};function xb(a){this.h=void 0!==a?a:wb;this.crossOrigin="anonymous";this.withCredentials=!1;this.path=""}xb.prototype.load=function(){};function yb(a){xb.call(this,a)}A(yb,xb);
yb.prototype.load=function(a,b,c,d){function e(){k.removeEventListener("load",e,!1);k.removeEventListener("error",f,!1);tb.add(a,this);b&&b(this);vb(g.h)}function f(l){k.removeEventListener("load",e,!1);k.removeEventListener("error",f,!1);d&&d(l);vb(g.h)}void 0!==this.path&&(a=this.path+a);var g=this,h=tb.get(a);if(void 0!==h)return ub(g.h),setTimeout(function(){b&&b(h);vb(g.h)},0),h;var k=document.createElementNS("http://www.w3.org/1999/xhtml","img");k.addEventListener("load",e,!1);k.addEventListener("error",
f,!1);"data:"!==a.substr(0,5)&&void 0!==this.crossOrigin&&(k.crossOrigin=this.crossOrigin);ub(g.h);k.src=a;return k};function M(a,b){this.x=void 0===a?0:a;this.y=void 0===b?0:b}m=M.prototype;m.set=function(a,b){this.x=a;this.y=b;return this};m.clone=function(){return new this.constructor(this.x,this.y)};m.l=function(a){this.x=a.x;this.y=a.y;return this};m.add=function(a,b){if(void 0!==b)return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.Ta(a,b);this.x+=a.x;this.y+=a.y;return this};m.Ta=function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this};
m.wd=function(a,b){this.x+=a.x*b;this.y+=a.y*b};m.sub=function(a,b){if(void 0!==b)return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.kc(a,b);this.x-=a.x;this.y-=a.y;return this};m.kc=function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this};m.multiply=function(a){this.x*=a.x;this.y*=a.y;return this};m.X=function(a){this.x*=a;this.y*=a;return this};m.sc=function(a){return this.X(1/a)};
m.Yb=function(a){var b=this.x,c=this.y;a=a.elements;this.x=a[0]*b+a[3]*c+a[6];this.y=a[1]*b+a[4]*c+a[7];return this};m.min=function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);return this};m.max=function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);return this};m.floor=function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this};m.ceil=function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this};
m.round=function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this};m.Qa=function(){this.x=-this.x;this.y=-this.y};m.tc=function(a){return this.x*a.x+this.y*a.y};m.Cc=function(){return this.x*this.x+this.y*this.y};m.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y)};m.normalize=function(){return this.sc(this.length()||1)};m.angle=function(){return Math.atan2(-this.y,-this.x)+Math.PI};m.Hd=function(a){var b=this.x-a.x;a=this.y-a.y;return b*b+a*a};
m.oa=function(a){return a.x===this.x&&a.y===this.y};m.La=function(a,b){b=void 0===b?0:b;this.x=a[b];this.y=a[b+1];return this};m.ha=function(a,b){a=void 0===a?[]:a;b=void 0===b?0:b;a[b]=this.x;a[b+1]=this.y;return a};m.ib=function(a,b){this.x=Ja(a,b);this.y=Ka(a,b)};m.random=function(){this.x=Math.random();this.y=Math.random();return this};
ja.Object.defineProperties(M.prototype,{width:{configurable:!0,enumerable:!0,get:function(){return this.x},set:function(a){this.x=a}},height:{configurable:!0,enumerable:!0,get:function(){return this.y},set:function(a){this.y=a}}});M.prototype.isVector2=!0;var zb;var Ab=0;
function N(a,b,c,d,e,f,g,h,k,l){a=void 0===a?Bb:a;l=void 0===l?3E3:l;this.va=void 0;this.id=Ab++;this.F=wa();this.name="";this.image=a;this.Fc=[];this.mapping=void 0===b?300:b;this.xb=void 0===c?1001:c;this.yb=void 0===d?1001:d;this.xa=void 0===e?1006:e;this.O=void 0===f?1008:f;this.fb=void 0===k?1:k;this.format=void 0===g?1023:g;this.Jb=null;this.type=void 0===h?1009:h;this.offset=new M(0,0);this.repeat=new M(1,1);this.center=new M(0,0);this.rotation=0;this.pa=!0;this.matrix=new cb;this.ia=!0;this.premultiplyAlpha=
!1;this.flipY=!0;this.Qb=4;this.encoding=l;this.version=0;this.kd=null}A(N,Va);m=N.prototype;m.bb=function(){var a=this.repeat.x,b=this.repeat.y,c=this.rotation,d=this.center.x,e=this.center.y,f=Math.cos(c);c=Math.sin(c);this.matrix.set(a*f,a*c,-a*(f*d+c*e)+d+this.offset.x,-b*c,b*f,-b*(-c*d+f*e)+e+this.offset.y,0,0,1)};m.clone=function(){return(new this.constructor).l(this)};
m.l=function(a){this.name=a.name;this.image=a.image;this.Fc=a.Fc.slice(0);this.mapping=a.mapping;this.xb=a.xb;this.yb=a.yb;this.xa=a.xa;this.O=a.O;this.fb=a.fb;this.format=a.format;this.Jb=a.Jb;this.type=a.type;this.offset.l(a.offset);this.repeat.l(a.repeat);this.center.l(a.center);this.rotation=a.rotation;this.pa=a.pa;this.matrix.l(a.matrix);this.ia=a.ia;this.premultiplyAlpha=a.premultiplyAlpha;this.flipY=a.flipY;this.Qb=a.Qb;this.encoding=a.encoding;return this};
m.toJSON=function(a){var b=void 0===a||"string"===typeof a;if(!b&&void 0!==a.ea[this.F])return a.ea[this.F];var c={Ec:{version:4.5,type:"Texture",Jd:"Texture.toJSON"},F:this.F,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,ni:[this.xb,this.yb],format:this.format,type:this.type,encoding:this.encoding,O:this.O,xa:this.xa,fb:this.fb,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,
Qb:this.Qb};if(void 0!==this.image){var d=this.image;void 0===d.F&&(d.F=wa());if(!b&&void 0===a.images[d.F]){if(Array.isArray(d)){var e=[];for(var f=0,g=d.length;f<g;f++)d[f].Nd?e.push(Cb(d[f].image)):e.push(Cb(d[f]))}else e=Cb(d);a.images[d.F]={F:d.F,url:e}}c.image=d.F}b||(a.ea[this.F]=c);return c};m.W=function(){this.dispatchEvent({type:"dispose"})};ja.Object.defineProperties(N.prototype,{N:{configurable:!0,enumerable:!0,set:function(a){!0===a&&this.version++}}});var Bb=void 0;
N.prototype.isTexture=!0;
function Cb(a){if("undefined"!==typeof HTMLImageElement&&a instanceof HTMLImageElement||"undefined"!==typeof HTMLCanvasElement&&a instanceof HTMLCanvasElement||"undefined"!==typeof ImageBitmap&&a instanceof ImageBitmap){if(/^data:/i.test(a.src)||"undefined"==typeof HTMLCanvasElement)a=a.src;else{if(!(a instanceof HTMLCanvasElement)){void 0===zb&&(zb=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"));zb.width=a.width;zb.height=a.height;var b=zb.getContext("2d");a instanceof ImageData?
b.putImageData(a,0,0):b.drawImage(a,0,0,a.width,a.height);a=zb}a=2048<a.width||2048<a.height?a.toDataURL("image/jpeg",.6):a.toDataURL("image/png")}return a}if(a.data)return{data:Array.prototype.slice.call(a.data),width:a.width,height:a.height,type:a.data.constructor.name};console.warn("THREE.Texture: Unable to serialize Texture.");return{}};function Db(a){xb.call(this,a)}A(Db,xb);Db.prototype.load=function(a,b,c,d){var e=new N,f=new yb(this.h);f.crossOrigin=this.crossOrigin;f.path=this.path;f.load(a,function(g){e.image=g;e.format=0<a.search(/\.jpe?g($|\?)/i)||0===a.search(/^data:image\/jpeg/)?1022:1023;e.N=!0;void 0!==b&&b(e)},c,d);return e};function Eb(){J.call(this);this.type="Scene";this.Ic=this.fog=this.Ha=this.background=null;this.Db=!0;"undefined"!==typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}A(Eb,J);Eb.prototype.l=function(a,b){J.prototype.l.call(this,a,b);null!==a.background&&(this.background=a.background.clone());null!==a.Ha&&(this.Ha=a.Ha.clone());null!==a.fog&&(this.fog=a.fog.clone());null!==a.Ic&&(this.Ic=a.Ic.clone());this.Db=a.Db;this.pa=a.pa;return this};
Eb.prototype.toJSON=function(a){var b=J.prototype.toJSON.call(this,a);null!==this.background&&(b.object.background=this.background.toJSON(a));null!==this.Ha&&(b.object.Ha=this.Ha.toJSON(a));null!==this.fog&&(b.object.fog=this.fog.toJSON());return b};Eb.prototype.ac=!0;var Fb={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,
darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,
grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,
lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,
palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,
teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Gb(a,b,c){0>c&&(c+=1);1<c&&--c;return c<1/6?a+6*(b-a)*c:.5>c?b:c<2/3?a+6*(b-a)*(2/3-c):a}function O(a){return this.set(a)}m=O.prototype;m.set=function(a){a&&a.isColor?this.l(a):"number"===typeof a?Hb(this,a):"string"===typeof a&&Ib(this,a);return this};
function Hb(a,b){b=Math.floor(b);a.r=(b>>16&255)/255;a.g=(b>>8&255)/255;a.b=(b&255)/255}function Jb(a,b,c,d){b=(b%1+1)%1;c=xa(c,0);d=xa(d,0);0===c?a.r=a.g=a.b=d:(c=.5>=d?d*(1+c):d+c-d*c,d=2*d-c,a.r=Gb(d,c,b+1/3),a.g=Gb(d,c,b),a.b=Gb(d,c,b-1/3))}
function Ib(a,b){function c(h){void 0!==h&&1>parseFloat(h)&&console.warn("THREE.Color: Alpha component of "+b+" will be ignored.")}var d;if(d=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(b)){var e=d[2];switch(d[1]){case "rgb":case "rgba":if(d=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(e)){a.r=Math.min(255,parseInt(d[1],10))/255;a.g=Math.min(255,parseInt(d[2],10))/255;a.b=Math.min(255,parseInt(d[3],10))/255;c(d[4]);return}if(d=/^\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(e)){a.r=
Math.min(100,parseInt(d[1],10))/100;a.g=Math.min(100,parseInt(d[2],10))/100;a.b=Math.min(100,parseInt(d[3],10))/100;c(d[4]);return}break;case "hsl":case "hsla":if(d=/^\s*(\d*\.?\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(e)){e=parseFloat(d[1])/360;var f=parseInt(d[2],10)/100,g=parseInt(d[3],10)/100;c(d[4]);Jb(a,e,f,g);return}}}else if(d=/^#([A-Fa-f\d]+)$/.exec(b)){d=d[1];e=d.length;if(3===e){a.r=parseInt(d.charAt(0)+d.charAt(0),16)/255;a.g=parseInt(d.charAt(1)+d.charAt(1),16)/
255;a.b=parseInt(d.charAt(2)+d.charAt(2),16)/255;return}if(6===e){a.r=parseInt(d.charAt(0)+d.charAt(1),16)/255;a.g=parseInt(d.charAt(2)+d.charAt(3),16)/255;a.b=parseInt(d.charAt(4)+d.charAt(5),16)/255;return}}b&&0<b.length&&Kb(a,b)}function Kb(a,b){var c=Fb[b];void 0!==c?Hb(a,c):console.warn("THREE.Color: Unknown color "+b)}m.clone=function(){return new this.constructor(this.r,this.g,this.b)};m.l=function(a){this.r=a.r;this.g=a.g;this.b=a.b;return this};
function Lb(a){return 255*a.r<<16^255*a.g<<8^255*a.b<<0}m.add=function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this};m.sub=function(a){this.r=Math.max(0,this.r-a.r);this.g=Math.max(0,this.g-a.g);this.b=Math.max(0,this.b-a.b);return this};m.multiply=function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this};m.X=function(a){this.r*=a;this.g*=a;this.b*=a;return this};m.oa=function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b};
m.La=function(a,b){b=void 0===b?0:b;this.r=a[b];this.g=a[b+1];this.b=a[b+2];return this};m.ha=function(a,b){a=void 0===a?[]:a;b=void 0===b?0:b;a[b]=this.r;a[b+1]=this.g;a[b+2]=this.b;return a};m.ib=function(a,b){this.r=Ja(a,b);this.g=Ka(a,b);this.b=La(a,b);!0===a.dc&&(this.r/=255,this.g/=255,this.b/=255)};m.toJSON=function(){return Lb(this)};m.isColor=!0;m.r=1;m.g=1;m.b=1;var Mb=new D,Nb=new cb;function Ob(){var a;this.normal=a=void 0===a?new D(1,0,0):a;this.h=0}m=Ob.prototype;m.set=function(a,b){this.normal.l(a);this.h=b;return this};function Pb(a,b,c,d,e){a.normal.set(b,c,d);a.h=e;return a}m.l=function(a){this.normal.l(a.normal);this.h=a.h;return this};m.normalize=function(){var a=1/this.normal.length();this.normal.X(a);this.h*=a;return this};m.Qa=function(){this.h*=-1;this.normal.Qa()};
m.L=function(a,b){b=b||db(Nb,a);var c=Mb;void 0===c&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),c=new D);a=c.l(this.normal).X(-this.h).L(a);b=this.normal.Yb(b).normalize();this.h=-a.tc(b);return this};m.oa=function(a){return a.normal.oa(this.normal)&&a.h===this.h};m.clone=function(){return(new this.constructor).l(this)};var Qb=0;
function P(){this.va=void 0;this.id=Qb++;this.F=wa();this.name="";this.type="Material";this.fog=!0;this.nb=1;this.S=0;this.wb=!1;this.opacity=1;this.za=!1;this.Bd=204;this.yd=205;this.blendEquation=100;this.Ad=this.zd=this.Cd=null;this.depthFunc=3;this.Gb=this.Fb=!0;this.Tc=255;this.stencilFunc=519;this.Rc=0;this.Qc=255;this.Vc=this.Uc=this.Pc=7680;this.Sc=!1;this.gb=null;this.Zb=this.qc=!1;this.ub=null;this.Ed=!0;this.precision=null;this.polygonOffset=!1;this.fc=this.ec=0;this.Hb=!1;this.Ua=0;this.premultipliedAlpha=
!1;this.Wc=this.visible=!0;this.qa={};this.version=0}A(P,Va);m=P.prototype;m.Eg=function(){};m.Fd=function(){return this.Eg.toString()};
function Rb(a,b){if(void 0!==b)for(var c in b){var d=b[c];if(void 0===d)console.warn("THREE.Material: '"+c+"' parameter is undefined.");else if("shading"===c)console.warn("THREE."+a.type+": .shading has been removed. Use the boolean .flatShading instead."),a.hb=1===d?!0:!1;else{var e=a[c];void 0===e?console.warn("THREE."+a.type+": '"+c+"' is not a property of this material."):e&&e.isColor?e.set(d):e&&e.isVector3&&d&&d.isVector3?e.l(d):a[c]=d}}}
m.toJSON=function(a){function b(e){var f=[],g;for(g in e){var h=e[g];delete h.Ec;f.push(h)}return f}var c=void 0===a||"string"===typeof a;c&&(a={ea:{},images:{}});var d={Ec:{version:4.5,type:"Material",Jd:"Material.toJSON"}};d.F=this.F;d.type=this.type;""!==this.name&&(d.name=this.name);this.color&&this.color.isColor&&(d.color=Lb(this.color));void 0!==this.roughness&&(d.roughness=this.roughness);void 0!==this.metalness&&(d.metalness=this.metalness);this.sheen&&this.sheen.isColor&&(d.sheen=Lb(this.sheen));
this.emissive&&this.emissive.isColor&&(d.emissive=Lb(this.emissive));this.bd&&1!==this.bd&&(d.bd=this.bd);this.specular&&this.specular.isColor&&(d.specular=Lb(this.specular));void 0!==this.shininess&&(d.shininess=this.shininess);void 0!==this.clearcoat&&(d.clearcoat=this.clearcoat);void 0!==this.clearcoatRoughness&&(d.clearcoatRoughness=this.clearcoatRoughness);this.clearcoatMap&&this.clearcoatMap.isTexture&&(d.clearcoatMap=this.clearcoatMap.toJSON(a).F);this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&
(d.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(a).F);this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(d.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(a).F,d.clearcoatNormalScale=this.clearcoatNormalScale.ha());this.map&&this.map.isTexture&&(d.map=this.map.toJSON(a).F);this.matcap&&this.matcap.isTexture&&(d.matcap=this.matcap.toJSON(a).F);this.alphaMap&&this.alphaMap.isTexture&&(d.alphaMap=this.alphaMap.toJSON(a).F);this.lightMap&&this.lightMap.isTexture&&(d.lightMap=this.lightMap.toJSON(a).F,
d.lightMapIntensity=this.lightMapIntensity);this.aoMap&&this.aoMap.isTexture&&(d.aoMap=this.aoMap.toJSON(a).F,d.aoMapIntensity=this.aoMapIntensity);this.bumpMap&&this.bumpMap.isTexture&&(d.bumpMap=this.bumpMap.toJSON(a).F,d.bumpScale=this.bumpScale);this.normalMap&&this.normalMap.isTexture&&(d.normalMap=this.normalMap.toJSON(a).F,d.ae=this.ae,d.normalScale=this.normalScale.ha());this.displacementMap&&this.displacementMap.isTexture&&(d.displacementMap=this.displacementMap.toJSON(a).F,d.displacementScale=
this.displacementScale,d.displacementBias=this.displacementBias);this.roughnessMap&&this.roughnessMap.isTexture&&(d.roughnessMap=this.roughnessMap.toJSON(a).F);this.metalnessMap&&this.metalnessMap.isTexture&&(d.metalnessMap=this.metalnessMap.toJSON(a).F);this.emissiveMap&&this.emissiveMap.isTexture&&(d.emissiveMap=this.emissiveMap.toJSON(a).F);this.specularMap&&this.specularMap.isTexture&&(d.specularMap=this.specularMap.toJSON(a).F);this.envMap&&this.envMap.isTexture&&(d.envMap=this.envMap.toJSON(a).F,
d.reflectivity=this.reflectivity,d.refractionRatio=this.refractionRatio,void 0!==this.ob&&(d.ob=this.ob),void 0!==this.envMapIntensity&&(d.envMapIntensity=this.envMapIntensity));this.gradientMap&&this.gradientMap.isTexture&&(d.gradientMap=this.gradientMap.toJSON(a).F);void 0!==this.size&&(d.size=this.size);void 0!==this.Nc&&(d.Nc=this.Nc);1!==this.nb&&(d.nb=this.nb);0!==this.S&&(d.S=this.S);this.wb&&(d.wb=!0);1>this.opacity&&(d.opacity=this.opacity);!0===this.za&&(d.za=this.za);d.depthFunc=this.depthFunc;
d.Fb=this.Fb;d.Gb=this.Gb;d.Sc=this.Sc;d.Tc=this.Tc;d.stencilFunc=this.stencilFunc;d.Rc=this.Rc;d.Qc=this.Qc;d.Pc=this.Pc;d.Uc=this.Uc;d.Vc=this.Vc;this.rotation&&0!==this.rotation&&(d.rotation=this.rotation);!0===this.polygonOffset&&(d.polygonOffset=!0);0!==this.ec&&(d.ec=this.ec);0!==this.fc&&(d.fc=this.fc);this.Ob&&1!==this.Ob&&(d.Ob=this.Ob);void 0!==this.dashSize&&(d.dashSize=this.dashSize);void 0!==this.Id&&(d.Id=this.Id);void 0!==this.scale&&(d.scale=this.scale);!0===this.Hb&&(d.Hb=!0);0<this.Ua&&
(d.Ua=this.Ua);!0===this.premultipliedAlpha&&(d.premultipliedAlpha=this.premultipliedAlpha);!0===this.fa&&(d.fa=this.fa);1<this.Ea&&(d.Ea=this.Ea);"round"!==this.Yc&&(d.Yc=this.Yc);"round"!==this.Zc&&(d.Zc=this.Zc);!0===this.aa&&(d.aa=!0);!0===this.kb&&(d.kb=!0);!0===this.da&&(d.da=!0);!0===this.hb&&(d.hb=this.hb);!1===this.visible&&(d.visible=!1);!1===this.Wc&&(d.Wc=!1);"{}"!==JSON.stringify(this.qa)&&(d.qa=this.qa);c&&(c=b(a.ea),a=b(a.images),0<c.length&&(d.ea=c),0<a.length&&(d.images=a));return d};
m.clone=function(){return(new this.constructor).l(this)};
m.l=function(a){this.name=a.name;this.fog=a.fog;this.nb=a.nb;this.S=a.S;this.wb=a.wb;this.opacity=a.opacity;this.za=a.za;this.Bd=a.Bd;this.yd=a.yd;this.blendEquation=a.blendEquation;this.Cd=a.Cd;this.zd=a.zd;this.Ad=a.Ad;this.depthFunc=a.depthFunc;this.Fb=a.Fb;this.Gb=a.Gb;this.Tc=a.Tc;this.stencilFunc=a.stencilFunc;this.Rc=a.Rc;this.Qc=a.Qc;this.Pc=a.Pc;this.Uc=a.Uc;this.Vc=a.Vc;this.Sc=a.Sc;var b=a.gb,c=null;if(null!==b){var d=b.length;c=Array(d);for(var e=0;e!==d;++e)c[e]=b[e].clone()}this.gb=
c;this.qc=a.qc;this.Zb=a.Zb;this.ub=a.ub;this.Ed=a.Ed;this.precision=a.precision;this.polygonOffset=a.polygonOffset;this.ec=a.ec;this.fc=a.fc;this.Hb=a.Hb;this.Ua=a.Ua;this.premultipliedAlpha=a.premultipliedAlpha;this.visible=a.visible;this.Wc=a.Wc;this.qa=JSON.parse(JSON.stringify(a.qa));return this};m.W=function(){this.dispatchEvent({type:"dispose"})};Object.defineProperty(P.prototype,"needsUpdate",{set:function(a){!0===a&&this.version++}});function Sb(){var a=void 0===a?new D(Infinity,Infinity,Infinity):a;var b=void 0===b?new D(-Infinity,-Infinity,-Infinity):b;this.min=a;this.max=b}m=Sb.prototype;m.set=function(a,b){this.min.l(a);this.max.l(b);return this};function Tb(a,b){for(var c=Infinity,d=Infinity,e=Infinity,f=-Infinity,g=-Infinity,h=-Infinity,k=0,l=b.count;k<l;k++){var p=Ja(b,k),n=Ka(b,k),q=La(b,k);p<c&&(c=p);n<d&&(d=n);q<e&&(e=q);p>f&&(f=p);n>g&&(g=n);q>h&&(h=q)}a.min.set(c,d,e);a.max.set(f,g,h)}m.clone=function(){return(new this.constructor).l(this)};
m.l=function(a){this.min.l(a.min);this.max.l(a.max);return this};function Ub(a){a.min.x=a.min.y=a.min.z=Infinity;a.max.x=a.max.y=a.max.z=-Infinity}function Vb(a){return a.max.x<a.min.x||a.max.y<a.min.y||a.max.z<a.min.z}function Wb(a,b){void 0===b&&(console.warn("THREE.Box3: .getCenter() target is now required"),b=new D);return Vb(a)?b.set(0,0,0):b.Ta(a.min,a.max).X(.5)}function Xb(a,b){a.min.min(b);a.max.max(b)}
m.L=function(a){if(Vb(this))return this;Yb[0].set(this.min.x,this.min.y,this.min.z).L(a);Yb[1].set(this.min.x,this.min.y,this.max.z).L(a);Yb[2].set(this.min.x,this.max.y,this.min.z).L(a);Yb[3].set(this.min.x,this.max.y,this.max.z).L(a);Yb[4].set(this.max.x,this.min.y,this.min.z).L(a);Yb[5].set(this.max.x,this.min.y,this.max.z).L(a);Yb[6].set(this.max.x,this.max.y,this.min.z).L(a);Yb[7].set(this.max.x,this.max.y,this.max.z).L(a);a=Yb;Ub(this);for(var b=0,c=a.length;b<c;b++)Xb(this,a[b]);return this};
m.oa=function(a){return a.min.oa(this.min)&&a.max.oa(this.max)};var Yb=[new D,new D,new D,new D,new D,new D,new D,new D];var Q=new D,Zb=new M;function $b(a,b,c){if(Array.isArray(a))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="";this.R=a;this.ua=b;this.count=void 0!==a?a.length/b:0;this.dc=!0===c;this.usage=35044;this.nh={offset:0,count:-1};this.version=0}m=$b.prototype;m.l=function(a){this.name=a.name;this.R=new a.R.constructor(a.R);this.ua=a.ua;this.count=a.count;this.dc=a.dc;this.usage=a.usage;return this};
m.Yb=function(a){if(2===this.ua)for(var b=0,c=this.count;b<c;b++){Zb.ib(this,b);Zb.Yb(a);var d=b,e=Zb.x,f=Zb.y;d*=this.ua;this.R[d]=e;this.R[d+1]=f}else if(3===this.ua)for(b=0,c=this.count;b<c;b++)Q.ib(this,b),Q.Yb(a),ac(this,b);return this};m.L=function(a){for(var b=0,c=this.count;b<c;b++)Q.x=Ja(this,b),Q.y=Ka(this,b),Q.z=La(this,b),Q.L(a),ac(this,b);return this};m.xd=function(a){for(var b=0,c=this.count;b<c;b++)Q.x=Ja(this,b),Q.y=Ka(this,b),Q.z=La(this,b),Q.xd(a),ac(this,b)};
m.lc=function(a){for(var b=0,c=this.count;b<c;b++)Q.x=Ja(this,b),Q.y=Ka(this,b),Q.z=La(this,b),Q.lc(a),ac(this,b)};m.set=function(a,b){this.R.set(a,void 0===b?0:b);return this};function Ja(a,b){return a.R[b*a.ua]}function Ka(a,b){return a.R[b*a.ua+1]}function La(a,b){return a.R[b*a.ua+2]}function ac(a,b){var c=Q.x,d=Q.y,e=Q.z;b*=a.ua;a.R[b]=c;a.R[b+1]=d;a.R[b+2]=e}m.clone=function(){return(new this.constructor(this.R,this.ua)).l(this)};
m.toJSON=function(){return{ua:this.ua,type:this.R.constructor.name,R:Array.prototype.slice.call(this.R),dc:this.dc}};ja.Object.defineProperties($b.prototype,{N:{configurable:!0,enumerable:!0,set:function(a){!0===a&&this.version++}}});function bc(a,b,c){$b.call(this,new Uint16Array(a),b,c)}A(bc,$b);function cc(a,b,c){$b.call(this,new Uint32Array(a),b,c)}A(cc,$b);function dc(a,b,c){$b.call(this,new Float32Array(a),b,c)}A(dc,$b);function ec(){var a;this.center=a=void 0===a?new D:a;this.ca=-1}m=ec.prototype;m.set=function(a,b){this.center.l(a);this.ca=b;return this};m.l=function(a){this.center.l(a.center);this.ca=a.ca;return this};m.L=function(a){this.center.L(a);a=a.elements;this.ca*=Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10]));return this};m.oa=function(a){return a.center.oa(this.center)&&a.ca===this.ca};m.clone=function(){return(new this.constructor).l(this)};function fc(a){if(0===a.length)return-Infinity;for(var b=a[0],c=1,d=a.length;c<d;++c)a[c]>b&&(b=a[c]);return b};var gc=0,hc=new G,ic=new J,jc=new D,R=new Sb,kc=new Sb,S=new D;function lc(){this.va=void 0;this.id=gc++;this.F=wa();this.name="";this.type="BufferGeometry";this.index=null;this.attributes={};this.ya={};this.rb=!1;this.groups=[];this.Ca=this.h=null;this.i={start:0,count:Infinity};this.qa={};this.parameters=null}A(lc,Va);function mc(a,b){Array.isArray(b)?a.index=new (65535<fc(b)?cc:bc)(b,1):a.index=b}m=lc.prototype;m.getAttribute=function(a){return this.attributes[a]};
m.setAttribute=function(a,b){this.attributes[a]=b;return this};m.hasAttribute=function(a){return void 0!==this.attributes[a]};function nc(a,b,c,d){a.groups.push({start:b,count:c,Xd:void 0===d?0:d})}m.L=function(a){var b=this.attributes.position;void 0!==b&&(b.L(a),b.N=!0);b=this.attributes.normal;if(void 0!==b){var c=db(new cb,a);b.xd(c);b.N=!0}b=this.attributes.ki;void 0!==b&&(b.lc(a),b.N=!0);null!==this.h&&oc(this);null!==this.Ca&&pc(this);return this};
m.scale=function(a,b,c){hc.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);this.L(hc);return this};m.Oa=function(a){ic.Oa(a);ic.bb();this.L(ic.matrix)};m.center=function(){oc(this);Wb(this.h,jc).Qa();hc.set(1,0,0,jc.x,0,1,0,jc.y,0,0,1,jc.z,0,0,0,1);this.L(hc);return this};
function oc(a){null===a.h&&(a.h=new Sb);var b=a.attributes.position,c=a.ya.position;if(b&&b.Me)console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',a),a.h.set(new D(-Infinity,-Infinity,-Infinity),new D(Infinity,Infinity,Infinity));else{if(void 0!==b){if(Tb(a.h,b),c){b=0;for(var d=c.length;b<d;b++)Tb(R,c[b]),a.rb?(S.Ta(a.h.min,R.min),Xb(a.h,S),S.Ta(a.h.max,R.max),Xb(a.h,S)):(Xb(a.h,R.min),Xb(a.h,
R.max))}}else Ub(a.h);(isNaN(a.h.min.x)||isNaN(a.h.min.y)||isNaN(a.h.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',a)}}
function pc(a){null===a.Ca&&(a.Ca=new ec);var b=a.attributes.position,c=a.ya.position;if(b&&b.Me)console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',a),a.Ca.set(new D,Infinity);else if(b){var d=a.Ca.center;Tb(R,b);if(c)for(var e=0,f=c.length;e<f;e++)Tb(kc,c[e]),a.rb?(S.Ta(R.min,kc.min),Xb(R,S),S.Ta(R.max,kc.max),Xb(R,S)):(Xb(R,kc.min),Xb(R,kc.max));Wb(R,d);f=e=0;for(var g=b.count;f<g;f++)S.ib(b,
f),e=Math.max(e,d.Hd(S));if(c)for(f=0,g=c.length;f<g;f++)for(var h=c[f],k=a.rb,l=0,p=h.count;l<p;l++)S.ib(h,l),k&&(jc.ib(b,l),S.add(jc)),e=Math.max(e,d.Hd(S));a.Ca.ca=Math.sqrt(e);isNaN(a.Ca.ca)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',a)}}
m.merge=function(a,b){if(a){void 0===b&&(b=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var c=this.attributes,d;for(d in c)if(void 0!==a.attributes[d]){var e=c[d].R,f=a.attributes[d],g=f.R,h=f.ua*b;f=Math.min(g.length,e.length-h);for(var k=0;k<f;k++,h++)e[h]=g[k]}return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",a)};
m.toJSON=function(){var a={Ec:{version:4.5,type:"BufferGeometry",Jd:"BufferGeometry.toJSON"}};a.F=this.F;a.type=this.type;""!==this.name&&(a.name=this.name);0<Object.keys(this.qa).length&&(a.qa=this.qa);if(void 0!==this.parameters){var b=this.parameters;for(c in b)void 0!==b[c]&&(a[c]=b[c]);return a}a.data={attributes:{}};var c=this.index;null!==c&&(a.data.index={type:c.R.constructor.name,R:Array.prototype.slice.call(c.R)});c=this.attributes;for(var d in c){var e=c[d],f=e.toJSON(a.data);""!==e.name&&
(f.name=e.name);a.data.attributes[d]=f}d={};c=!1;for(b in this.ya){e=this.ya[b];f=[];for(var g=0,h=e.length;g<h;g++){var k=e[g],l=k.toJSON(a.data);""!==k.name&&(l.name=k.name);f.push(l)}0<f.length&&(d[b]=f,c=!0)}c&&(a.data.ya=d,a.data.rb=this.rb);b=this.groups;0<b.length&&(a.data.groups=JSON.parse(JSON.stringify(b)));b=this.Ca;null!==b&&(a.data.Ca={center:b.center.ha(),ca:b.ca});return a};m.clone=function(){return(new lc).l(this)};
m.l=function(a){this.index=null;this.attributes={};this.ya={};this.groups=[];this.Ca=this.h=null;var b={};this.name=a.name;var c=a.index;null!==c&&mc(this,c.clone(b));c=a.attributes;for(var d in c)this.setAttribute(d,c[d].clone(b));d=a.ya;for(var e in d){c=[];for(var f=d[e],g=0,h=f.length;g<h;g++)c.push(f[g].clone(b));this.ya[e]=c}this.rb=a.rb;b=a.groups;e=0;for(d=b.length;e<d;e++)c=b[e],nc(this,c.start,c.count,c.Xd);b=a.h;null!==b&&(this.h=b.clone());b=a.Ca;null!==b&&(this.Ca=b.clone());this.i.start=
a.i.start;this.i.count=a.i.count;this.qa=a.qa;return this};m.W=function(){this.dispatchEvent({type:"dispose"})};function qc(a,b,c,d,e,f){function g(u,t,v,x,w,y,z,B,T,da,Ba){var Ca=y/T,Da=z/da,Ea=y/2,Fa=z/2,Ga=B/2;z=T+1;for(var Ha=da+1,fa=y=0,F=new D,Wa=0;Wa<Ha;Wa++)for(var yc=Wa*Da-Fa,Xa=0;Xa<z;Xa++)F[u]=(Xa*Ca-Ea)*x,F[t]=yc*w,F[v]=Ga,l.push(F.x,F.y,F.z),F[u]=0,F[t]=0,F[v]=0<B?1:-1,p.push(F.x,F.y,F.z),n.push(Xa/T),n.push(1-Wa/da),y+=1;for(u=0;u<da;u++)for(t=0;t<T;t++)v=q+t+z*(u+1),x=q+(t+1)+z*(u+1),w=q+(t+1)+z*u,k.push(q+t+z*u,v,w),k.push(v,x,w),fa+=6;nc(h,r,fa,Ba);r+=fa;q+=y}a=void 0===a?1:a;b=void 0===b?
1:b;c=void 0===c?1:c;d=void 0===d?1:d;e=void 0===e?1:e;f=void 0===f?1:f;lc.call(this);this.type="BoxGeometry";this.parameters={width:a,height:b,depth:c,ph:d,Zf:e,Jh:f};var h=this;d=Math.floor(d);e=Math.floor(e);f=Math.floor(f);var k=[],l=[],p=[],n=[],q=0,r=0;g("z","y","x",-1,-1,c,b,a,f,e,0);g("z","y","x",1,-1,c,b,-a,f,e,1);g("x","z","y",1,1,a,c,b,d,f,2);g("x","z","y",1,-1,a,c,-b,d,f,3);g("x","y","z",1,-1,a,b,c,d,e,4);g("x","y","z",-1,-1,a,b,-c,d,e,5);mc(this,k);this.setAttribute("position",new dc(l,
3));this.setAttribute("normal",new dc(p,3));this.setAttribute("uv",new dc(n,2))}A(qc,lc);function rc(a,b,c,d,e,f,g,h,k,l){a=void 0!==a?a:[];N.call(this,a,void 0!==b?b:301,c,d,e,f,void 0!==g?g:1022,h,k,l);this.ud=!0;this.flipY=!1}A(rc,N);ja.Object.defineProperties(rc.prototype,{images:{configurable:!0,enumerable:!0,get:function(){return this.image},set:function(a){this.image=a}}});rc.prototype.Md=!0;function sc(a){P.call(this);this.type="MeshBasicMaterial";this.color=new O(16777215);this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.envMap=this.alphaMap=this.specularMap=null;this.ob=0;this.reflectivity=1;this.refractionRatio=.98;this.fa=!1;this.Ea=1;this.Zc=this.Yc="round";this.aa=this.da=!1;Rb(this,a)}A(sc,P);
sc.prototype.l=function(a){P.prototype.l.call(this,a);this.color.l(a.color);this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.ob=a.ob;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.fa=a.fa;this.Ea=a.Ea;this.Yc=a.Yc;this.Zc=a.Zc;this.da=a.da;this.aa=a.aa;return this};sc.prototype.Qd=!0;new G;function tc(a,b){a=void 0===a?new lc:a;b=void 0===b?new sc:b;J.call(this);this.type="Mesh";this.$=a;this.M=b;a=this.$.ya;b=Object.keys(a);if(0<b.length&&(a=a[b[0]],void 0!==a)){this.cc=[];this.Gc={};b=0;for(var c=a.length;b<c;b++){var d=a[b].name||String(b);this.cc.push(0);this.Gc[d]=b}}this.Ac=!0;this.Gc=this.cc=void 0}A(tc,J);tc.prototype.l=function(a){J.prototype.l.call(this,a);void 0!==a.cc&&(this.cc=a.cc.slice());void 0!==a.Gc&&(this.Gc=Object.assign({},a.Gc));this.M=a.M;this.$=a.$;return this};function uc(a,b,c,d,e,f,g,h,k,l,p,n){N.call(this,null,f,g,h,k,l,d,e,p,n);this.image={data:a||null,width:b||1,height:c||1};this.xa=void 0!==k?k:1003;this.O=void 0!==l?l:1003;this.flipY=this.ia=!1;this.Qb=1;this.N=!0}A(uc,N);uc.prototype.Nd=!0;var vc=new ec;function wc(){var a=void 0===a?new Ob:a;var b=void 0===b?new Ob:b;var c=void 0===c?new Ob:c;var d=void 0===d?new Ob:d;var e=void 0===e?new Ob:e;var f=void 0===f?new Ob:f;this.h=[a,b,c,d,e,f]}wc.prototype.set=function(a,b,c,d,e,f){var g=this.h;g[0].l(a);g[1].l(b);g[2].l(c);g[3].l(d);g[4].l(e);g[5].l(f);return this};wc.prototype.l=function(a){for(var b=this.h,c=0;6>c;c++)b[c].l(a.h[c]);return this};function xc(a,b){var c=b.$;null===c.Ca&&pc(c);vc.l(c.Ca).L(b.I);return zc(a)}
function zc(a){a=a.h;for(var b=vc.center,c=-vc.ca,d=0;6>d;d++){var e=a[d];if(e.normal.tc(b)+e.h<c)return!1}return!0}wc.prototype.clone=function(){return(new this.constructor).l(this)};function Ac(){this.context=null;this.j=!1;this.h=this.i=null}Ac.prototype.m=function(a,b){this.i(a,b);this.h=this.context.requestAnimationFrame(this.m)};Ac.prototype.start=function(){!0!==this.j&&null!==this.i&&(this.h=this.context.requestAnimationFrame(this.m),this.j=!0)};function Bc(a){this.h=a;this.A={}}
function U(a,b){if(void 0!==a.A[b])return a.A[b];switch(b){case "WEBGL_depth_texture":var c=a.h.getExtension("WEBGL_depth_texture")||a.h.getExtension("MOZ_WEBGL_depth_texture")||a.h.getExtension("WEBKIT_WEBGL_depth_texture");break;case "EXT_texture_filter_anisotropic":c=a.h.getExtension("EXT_texture_filter_anisotropic")||a.h.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.h.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case "WEBGL_compressed_texture_s3tc":c=a.h.getExtension("WEBGL_compressed_texture_s3tc")||
a.h.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.h.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case "WEBGL_compressed_texture_pvrtc":c=a.h.getExtension("WEBGL_compressed_texture_pvrtc")||a.h.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:c=a.h.getExtension(b)}return a.A[b]=c}Bc.prototype.has=function(a){return null!==U(this,a)};Bc.prototype.get=function(a){var b=U(this,a);null===b&&console.warn("THREE.WebGLRenderer: "+a+" extension not supported.");return b};function Cc(a,b,c){this.h=a;this.A=b;this.parameters=c;this.B="undefined"!==typeof WebGL2RenderingContext&&a instanceof WebGL2RenderingContext||"undefined"!==typeof WebGL2ComputeRenderingContext&&a instanceof WebGL2ComputeRenderingContext;this.precision=void 0!==c.precision?c.precision:"highp";this.j=Dc(this,this.precision);this.j!==this.precision&&(console.warn("THREE.WebGLRenderer:",this.precision,"not supported, using",this.j,"instead."),this.precision=this.j);this.Na=!0===c.Na;this.T=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS);
this.ka=a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS);this.o=a.getParameter(a.MAX_TEXTURE_SIZE);this.G=a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE);this.U=a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS);this.C=0<this.ka;this.ja=this.B||b.has("OES_texture_float");this.m=this.C&&this.ja;this.J=this.B?a.getParameter(a.MAX_SAMPLES):0}
function Dc(a,b){if("highp"===b){if(0<a.h.getShaderPrecisionFormat(a.h.VERTEX_SHADER,a.h.HIGH_FLOAT).precision&&0<a.h.getShaderPrecisionFormat(a.h.FRAGMENT_SHADER,a.h.HIGH_FLOAT).precision)return"highp";b="mediump"}return"mediump"===b&&0<a.h.getShaderPrecisionFormat(a.h.VERTEX_SHADER,a.h.MEDIUM_FLOAT).precision&&0<a.h.getShaderPrecisionFormat(a.h.FRAGMENT_SHADER,a.h.MEDIUM_FLOAT).precision?"mediump":"lowp"};function Ec(a,b){this.h=a;this.B=b.B;this.i=new WeakMap}Ec.prototype.get=function(a){a.Od&&(a=a.data);return this.i.get(a)};Ec.prototype.remove=function(a){a.Od&&(a=a.data);var b=this.i.get(a);b&&(this.h.deleteBuffer(b.buffer),this.i.delete(a))};
Ec.prototype.update=function(a,b){if(a.Me)b=this.i.get(a),(!b||b.version<a.version)&&this.i.set(a,{buffer:a.buffer,type:a.type,Eb:a.Kh,version:a.version});else{a.Od&&(a=a.data);var c=this.i.get(a);if(void 0===c){c=this.i;var d=c.set,e=a,f=a.R,g=a.usage,h=this.h.createBuffer();this.h.bindBuffer(b,h);this.h.bufferData(b,f,g);b=this.h.FLOAT;f instanceof Float32Array?b=this.h.FLOAT:f instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):f instanceof
Uint16Array?a.Oh?this.B?b=this.h.HALF_FLOAT:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):b=this.h.UNSIGNED_SHORT:f instanceof Int16Array?b=this.h.SHORT:f instanceof Uint32Array?b=this.h.UNSIGNED_INT:f instanceof Int32Array?b=this.h.INT:f instanceof Int8Array?b=this.h.BYTE:f instanceof Uint8Array&&(b=this.h.UNSIGNED_BYTE);d.call(c,e,{buffer:h,type:b,Eb:f.BYTES_PER_ELEMENT,version:a.version})}else c.version<a.version&&(d=a.R,e=a.nh,this.h.bindBuffer(b,c.buffer),
-1===e.count?this.h.bufferSubData(b,0,d):(this.B?this.h.bufferSubData(b,e.offset*d.BYTES_PER_ELEMENT,d,e.offset,e.count):this.h.bufferSubData(b,e.offset*d.BYTES_PER_ELEMENT,d.subarray(e.offset,e.offset+e.count)),e.count=-1),c.version=a.version)}};function Fc(a,b,c,d){a=void 0===a?1:a;b=void 0===b?1:b;c=void 0===c?1:c;d=void 0===d?1:d;lc.call(this);this.type="PlaneGeometry";this.parameters={width:a,height:b,ph:c,Zf:d};var e=a/2,f=b/2;c=Math.floor(c);d=Math.floor(d);var g=c+1,h=d+1,k=a/c,l=b/d;b=[];a=[];for(var p=[],n=[],q=0;q<h;q++)for(var r=q*l-f,u=0;u<g;u++)a.push(u*k-e,-r,0),p.push(0,0,1),n.push(u/c),n.push(1-q/d);for(e=0;e<d;e++)for(f=0;f<c;f++)h=f+g*(e+1),k=f+1+g*(e+1),l=f+1+g*e,b.push(f+g*e,h,l),b.push(h,k,l);mc(this,b);this.setAttribute("position",
new dc(a,3));this.setAttribute("normal",new dc(p,3));this.setAttribute("uv",new dc(n,2))}A(Fc,lc);function Gc(a){var b={},c;for(c in a){b[c]={};for(var d in a[c]){var e=a[c][d];b[c][d]=e&&(e.isColor||e.isMatrix3||e.Pe||e.isVector2||e.isVector3||e.Vd||e.isTexture||e.jg)?e.clone():Array.isArray(e)?e.slice():e}}return b}function V(a){for(var b={},c=0;c<a.length;c++){var d=Gc(a[c]),e;for(e in d)b[e]=d[e]}return b};function Hc(a){P.call(this);this.type="ShaderMaterial";this.Ga={};this.uniforms={};this.vertexShader="\nvoid main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n";this.fragmentShader="\nvoid main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}\n";this.Ob=1;this.fa=!1;this.Ea=1;this.kb=this.aa=this.da=this.sa=this.lights=this.fog=!1;this.A={If:!1,Rf:!1,drawBuffers:!1,mh:!1};this.Hf={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.cd=void 0;this.me=!1;this.Wa=null;
void 0!==a&&(void 0!==a.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),Rb(this,a));this.Nb=!0}A(Hc,P);Hc.prototype.l=function(a){P.prototype.l.call(this,a);this.fragmentShader=a.fragmentShader;this.vertexShader=a.vertexShader;this.uniforms=Gc(a.uniforms);this.Ga=Object.assign({},a.Ga);this.fa=a.fa;this.Ea=a.Ea;this.lights=a.lights;this.sa=a.sa;this.da=a.da;this.aa=a.aa;this.kb=a.kb;this.A=Object.assign({},a.A);this.Wa=a.Wa;return this};
Hc.prototype.toJSON=function(a){var b=P.prototype.toJSON.call(this,a);b.Wa=this.Wa;b.uniforms={};for(var c in this.uniforms){var d=this.uniforms[c].value;b.uniforms[c]=d&&d.isTexture?{type:"t",value:d.toJSON(a).F}:d&&d.isColor?{type:"c",value:Lb(d)}:d&&d.isVector2?{type:"v2",value:d.ha()}:d&&d.isVector3?{type:"v3",value:d.ha()}:d&&d.Vd?{type:"v4",value:d.ha()}:d&&d.isMatrix3?{type:"m3",value:d.ha()}:d&&d.Pe?{type:"m4",value:d.ha()}:{value:d}}0<Object.keys(this.Ga).length&&(b.Ga=this.Ga);b.vertexShader=
this.vertexShader;b.fragmentShader=this.fragmentShader;a={};for(var e in this.A)!0===this.A[e]&&(a[e]=!0);0<Object.keys(a).length&&(b.A=a);return b};var Ic={alphamap_fragment:"\n#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n",alphamap_pars_fragment:"\n#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",alphatest_fragment:"\n#ifdef ALPHATEST\n\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n\n#endif\n",aomap_fragment:"\n#ifdef USE_AOMAP\n\n\t// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\n\t#endif\n\n#endif\n",
aomap_pars_fragment:"\n#ifdef USE_AOMAP\n\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n\n#endif\n",begin_vertex:"\nvec3 transformed = vec3( position );\n",beginnormal_vertex:"\nvec3 objectNormal = vec3( normal );\n\n#ifdef USE_TANGENT\n\n\tvec3 objectTangent = vec3( tangent.xyz );\n\n#endif\n",bsdfs:'\n\n// Analytical approximation of the DFG LUT, one half of the\n// split-sum approximation used in indirect specular lighting.\n// via \'environmentBRDF\' from "Physically Based Shading on Mobile"\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\nvec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\n\tvec4 r = roughness * c0 + c1;\n\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n\n}\n\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\n\t// based upon Frostbite 3 Moving to Physically-based Rendering\n\t// page 32, equation 26: E[window1]\n\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t// this is intended to be used on spot and point lights who are represented as luminous intensity\n\t// but who must be converted to luminous irradiance for surface lighting calculation\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\n\tif( cutoffDistance > 0.0 ) {\n\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\n\t}\n\n\treturn distanceFalloff;\n\n#else\n\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\n\t}\n\n\treturn 1.0;\n\n#endif\n\n}\n\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\n\treturn RECIPROCAL_PI * diffuseColor;\n\n} // validated\n\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\n\t// Original approximation by Christophe Schlick \'94\n\t// float fresnel = pow( 1.0 - dotLH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH \'13)\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n\n} // validated\n\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\n\t// See F_Schlick\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\n\treturn Fr * fresnel + F0;\n\n}\n\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (34)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is "roughness squared" in Disney\u2019s reparameterization\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\t// geometry term (normalized) = G(l)\u22c5G(v) / 4(n\u22c5l)(n\u22c5v)\n\t// also see #12151\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\n\treturn 1.0 / ( gl * gv );\n\n} // validated\n\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\tfloat a2 = pow2( alpha );\n\n\t// dotNL and dotNV are explicitly swapped. This is not a mistake.\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\n\treturn 0.5 / max( gv + gl, EPSILON );\n\n}\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is "roughness squared" in Disney\u2019s reparameterization\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\n\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n\n}\n\n// GGX Distribution, Schlick Fresnel, GGX-Smith Visibility\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\n\tfloat alpha = pow2( roughness ); // UE4\'s roughness\n\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\n\tfloat D = D_GGX( alpha, dotNH );\n\n\treturn F * ( G * D );\n\n} // validated\n\n// Rect Area Light\n\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\n// code: https://github.com/selfshadow/ltc_code/\n\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\n\tfloat dotNV = saturate( dot( N, V ) );\n\n\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\treturn uv;\n\n}\n\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\n\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\n\t// An approximation of the form factor of a horizon-clipped rectangle.\n\n\tfloat l = length( f );\n\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n\n}\n\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\n\tfloat x = dot( v1, v2 );\n\n\tfloat y = abs( x );\n\n\t// rational polynomial approximation to theta / sin( theta ) / 2PI\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\n\treturn cross( v1, v2 ) * theta_sintheta;\n\n}\n\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\n\t// bail if point is on back side of plane of light\n\t// assumes ccw winding order of light vertices\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\n\t// construct orthonormal basis around N\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system\n\n\t// compute transform\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\n\t// transform rect\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\n\t// project rect onto sphere\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\n\t// calculate vector form factor\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\n\t// adjust for horizon clipping\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\n/*\n\t// alternate method of adjusting for horizon clipping (see referece)\n\t// refactoring required\n\tfloat len = length( vectorFormFactor );\n\tfloat z = vectorFormFactor.z / len;\n\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\n\t// tabulated horizon-clipped sphere, apparently...\n\tvec2 uv = vec2( z * 0.5 + 0.5, len );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\tfloat scale = texture2D( ltc_2, uv ).w;\n\n\tfloat result = len * scale;\n*/\n\n\treturn vec3( result );\n\n}\n\n// End Rect Area Light\n\n// ref: https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\n\treturn specularColor * brdf.x + brdf.y;\n\n} // validated\n\n// Fdez-Ag\u00fcera\'s "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"\n// Approximates multiscattering in order to preserve energy.\n// http://www.jcgt.org/published/0008/01/03/\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619; // 1/21\n\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n\n}\n\nfloat G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {\n\n\t// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\n\treturn 0.25;\n\n}\n\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n\n}\n\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\n\t//float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\t//float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\n\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\n\treturn F * ( G * D );\n\n} // validated\n\n// source: http://simonstechblog.blogspot.ca/2011/12/microfacet-brdf.html\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\n\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n\n#if defined( USE_SHEEN )\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs#L94\nfloat D_Charlie(float roughness, float NoH) {\n\t// Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF"\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125); // 2^(-14/2), so sin2h^2 > 0 in fp16\n\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs#L136\nfloat V_Neubelt(float NoV, float NoL) {\n\t// Neubelt and Pettineo 2013, "Crafting a Next-gen Material Pipeline for The Order: 1886"\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\n\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n\n}\n\n#endif\n',
bumpmap_pars_fragment:"\n#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n\t// http://api.unrealengine.com/attachments/Engine/Rendering/LightingAndShadows/BumpMappingWithoutTangentSpace/mm_sfgrad_bump.pdf\n\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\n\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n",
clipping_planes_fragment:"\n#if NUM_CLIPPING_PLANES > 0\n\n\tvec4 plane;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\n\t\tbool clipped = true;\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t\tif ( clipped ) discard;\n\n\t#endif\n\n#endif\n",
clipping_planes_pars_fragment:"\n#if NUM_CLIPPING_PLANES > 0\n\n\tvarying vec3 vClipPosition;\n\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n\n#endif\n",clipping_planes_pars_vertex:"\n#if NUM_CLIPPING_PLANES > 0\n\n\tvarying vec3 vClipPosition;\n\n#endif\n",clipping_planes_vertex:"\n#if NUM_CLIPPING_PLANES > 0\n\n\tvClipPosition = - mvPosition.xyz;\n\n#endif\n",color_fragment:"\n#ifdef USE_COLOR\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif\n",color_pars_fragment:"\n#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n",
color_pars_vertex:"\n#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\n\tvarying vec3 vColor;\n\n#endif\n",color_vertex:"\n#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\n\tvColor = vec3( 1.0 );\n\n#endif\n\n#ifdef USE_COLOR\n\n\tvColor.xyz *= color.xyz;\n\n#endif\n\n#ifdef USE_INSTANCING_COLOR\n\n\tvColor.xyz *= instanceColor.xyz;\n\n#endif\n",common:"\n#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n\n#ifndef saturate\n// <tonemapping_pars_fragment> may have defined saturate() already\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\n\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\n\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\n\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\n\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n}\n\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t// dir can be either a direction vector or a normal vector\n\t// upper-left 3x3 of matrix is assumed to be orthogonal\n\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n\n}\n\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\n\treturn - distance * planeNormal + point;\n\n}\n\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n\n}\n\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n\n}\n\nmat3 transposeMat3( const in mat3 m ) {\n\n\tmat3 tmp;\n\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\n\treturn tmp;\n\n}\n\n// https://en.wikipedia.org/wiki/Relative_luminance\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\n\treturn dot( weights, color.rgb );\n\n}\n\nbool isPerspectiveMatrix( mat4 m ) {\n\n\treturn m[ 2 ][ 3 ] == - 1.0;\n\n}\n\nvec2 equirectUv( in vec3 dir ) {\n\n\t// dir is assumed to be unit length\n\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\n\treturn vec2( u, v );\n\n}\n",
cube_uv_reflection_fragment:"\n#ifdef ENVMAP_TYPE_CUBE_UV\n\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\n\t// These shader functions convert between the UV coordinates of a single face of\n\t// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\n\t// sampling a textureCube (not generally normalized ).\n\n\tfloat getFace( vec3 direction ) {\n\n\t\tvec3 absDirection = abs( direction );\n\n\t\tfloat face = - 1.0;\n\n\t\tif ( absDirection.x > absDirection.z ) {\n\n\t\t\tif ( absDirection.x > absDirection.y )\n\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\n\t\t\telse\n\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\n\t\t} else {\n\n\t\t\tif ( absDirection.z > absDirection.y )\n\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\n\t\t\telse\n\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\n\t\t}\n\n\t\treturn face;\n\n\t}\n\n\t// RH coordinate system; PMREM face-indexing convention\n\tvec2 getUV( vec3 direction, float face ) {\n\n\t\tvec2 uv;\n\n\t\tif ( face == 0.0 ) {\n\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x ); // pos x\n\n\t\t} else if ( face == 1.0 ) {\n\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y ); // pos y\n\n\t\t} else if ( face == 2.0 ) {\n\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z ); // pos z\n\n\t\t} else if ( face == 3.0 ) {\n\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x ); // neg x\n\n\t\t} else if ( face == 4.0 ) {\n\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y ); // neg y\n\n\t\t} else {\n\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z ); // neg z\n\n\t\t}\n\n\t\treturn 0.5 * ( uv + 1.0 );\n\n\t}\n\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\n\t\tfloat face = getFace( direction );\n\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\n\t\tfloat faceSize = exp2( mipInt );\n\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\n\t\tvec2 f = fract( uv );\n\n\t\tuv += 0.5 - f;\n\n\t\tif ( face > 2.0 ) {\n\n\t\t\tuv.y += faceSize;\n\n\t\t\tface -= 3.0;\n\n\t\t}\n\n\t\tuv.x += face * faceSize;\n\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\n\t\t}\n\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\n\t\tuv *= texelSize;\n\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\n\t\tuv.x += texelSize;\n\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\n\t\tuv.y += texelSize;\n\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\n\t\tuv.x -= texelSize;\n\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\n\t\tvec3 tm = mix( tl, tr, f.x );\n\n\t\tvec3 bm = mix( bl, br, f.x );\n\n\t\treturn mix( tm, bm, f.y );\n\n\t}\n\n\t// These defines must match with PMREMGenerator\n\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\n\tfloat roughnessToMip( float roughness ) {\n\n\t\tfloat mip = 0.0;\n\n\t\tif ( roughness >= r1 ) {\n\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\n\t\t} else if ( roughness >= r4 ) {\n\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\n\t\t} else if ( roughness >= r5 ) {\n\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\n\t\t} else if ( roughness >= r6 ) {\n\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\n\t\t} else {\n\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness ); // 1.16 = 1.79^0.25\n\t\t}\n\n\t\treturn mip;\n\n\t}\n\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\n\t\tfloat mipF = fract( mip );\n\n\t\tfloat mipInt = floor( mip );\n\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\n\t\tif ( mipF == 0.0 ) {\n\n\t\t\treturn vec4( color0, 1.0 );\n\n\t\t} else {\n\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\n\t\t}\n\n\t}\n\n#endif\n",
defaultnormal_vertex:"\nvec3 transformedNormal = objectNormal;\n\n#ifdef USE_INSTANCING\n\n\t// this is in lieu of a per-instance normal-matrix\n\t// shear transforms in the instance matrix are not supported\n\n\tmat3 m = mat3( instanceMatrix );\n\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\n\ttransformedNormal = m * transformedNormal;\n\n#endif\n\ntransformedNormal = normalMatrix * transformedNormal;\n\n#ifdef FLIP_SIDED\n\n\ttransformedNormal = - transformedNormal;\n\n#endif\n\n#ifdef USE_TANGENT\n\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\n\t#ifdef FLIP_SIDED\n\n\t\ttransformedTangent = - transformedTangent;\n\n\t#endif\n\n#endif\n",
displacementmap_pars_vertex:"\n#ifdef USE_DISPLACEMENTMAP\n\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n\n#endif\n",displacementmap_vertex:"\n#ifdef USE_DISPLACEMENTMAP\n\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n\n#endif\n",emissivemap_fragment:"\n#ifdef USE_EMISSIVEMAP\n\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n\n#endif\n",
emissivemap_pars_fragment:"\n#ifdef USE_EMISSIVEMAP\n\n\tuniform sampler2D emissiveMap;\n\n#endif\n",encodings_fragment:"\ngl_FragColor = linearToOutputTexel( gl_FragColor );\n",encodings_pars_fragment:"\n// For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\n\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\n\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\n\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\n\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\n\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\n\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\n\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n\t// return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\n}\n\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\n\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\n\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\n\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\t// NOTE: The implementation with min causes the shader to not compile on\n\t// a common Alcatel A502DL in Chrome 78/Android 8.1. Some research suggests \n\t// that the chipset is Mediatek MT6739 w/ IMG PowerVR GE8100 GPU.\n\t// D = min( floor( D ) / 255.0, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\n\n// LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\n\n// M matrix, for encoding\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\n\n// Inverse M matrix, for decoding\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}\n",
envmap_fragment:"\n#ifdef USE_ENVMAP\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvec3 cameraToFrag;\n\n\t\tif ( isOrthographic ) {\n\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\n\t\t} else {\n\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\n\t\t}\n\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\n\t#else\n\n\t\tvec4 envColor = vec4( 0.0 );\n\n\t#endif\n\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\n\t\tenvColor = envMapTexelToLinear( envColor );\n\n\t#endif\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n",
envmap_common_pars_fragment:"\n#ifdef USE_ENVMAP\n\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif\n",envmap_pars_fragment:"\n#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\t#define ENV_WORLDPOS\n\n\t#endif\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n\n#endif\n",
envmap_pars_vertex:"\n#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\n\t\t#define ENV_WORLDPOS\n\n\t#endif\n\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\n\t#endif\n\n#endif\n",envmap_physical_pars_fragment:"\n#if defined( USE_ENVMAP )\n\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\n\tvec3 getLightProbeIndirectIrradiance( /*const in SpecularLightProbe specularLightProbe,*/ const in GeometricContext geometry, const in int maxMIPLevel ) {\n\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\n\t\t\t// TODO: replace with properly filtered cubemaps and access the irradiance LOD level, be it the last LOD level\n\t\t\t// of a specular cubemap, or just the default level of a specially created irradiance cubemap.\n\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\n\t\t\t#else\n\n\t\t\t\t// force the bias high to get the last LOD level as it is the most blurred.\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\n\t\t\t#endif\n\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\n\t\t#else\n\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\n\t\t#endif\n\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\n\t}\n\n\t// Trowbridge-Reitz distribution to Mip level, following the logic of http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\n\t\t// clamp to allowable LOD ranges.\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\n\t}\n\n\tvec3 getLightProbeIndirectRadiance( /*const in SpecularLightProbe specularLightProbe,*/ const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\n\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\n\t\t#endif\n\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\n\t\t\t#else\n\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\n\t\t\t#endif\n\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\n\t\t#endif\n\n\t\treturn envMapColor.rgb * envMapIntensity;\n\n\t}\n\n#endif\n",
envmap_vertex:"\n#ifdef USE_ENVMAP\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvWorldPosition = worldPosition.xyz;\n\n\t#else\n\n\t\tvec3 cameraToVertex;\n\n\t\tif ( isOrthographic ) {\n\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\n\t\t} else {\n\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t\t}\n\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",
fog_vertex:"\n#ifdef USE_FOG\n\n\tfogDepth = - mvPosition.z;\n\n#endif\n",fog_pars_vertex:"\n#ifdef USE_FOG\n\n\tvarying float fogDepth;\n\n#endif\n",fog_fragment:"\n#ifdef USE_FOG\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\n\t#endif\n\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\n#endif\n",fog_pars_fragment:"\n#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\n\t#endif\n\n#endif\n",
gradientmap_pars_fragment:"\n\n#ifdef USE_GRADIENTMAP\n\n\tuniform sampler2D gradientMap;\n\n#endif\n\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\n\t// dotNL will be from -1.0 to 1.0\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\n\t#ifdef USE_GRADIENTMAP\n\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\n\t#else\n\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\n\t#endif\n\n}\n",lightmap_fragment:"\n#ifdef USE_LIGHTMAP\n\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity; // factor of PI should not be present; included here to prevent breakage\n\n#endif\n",
lightmap_pars_fragment:"\n#ifdef USE_LIGHTMAP\n\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n\n#endif\n",lights_lambert_vertex:"\nvec3 diffuse = vec3( 1.0 );\n\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\n\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\n\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\n\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\n\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n\n#ifdef DOUBLE_SIDED\n\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n\n#endif\n\n#if NUM_POINT_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if NUM_SPOT_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n/*\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n\t\t// TODO (abelnation): implement\n\n\t}\n\n#endif\n*/\n\n#if NUM_DIR_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if NUM_HEMI_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\n\t\t#endif\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n",
lights_pars_begin:"\nuniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\n\n// get the irradiance (radiance convolved with cosine lobe) at the point 'normal' on the unit sphere\n// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\n\t// normal is assumed to have unit length\n\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\n\t// band 0\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\n\t// band 1\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\n\t// band 2\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\n\treturn result;\n\n}\n\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\n\treturn irradiance;\n\n}\n\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\n\tvec3 irradiance = ambientLightColor;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI;\n\n\t#endif\n\n\treturn irradiance;\n\n}\n\n#if NUM_DIR_LIGHTS > 0\n\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\n\t}\n\n#endif\n\n\n#if NUM_POINT_LIGHTS > 0\n\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\n\t}\n\n#endif\n\n\n#if NUM_SPOT_LIGHTS > 0\n\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\n\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\n\t\tif ( angleCos > spotLight.coneCos ) {\n\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\n\t\t} else {\n\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\n\t\t}\n\t}\n\n#endif\n\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\n\t// Pre-computed values of LinearTransformedCosine approximation of BRDF\n\t// BRDF approximation Texture is 64x64\n\tuniform sampler2D ltc_1; // RGBA Float\n\tuniform sampler2D ltc_2; // RGBA Float\n\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n\n#endif\n\n\n#if NUM_HEMI_LIGHTS > 0\n\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tirradiance *= PI;\n\n\t\t#endif\n\n\t\treturn irradiance;\n\n\t}\n\n#endif\n",
lights_toon_fragment:"\nToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\n",lights_toon_pars_fragment:"\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n\nstruct ToonMaterial {\n\n\tvec3 diffuseColor;\n\n};\n\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI; // punctual light\n\n\t#endif\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n\n#define Material_LightProbeLOD( material )\t(0)\n",
lights_phong_fragment:"\nBlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",lights_phong_pars_fragment:"\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n\nstruct BlinnPhongMaterial {\n\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n\n};\n\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI; // punctual light\n\n\t#endif\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n\n}\n\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n\n#define Material_LightProbeLOD( material )\t(0)\n",
lights_physical_fragment:"\nPhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\n\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\n\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.\nmaterial.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n\n#ifdef REFLECTIVITY\n\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\n#else\n\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n\n#endif\n\n#ifdef CLEARCOAT\n\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\n\t#ifdef USE_CLEARCOATMAP\n\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\n\t#endif\n\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\n\t#endif\n\n\tmaterial.clearcoat = saturate( material.clearcoat ); // Burley clearcoat model\n\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n\n#endif\n\n#ifdef USE_SHEEN\n\n\tmaterial.sheenColor = sheen;\n\n#endif\n",
lights_physical_pars_fragment:"\nstruct PhysicalMaterial {\n\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n\n};\n\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\n\n// Clear coat directional hemishperical reflectance (this approximation should be improved)\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n\n}\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight; // counterclockwise; light shines in local neg z direction\n\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\n\t\t// LTC Fresnel Approximation by Stephen Hill\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\n\t}\n\n#endif\n\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\n\tvec3 irradiance = dotNL * directLight.color;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tirradiance *= PI; // punctual light\n\n\t#endif\n\n\t#ifdef CLEARCOAT\n\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tccIrradiance *= PI; // punctual light\n\n\t\t#endif\n\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\n\t#else\n\n\t\tfloat clearcoatDHR = 0.0;\n\n\t#endif\n\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\n}\n\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\n\t#ifdef CLEARCOAT\n\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\n\t#else\n\n\t\tfloat clearcoatDHR = 0.0;\n\n\t#endif\n\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\n\t// Both indirect specular and indirect diffuse light accumulate here\n\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n\n// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n\n}\n",
lights_fragment_begin:"\n/**\n * This is a template that can be used to light a material, it uses pluggable\n * RenderEquations (RE)for specific lighting scenarios.\n *\n * Instructions for use:\n * - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined\n * - If you have defined an RE_IndirectSpecular, you need to also provide a Material_LightProbeLOD. <---- ???\n * - Create a material parameter that is to be passed as the third parameter to your lighting functions.\n *\n * TODO:\n * - Add area light support.\n * - Add sphere light support.\n * - Add diffuse light probe (irradiance cubemap) support.\n */\n\nGeometricContext geometry;\n\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n\n#ifdef CLEARCOAT\n\n\tgeometry.clearcoatNormal = clearcoatNormal;\n\n#endif\n\nIncidentLight directLight;\n\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tpointLight = pointLights[ i ];\n\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tspotLight = spotLights[ i ];\n\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tdirectionalLight = directionalLights[ i ];\n\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\n\tRectAreaLight rectAreaLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if defined( RE_IndirectDiffuse )\n\n\tvec3 iblIrradiance = vec3( 0.0 );\n\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t#endif\n\n#endif\n\n#if defined( RE_IndirectSpecular )\n\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n\n#endif\n",
lights_fragment_maps:"\n#if defined( RE_IndirectDiffuse )\n\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tlightMapIrradiance *= PI; // factor of PI should not be present; included here to prevent breakage\n\n\t\t#endif\n\n\t\tirradiance += lightMapIrradiance;\n\n\t#endif\n\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( /*lightProbe,*/ geometry, maxMipLevel );\n\n\t#endif\n\n#endif\n\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\n\tradiance += getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\n\t#ifdef CLEARCOAT\n\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\n\t#endif\n\n#endif\n",
lights_fragment_end:"\n#if defined( RE_IndirectDiffuse )\n\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n\n#endif\n\n#if defined( RE_IndirectSpecular )\n\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n\n#endif\n",logdepthbuf_fragment:"\n#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\n\t// Doing a strict comparison with == 1.0 can cause noise artifacts\n\t// on some platforms. See issue #17623.\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n\n#endif\n",
logdepthbuf_pars_fragment:"\n#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n\n#endif\n",logdepthbuf_pars_vertex:"\n#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\n\t#else\n\n\t\tuniform float logDepthBufFC;\n\n\t#endif\n\n#endif\n",logdepthbuf_vertex:"\n#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\n\t#else\n\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\n\t\t\tgl_Position.z *= gl_Position.w;\n\n\t\t}\n\n\t#endif\n\n#endif\n",
map_fragment:"\n#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n\n#endif\n",map_pars_fragment:"\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n",map_particle_fragment:"\n#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\n#endif\n\n#ifdef USE_MAP\n\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n\n#endif\n\n#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n\n#endif\n",
map_particle_pars_fragment:"\n#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\n\tuniform mat3 uvTransform;\n\n#endif\n\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n\n#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",metalnessmap_fragment:"\nfloat metalnessFactor = metalness;\n\n#ifdef USE_METALNESSMAP\n\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\n\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tmetalnessFactor *= texelMetalness.b;\n\n#endif\n",
metalnessmap_pars_fragment:"\n#ifdef USE_METALNESSMAP\n\n\tuniform sampler2D metalnessMap;\n\n#endif\n",morphnormal_vertex:"\n#ifdef USE_MORPHNORMALS\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\n#endif\n",
morphtarget_pars_vertex:"\n#ifdef USE_MORPHTARGETS\n\n\tuniform float morphTargetBaseInfluence;\n\n\t#ifndef USE_MORPHNORMALS\n\n\t\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\t\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif\n",morphtarget_vertex:"\n#ifdef USE_MORPHTARGETS\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in position = sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n#endif\n",
normal_fragment_begin:"\nfloat faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n\n#ifdef FLAT_SHADED\n\n\t// Workaround for Adreno GPUs not able to do dFdx( vViewPosition )\n\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#else\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * faceDirection;\n\n\t#endif\n\n\t#ifdef USE_TANGENT\n\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\n\t\t#endif\n\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n\n// non perturbed normal for clearcoat among others\n\nvec3 geometryNormal = normal;\n\n",
normal_fragment_maps:"\n\n#ifdef OBJECTSPACE_NORMALMAP\n\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\n\n\t#ifdef FLIP_SIDED\n\n\t\tnormal = - normal;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * faceDirection;\n\n\t#endif\n\n\tnormal = normalize( normalMatrix * normal );\n\n#elif defined( TANGENTSPACE_NORMALMAP )\n\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\n\t#ifdef USE_TANGENT\n\n\t\tnormal = normalize( vTBN * mapN );\n\n\t#else\n\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\n\n\t#endif\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\n\n#endif\n",
normalmap_pars_fragment:"\n#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n#endif\n\n#ifdef OBJECTSPACE_NORMALMAP\n\n\tuniform mat3 normalMatrix;\n\n#endif\n\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\n\t// Normal Mapping Without Precomputed Tangents\n\t// http://www.thetenthplanet.de/archives/1180\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\n\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tvec3 N = surf_norm; // normalized\n\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\n\t}\n\n#endif\n",
clearcoat_normal_fragment_begin:"\n#ifdef CLEARCOAT\n\n\tvec3 clearcoatNormal = geometryNormal;\n\n#endif\n",clearcoat_normal_fragment_maps:"\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\n\t#ifdef USE_TANGENT\n\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\n\t#else\n\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\n\t#endif\n\n#endif\n",
clearcoat_pars_fragment:"\n\n#ifdef USE_CLEARCOATMAP\n\n\tuniform sampler2D clearcoatMap;\n\n#endif\n\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\tuniform sampler2D clearcoatRoughnessMap;\n\n#endif\n\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n\n#endif\n",packing:"\nvec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\n\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\n\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\n\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\n\nconst float ShiftRight8 = 1. / 256.;\n\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8; // tidy overflow\n\treturn r * PackUpscale;\n}\n\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\n\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\n\n// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions\n\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\n\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",
premultiplied_alpha_fragment:"\n#ifdef PREMULTIPLIED_ALPHA\n\n\t// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\n\tgl_FragColor.rgb *= gl_FragColor.a;\n\n#endif\n",project_vertex:"\nvec4 mvPosition = vec4( transformed, 1.0 );\n\n#ifdef USE_INSTANCING\n\n\tmvPosition = instanceMatrix * mvPosition;\n\n#endif\n\nmvPosition = modelViewMatrix * mvPosition;\n\ngl_Position = projectionMatrix * mvPosition;\n",dithering_fragment:"\n#ifdef DITHERING\n\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n\n#endif\n",
dithering_pars_fragment:"\n#ifdef DITHERING\n\n\t// based on https://www.shadertoy.com/view/MslGR8\n\tvec3 dithering( vec3 color ) {\n\t\t//Calculate grid position\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\n\t\t//Shift the individual colors differently, thus making it even harder to see the dithering pattern\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\n\t\t//modify shift acording to grid position.\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\n\t\t//shift the color by dither_shift\n\t\treturn color + dither_shift_RGB;\n\t}\n\n#endif\n",
roughnessmap_fragment:"\nfloat roughnessFactor = roughness;\n\n#ifdef USE_ROUGHNESSMAP\n\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\n\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\troughnessFactor *= texelRoughness.g;\n\n#endif\n",roughnessmap_pars_fragment:"\n#ifdef USE_ROUGHNESSMAP\n\n\tuniform sampler2D roughnessMap;\n\n#endif\n",shadowmap_pars_fragment:"\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): create uniforms for area light shadows\n\n\t#endif\n\t*/\n\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\n\t}\n\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\n\t}\n\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\n\t\tfloat occlusion = 1.0;\n\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\n\t\tfloat hard_shadow = step( compare , distribution.x ); // Hard Shadow\n\n\t\tif (hard_shadow != 1.0 ) {\n\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance ); // Chebeyshevs inequality\n\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 ); // 0.3 reduces light bleed\n\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\n\t\t}\n\t\treturn occlusion;\n\n\t}\n\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\n\t\tfloat shadow = 1.0;\n\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\n\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\n\t\t#else // no percentage-closer filtering:\n\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\n\t\t#endif\n\n\t\t}\n\n\t\treturn shadow;\n\n\t}\n\n\t// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\n\t// vector suitable for 2D texture mapping. This code uses the following layout for the\n\t// 2D texture:\n\t//\n\t// xzXZ\n\t//  y Y\n\t//\n\t// Y - Positive y direction\n\t// y - Negative y direction\n\t// X - Positive x direction\n\t// x - Negative x direction\n\t// Z - Positive z direction\n\t// z - Negative z direction\n\t//\n\t// Source and test bed:\n\t// https://gist.github.com/tschw/da10c43c467ce8afd0c4\n\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\n\t\t// Number of texels to avoid at the edge of each square\n\n\t\tvec3 absV = abs( v );\n\n\t\t// Intersect unit cube\n\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\n\t\t// Apply scale to avoid seams\n\n\t\t// two texels less per square (one texel will do for NEAREST)\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\n\t\t// Unwrap\n\n\t\t// space: -1 ... 1 range for each square\n\t\t//\n\t\t// #X##\t\tdim    := ( 4 , 2 )\n\t\t//  # #\t\tcenter := ( 1 , 1 )\n\n\t\tvec2 planar = v.xy;\n\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\n\t\tif ( absV.z >= almostOne ) {\n\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\n\t\t} else if ( absV.x >= almostOne ) {\n\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\n\t\t} else if ( absV.y >= almostOne ) {\n\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\n\t\t}\n\n\t\t// Transform to UV space\n\n\t\t// scale := 0.5 / dim\n\t\t// translate := ( center + 0.5 ) / dim\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\n\t}\n\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\n\t\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\n\t\t// the vector from the light to the world-space position of the fragment.\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\n\t\t// dp = normalized distance from light to fragment position\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?\n\t\tdp += shadowBias;\n\n\t\t// bd3D = base direction 3D\n\t\tvec3 bd3D = normalize( lightToPosition );\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#else // no percentage-closer filtering\n\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\n\t\t#endif\n\n\t}\n\n#endif\n",
shadowmap_pars_vertex:"\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): uniforms for area light shadows\n\n\t#endif\n\t*/\n\n#endif\n",
shadowmap_vertex:"\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\t// Offsetting the position used for querying occlusion along the world normal can be used to reduce shadow acne.\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\n\t#endif\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): update vAreaShadowCoord with area light info\n\n\t#endif\n\t*/\n\n#endif\n",
shadowmask_pars_fragment:"\nfloat getShadowMask() {\n\n\tfloat shadow = 1.0;\n\n\t#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\tDirectionalLightShadow directionalLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\tSpotLightShadow spotLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\tPointLightShadow pointLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): update shadow for Area light\n\n\t#endif\n\t*/\n\n\t#endif\n\n\treturn shadow;\n\n}\n",
skinbase_vertex:"\n#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif\n",skinning_pars_vertex:"\n#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n",
skinning_vertex:"\n#ifdef USE_SKINNING\n\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n\n#endif\n",skinnormal_vertex:"\n#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\n\t#ifdef USE_TANGENT\n\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\n\t#endif\n\n#endif\n",
specularmap_fragment:"\nfloat specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif\n",specularmap_pars_fragment:"\n#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif\n",tonemapping_fragment:"\n#if defined( TONE_MAPPING )\n\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n\n#endif\n",tonemapping_pars_fragment:"\n#ifndef saturate\n// <common> may have defined saturate() already\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n\nuniform float toneMappingExposure;\n\n// exposure only\nvec3 LinearToneMapping( vec3 color ) {\n\n\treturn toneMappingExposure * color;\n\n}\n\n// source: https://www.cs.utah.edu/~reinhard/cdrom/\nvec3 ReinhardToneMapping( vec3 color ) {\n\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n\n}\n\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\n\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n\n}\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nvec3 RRTAndODTFit( vec3 v ) {\n\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n\n}\n\n// this implementation of ACES is modified to accommodate a brighter viewing environment.\n// the scale factor of 1/0.6 is subjective. see discussion in #19621.\n\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ), // transposed from source\n\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ), // transposed from source\n\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\n\tcolor *= toneMappingExposure / 0.6;\n\n\tcolor = ACESInputMat * color;\n\n\t// Apply RRT and ODT\n\tcolor = RRTAndODTFit( color );\n\n\tcolor = ACESOutputMat * color;\n\n\t// Clamp to [0, 1]\n\treturn saturate( color );\n\n}\n\nvec3 CustomToneMapping( vec3 color ) { return color; }\n",
transmissionmap_fragment:"\n#ifdef USE_TRANSMISSIONMAP\n\n\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\n\n#endif\n",transmissionmap_pars_fragment:"\n#ifdef USE_TRANSMISSIONMAP\n\n\tuniform sampler2D transmissionMap;\n\n#endif\n",uv_pars_fragment:"\n#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\n\tvarying vec2 vUv;\n\n#endif\n",uv_pars_vertex:"\n#ifdef USE_UV\n\n\t#ifdef UVS_VERTEX_ONLY\n\n\t\tvec2 vUv;\n\n\t#else\n\n\t\tvarying vec2 vUv;\n\n\t#endif\n\n\tuniform mat3 uvTransform;\n\n#endif\n",
uv_vertex:"\n#ifdef USE_UV\n\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n#endif\n",uv2_pars_fragment:"\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvarying vec2 vUv2;\n\n#endif\n",uv2_pars_vertex:"\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\n\tuniform mat3 uv2Transform;\n\n#endif\n",uv2_vertex:"\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n\n#endif\n",worldpos_vertex:"\n#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\n\t#ifdef USE_INSTANCING\n\n\t\tworldPosition = instanceMatrix * worldPosition;\n\n\t#endif\n\n\tworldPosition = modelMatrix * worldPosition;\n\n#endif\n",
background_frag:"\nuniform sampler2D t2D;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n\tvec4 texColor = texture2D( t2D, vUv );\n\n\tgl_FragColor = mapTexelToLinear( texColor );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",background_vert:"\nvarying vec2 vUv;\nuniform mat3 uvTransform;\n\nvoid main() {\n\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n\n}\n",cube_frag:"\n#include <envmap_common_pars_fragment>\nuniform float opacity;\n\nvarying vec3 vWorldDirection;\n\n#include <cube_uv_reflection_fragment>\n\nvoid main() {\n\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",
cube_vert:"\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n\tgl_Position.z = gl_Position.w; // set z to camera.far\n\n}\n",depth_frag:"\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
depth_vert:"\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.\n// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for\n// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
distanceRGBA_frag:"\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n",
distanceRGBA_vert:"\n#define DISTANCE\n\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvWorldPosition = worldPosition.xyz;\n\n}\n",
equirect_frag:"\nuniform sampler2D tEquirect;\n\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvec3 direction = normalize( vWorldDirection );\n\n\tvec2 sampleUV = equirectUv( direction );\n\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\n\tgl_FragColor = mapTexelToLinear( texColor );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",equirect_vert:"\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n}\n",
linedashed_frag:"\nuniform vec3 diffuse;\nuniform float opacity;\n\nuniform float dashSize;\nuniform float totalSize;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\n\t\tdiscard;\n\n\t}\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\n\toutgoingLight = diffuseColor.rgb; // simple shader\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\n}\n",
linedashed_vert:"\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n",
meshbasic_frag:"\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
meshbasic_vert:"\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_ENVMAP\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
meshlambert_frag:"\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\n\t#endif\n\n\t#include <lightmap_fragment>\n\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\n\t#else\n\n\t\treflectedLight.directDiffuse = vLightFront;\n\n\t#endif\n\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\n\t// modulation\n\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
meshlambert_vert:"\n#define LAMBERT\n\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
meshmatcap_frag:"\n#define MATCAP\n\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks\n\n\t#ifdef USE_MATCAP\n\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\n\t#else\n\n\t\tvec4 matcapColor = vec4( 1.0 );\n\n\t#endif\n\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
meshmatcap_vert:"\n#define MATCAP\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\t\tvNormal = normalize( transformedNormal );\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n}\n",
meshtoon_frag:"\n#define TOON\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
meshtoon_vert:"\n#define TOON\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
meshphong_frag:"\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
meshphong_vert:"\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
meshphysical_frag:"\n#define STANDARD\n\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSMISSION\n#endif\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n\n#ifdef TRANSMISSION\n\tuniform float transmission;\n#endif\n\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#ifdef TRANSMISSION\n\t\tfloat totalTransmission = transmission;\n\t#endif\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <transmissionmap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t// this is a stub for the transmission model\n\t#ifdef TRANSMISSION\n\t\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n\t#endif\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
meshphysical_vert:"\n#define STANDARD\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n\t#ifdef USE_TANGENT\n\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\n\t#endif\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
normal_frag:"\n#define NORMAL\n\nuniform float opacity;\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\n}\n",
normal_vert:"\n#define NORMAL\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n\t#ifdef USE_TANGENT\n\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\n\t#endif\n\n#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\n\tvViewPosition = - mvPosition.xyz;\n\n#endif\n\n}\n",
points_frag:"\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\n}\n",
points_vert:"\nuniform float size;\nuniform float scale;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\n\tgl_PointSize = size;\n\n\t#ifdef USE_SIZEATTENUATION\n\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\n\t#endif\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n\n}\n",
shadow_frag:"\nuniform vec3 color;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n\nvoid main() {\n\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",shadow_vert:"\n#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n\nvoid main() {\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
sprite_frag:"\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",
sprite_vert:"\nuniform float rotation;\nuniform vec2 center;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n\t#ifndef USE_SIZEATTENUATION\n\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\n\t#endif\n\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\n\tmvPosition.xy += rotatedPosition;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n"};var Jc={diffuse:{value:new O(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new cb},uv2Transform:{value:new cb},alphaMap:{value:null}},Kc={specularMap:{value:null}},Lc={envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},Mc={aoMap:{value:null},aoMapIntensity:{value:1}},Nc={lightMap:{value:null},lightMapIntensity:{value:1}},Oc={emissiveMap:{value:null}},Pc={bumpMap:{value:null},bumpScale:{value:1}},Qc={normalMap:{value:null},
normalScale:{value:new M(1,1)}},Rc={displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},Sc={fogDensity:{value:2.5E-4},fogNear:{value:1},fogFar:{value:2E3},fogColor:{value:new O(16777215)}},Tc={ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},
spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},
pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},Uc={diffuse:{value:new O(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new cb}},Vc={diffuse:{value:new O(15658734)},opacity:{value:1},center:{value:new M(.5,.5)},rotation:{value:0},
map:{value:null},alphaMap:{value:null},uvTransform:{value:new cb}};var Wc={uniforms:V([Jc,Kc,Lc,Mc,Nc,Sc]),vertexShader:Ic.meshbasic_vert,fragmentShader:Ic.meshbasic_frag};V([Jc,Kc,Lc,Mc,Nc,Oc,Sc,Tc,{emissive:{value:new O(0)}}]);V([Jc,Kc,Lc,Mc,Nc,Oc,Pc,Qc,Rc,Sc,Tc,{emissive:{value:new O(0)},specular:{value:new O(1118481)},shininess:{value:30}}]);var Xc=V([Jc,Lc,Mc,Nc,Oc,Pc,Qc,Rc,{roughnessMap:{value:null}},{metalnessMap:{value:null}},Sc,Tc,{emissive:{value:new O(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]);
V([Jc,Mc,Nc,Oc,Pc,Qc,Rc,{gradientMap:{value:null}},Sc,Tc,{emissive:{value:new O(0)}}]);V([Jc,Pc,Qc,Rc,Sc,{matcap:{value:null}}]);V([Uc,Sc]);V([Jc,Sc,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]);V([Jc,Rc]);V([Jc,Pc,Qc,Rc,{opacity:{value:1}}]);V([Vc,Sc]);var Yc={uvTransform:{value:new cb},t2D:{value:null}},Zc=Ic.background_vert,$c=Ic.background_frag,ad=V([Lc,{opacity:{value:1}}]),bd=Ic.cube_vert,cd=Ic.cube_frag;V([Jc,Rc,{referencePosition:{value:new D},nearDistance:{value:1},farDistance:{value:1E3}}]);
V([Tc,Sc,{color:{value:new O(0)},opacity:{value:1}}]);V([Xc,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new M(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new O(0)},transmission:{value:0},transmissionMap:{value:null}}]);function dd(a){console.log("GET "+a);switch(a){case "basic":return Wc}throw Error("Not able to find ShaderLib : "+a);};function ed(a){this.h=a;this.color=new K;this.j=null;this.i=new K(0,0,0,0)}function fd(a,b){a.j!==b&&(a.h.h.colorMask(b,b,b,b),a.j=b)}function gd(a,b,c,d,e,f){!0===f&&(b*=e,c*=e,d*=e);a.color.set(b,c,d,e);!1===a.i.oa(a.color)&&(a.h.h.clearColor(b,c,d,e),a.i.l(a.color))}function hd(a){this.h=a;this.i=this.j=this.m=null}function id(a,b){b?jd(a.h,a.h.h.DEPTH_TEST):kd(a.h,a.h.h.DEPTH_TEST)}function ld(a,b){a.m!==b&&(a.h.h.depthMask(b),a.m=b)}
function md(a,b){if(a.j!==b){if(b)switch(b){case 0:a.h.h.depthFunc(a.h.h.NEVER);break;case 1:a.h.h.depthFunc(a.h.h.ALWAYS);break;case 2:a.h.h.depthFunc(a.h.h.LESS);break;case 3:a.h.h.depthFunc(a.h.h.LEQUAL);break;case 4:a.h.h.depthFunc(a.h.h.EQUAL);break;case 5:a.h.h.depthFunc(a.h.h.GEQUAL);break;case 6:a.h.h.depthFunc(a.h.h.GREATER);break;case 7:a.h.h.depthFunc(a.h.h.NOTEQUAL);break;default:a.h.h.depthFunc(a.h.h.LEQUAL)}else a.h.h.depthFunc(a.h.h.LEQUAL);a.j=b}}
function nd(a){1!==a.i&&(a.h.h.clearDepth(1),a.i=1)}function od(a){this.h=a;this.i=this.T=this.J=this.j=this.o=this.G=this.m=this.C=null}function pd(a){0!==a.i&&(a.h.h.clearStencil(0),a.i=0)}
function qd(a,b,c){function d(e,f,g){var h=new Uint8Array(4),k=a.createTexture();a.bindTexture(e,k);a.texParameteri(e,a.TEXTURE_MIN_FILTER,a.NEAREST);a.texParameteri(e,a.TEXTURE_MAG_FILTER,a.NEAREST);for(e=0;e<g;e++)a.texImage2D(f+e,0,a.RGBA,1,1,0,a.RGBA,a.UNSIGNED_BYTE,h);return k}this.h=a;this.A=b;this.B=c.B;this.U=new ed(this);this.ta=new hd(this);this.Da=new od(this);this.J={};this.Ub=null;this.G=!1;this.ka=this.Aa=this.C=this.ja=this.ra=this.o=this.Fa=void 0;this.Ma=!1;this.Tb=this.Sb=this.Rb=
this.zb=this.Ab=void 0;this.nc=a.getParameter(a.MAX_COMBINED_TEXTURE_IMAGE_UNITS);this.Ra=!1;this.version=0;b=a.getParameter(a.VERSION);-1!==b.indexOf("WebGL")?(this.version=parseFloat(/^WebGL (\d)/.exec(b)[1]),this.Ra=1<=this.version):-1!==b.indexOf("OpenGL ES")&&(this.version=parseFloat(/^OpenGL ES (\d)/.exec(b)[1]),this.Ra=2<=this.version);this.m=null;this.cb={};this.Vb=new K;this.Wb=new K;b={};b[a.TEXTURE_2D]=d(a.TEXTURE_2D,a.TEXTURE_2D,1);b[a.TEXTURE_CUBE_MAP]=d(a.TEXTURE_CUBE_MAP,a.TEXTURE_CUBE_MAP_POSITIVE_X,
6);this.oc=b;gd(this.U,0,0,0,1);nd(this.ta);pd(this.Da);this.i={color:this.U,depth:this.ta,stencil:this.Da};jd(this,a.DEPTH_TEST);md(this.ta,3);rd(this,!1);jd(this,this.h.CULL_FACE);1!==this.zb&&this.h.cullFace(this.h.BACK);this.zb=1;jd(this,this.h.CULL_FACE);sd(this,0);b={};this.j=(b[100]=a.FUNC_ADD,b[101]=a.FUNC_SUBTRACT,b[102]=a.FUNC_REVERSE_SUBTRACT,b);this.B?(this.j[103]=a.MIN,this.j[104]=a.MAX):(b=this.A.get("EXT_blend_minmax"),null!==b&&(this.j[103]=b.Ah,this.j[104]=b.zh));b={};this.T=(b[200]=
a.ZERO,b[201]=a.ONE,b[202]=a.SRC_COLOR,b[204]=a.SRC_ALPHA,b[210]=a.SRC_ALPHA_SATURATE,b[208]=a.DST_COLOR,b[206]=a.DST_ALPHA,b[203]=a.ONE_MINUS_SRC_COLOR,b[205]=a.ONE_MINUS_SRC_ALPHA,b[209]=a.ONE_MINUS_DST_COLOR,b[207]=a.ONE_MINUS_DST_ALPHA,b)}function jd(a,b){!0!==a.J[b]&&(a.h.enable(b),a.J[b]=!0)}function kd(a,b){!1!==a.J[b]&&(a.h.disable(b),a.J[b]=!1)}
function sd(a,b,c,d,e,f,g,h,k){if(0===b)!0===a.G&&(kd(a,a.h.BLEND),a.G=!1);else if(!1===a.G&&(jd(a,a.h.BLEND),a.G=!0),5!==b){if(b!==a.Fa||k!==a.Ma){if(100!==a.o||100!==a.C)a.h.blendEquation(a.h.FUNC_ADD),a.o=100,a.C=100;if(k)switch(b){case 1:a.h.blendFuncSeparate(a.h.ONE,a.h.ONE_MINUS_SRC_ALPHA,a.h.ONE,a.h.ONE_MINUS_SRC_ALPHA);break;case 2:a.h.blendFunc(a.h.ONE,a.h.ONE);break;case 3:a.h.blendFuncSeparate(a.h.ZERO,a.h.ZERO,a.h.ONE_MINUS_SRC_COLOR,a.h.ONE_MINUS_SRC_ALPHA);break;case 4:a.h.blendFuncSeparate(a.h.ZERO,
a.h.SRC_COLOR,a.h.ZERO,a.h.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",b)}else switch(b){case 1:a.h.blendFuncSeparate(a.h.SRC_ALPHA,a.h.ONE_MINUS_SRC_ALPHA,a.h.ONE,a.h.ONE_MINUS_SRC_ALPHA);break;case 2:a.h.blendFunc(a.h.SRC_ALPHA,a.h.ONE);break;case 3:a.h.blendFunc(a.h.ZERO,a.h.ONE_MINUS_SRC_COLOR);break;case 4:a.h.blendFunc(a.h.ZERO,a.h.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",b)}a.ra=null;a.ja=null;a.Aa=null;a.ka=null;a.Fa=b;
a.Ma=k}}else{f=f||c;g=g||d;h=h||e;if(c!==a.o||f!==a.C)a.h.blendEquationSeparate(a.j[c],a.j[f]),a.o=c,a.C=f;if(d!==a.ra||e!==a.ja||g!==a.Aa||h!==a.ka)a.h.blendFuncSeparate(a.T[d],a.T[e],a.T[g],a.T[h]),a.ra=d,a.ja=e,a.Aa=g,a.ka=h;a.Fa=b;a.Ma=null}}
function td(a,b,c){2===b.S?kd(a,a.h.CULL_FACE):jd(a,a.h.CULL_FACE);var d=1===b.S;c&&(d=!d);rd(a,d);1===b.nb&&!1===b.za?sd(a,0):sd(a,b.nb,b.blendEquation,b.Bd,b.yd,b.Ad,b.Cd,b.zd,b.premultipliedAlpha);md(a.ta,b.depthFunc);id(a.ta,b.Fb);ld(a.ta,b.Gb);fd(a.U,b.Ed);c=b.Sc;d=a.Da;c?jd(d.h,d.h.h.STENCIL_TEST):kd(d.h,d.h.h.STENCIL_TEST);if(c){c=a.Da;d=b.Tc;c.C!==d&&(c.h.h.stencilMask(d),c.C=d);c=a.Da;d=b.stencilFunc;var e=b.Rc,f=b.Qc;if(c.m!==d||c.G!==e||c.o!==f)c.h.h.stencilFunc(d,e,f),c.m=d,c.G=e,c.o=
f;c=a.Da;d=b.Pc;e=b.Uc;f=b.Vc;if(c.j!==d||c.J!==e||c.T!==f)c.h.h.stencilOp(d,e,f),c.j=d,c.J=e,c.T=f}ud(a,b.polygonOffset,b.ec,b.fc)}function rd(a,b){a.Ab!==b&&(b?a.h.frontFace(a.h.CW):a.h.frontFace(a.h.CCW),a.Ab=b)}function vd(a,b){b!==a.Rb&&(a.Ra&&a.h.lineWidth(b),a.Rb=b)}function ud(a,b,c,d){if(b){if(jd(a,a.h.POLYGON_OFFSET_FILL),a.Sb!==c||a.Tb!==d)a.h.polygonOffset(c,d),a.Sb=c,a.Tb=d}else kd(a,a.h.POLYGON_OFFSET_FILL)}
function wd(a,b){void 0===b&&(b=a.h.TEXTURE0+a.nc-1);a.m!==b&&(a.h.activeTexture(b),a.m=b)}function W(a,b,c){null===a.m&&wd(a);var d=a.cb[a.m];void 0===d&&(d={type:void 0,D:void 0},a.cb[a.m]=d);if(d.type!==b||d.D!==c)a.h.bindTexture(b,c||a.oc[b]),d.type=b,d.D=c}m=qd.prototype;m.pe=function(){try{this.h.compressedTexImage2D.apply(this.h,arguments)}catch(a){console.error("THREE.WebGLState:",a)}};
m.Ia=function(){try{this.h.texImage2D.apply(this.h,arguments)}catch(a){console.error("THREE.WebGLState:",a)}};m.texImage3D=function(){try{this.h.texImage3D.apply(this.h,arguments)}catch(a){console.error("THREE.WebGLState:",a)}};m.scissor=function(a){!1===this.Vb.oa(a)&&(this.h.scissor(a.x,a.y,a.z,a.w),this.Vb.l(a))};m.viewport=function(a){!1===this.Wb.oa(a)&&(this.h.viewport(a.x,a.y,a.z,a.w),this.Wb.l(a))};function xd(a){this.i=a;this.h={wa:0,ea:0};this.H={frame:0,xe:0,le:0,points:0,lines:0};this.j=null}xd.prototype.update=function(a,b,c){this.H.xe++;switch(b){case this.i.TRIANGLES:this.H.le+=a/3*c;break;case this.i.LINES:this.H.lines+=a/2*c;break;case this.i.LINE_STRIP:this.H.lines+=c*(a-1);break;case this.i.LINE_LOOP:this.H.lines+=c*a;break;case this.i.POINTS:this.H.points+=c*a;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",b)}};function yd(a,b,c,d){a=void 0===a?null:a;b=void 0===b?1:b;c=void 0===c?1:c;d=void 0===d?1:d;N.call(this,null);this.image={data:a,width:b,height:c,depth:d};this.O=this.xa=1003;this.pf=1001;this.flipY=this.ia=!1;this.N=!0}A(yd,N);yd.prototype.ed=!0;function zd(a,b,c,d){a=void 0===a?null:a;b=void 0===b?1:b;c=void 0===c?1:c;d=void 0===d?1:d;N.call(this,null);this.image={data:a,width:b,height:c,depth:d};this.O=this.xa=1003;this.pf=1001;this.flipY=this.ia=!1;this.N=!0}A(zd,N);zd.prototype.zc=!0;function Ad(){this.properties=new WeakMap}Ad.prototype.get=function(a){var b=this.properties.get(a);void 0===b&&(b={},this.properties.set(a,b));return b};Ad.prototype.remove=function(a){this.properties.delete(a)};Ad.prototype.update=function(a,b,c){this.properties.get(a)[b]=c};Ad.prototype.W=function(){this.properties=new WeakMap};function Bd(a,b,c){this.h=a;this.A=b;this.B=c.B}
function X(a,b){if(1009===b)return a.h.UNSIGNED_BYTE;if(1017===b)return a.h.UNSIGNED_SHORT_4_4_4_4;if(1018===b)return a.h.UNSIGNED_SHORT_5_5_5_1;if(1019===b)return a.h.UNSIGNED_SHORT_5_6_5;if(1010===b)return a.h.BYTE;if(1011===b)return a.h.SHORT;if(1012===b)return a.h.UNSIGNED_SHORT;if(1013===b)return a.h.INT;if(1014===b)return a.h.UNSIGNED_INT;if(1015===b)return a.h.FLOAT;if(1016===b){if(a.B)return a.h.HALF_FLOAT;var c=a.A.get("OES_texture_half_float");return null!==c?c.HALF_FLOAT_OES:null}if(1021===
b)return a.h.ALPHA;if(1022===b)return a.h.RGB;if(1023===b)return a.h.RGBA;if(1024===b)return a.h.LUMINANCE;if(1025===b)return a.h.LUMINANCE_ALPHA;if(1026===b)return a.h.DEPTH_COMPONENT;if(1027===b)return a.h.DEPTH_STENCIL;if(1028===b)return a.h.RED;if(1029===b)return a.h.RED_INTEGER;if(1030===b)return a.h.RG;if(1031===b)return a.h.RG_INTEGER;if(1032===b)return a.h.RGB_INTEGER;if(1033===b)return a.h.RGBA_INTEGER;if(33776===b||33777===b||33778===b||33779===b)if(c=a.A.get("WEBGL_compressed_texture_s3tc"),
null!==c){if(33776===b)return c.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===b)return c.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===b)return c.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===b)return c.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(35840===b||35841===b||35842===b||35843===b)if(c=a.A.get("WEBGL_compressed_texture_pvrtc"),null!==c){if(35840===b)return c.wh;if(35841===b)return c.vh;if(35842===b)return c.th;if(35843===b)return c.sh}else return null;if(36196===b)return c=a.A.get("WEBGL_compressed_texture_etc1"),
null!==c?c.uh:null;if(37492===b||37496===b)if(c=a.A.get("WEBGL_compressed_texture_etc"),null!==c){if(37492===b)return c.qh;if(37496===b)return c.rh}if(37808===b||37809===b||37810===b||37811===b||37812===b||37813===b||37814===b||37815===b||37816===b||37817===b||37818===b||37819===b||37820===b||37821===b||37840===b||37841===b||37842===b||37843===b||37844===b||37845===b||37846===b||37847===b||37848===b||37849===b||37850===b||37851===b||37852===b||37853===b)return c=a.A.get("WEBGL_compressed_texture_astc"),
null!==c?b:null;if(36492===b)return c=a.A.get("EXT_texture_compression_bptc"),null!==c?b:null;if(1020===b){if(a.B)return a.h.UNSIGNED_INT_24_8;c=a.A.get("WEBGL_depth_texture");return null!==c?c.Ch:null}};function Cd(a,b,c,d,e,f,g){this.h=a;this.A=b;this.i=c;this.properties=d;this.Fa=e;this.j=f;this.info=g;this.B=e.B;this.J=e.T;this.Ma=e.G;this.cb=e.o;this.Ra=e.J;this.C=new WeakMap;this.o=void 0;this.ka=!1;this.m=0;try{this.ka="undefined"!==typeof OffscreenCanvas&&null!==(new OffscreenCanvas(1,1)).getContext("2d")}catch(h){}a={};this.G=(a[1E3]=this.h.REPEAT,a[1001]=this.h.CLAMP_TO_EDGE,a[1002]=this.h.MIRRORED_REPEAT,a);a={};this.U=(a[1003]=this.h.NEAREST,a[1004]=this.h.NEAREST_MIPMAP_NEAREST,a[1005]=
this.h.NEAREST_MIPMAP_LINEAR,a[1006]=this.h.LINEAR,a[1007]=this.h.LINEAR_MIPMAP_NEAREST,a[1008]=this.h.LINEAR_MIPMAP_LINEAR,a);this.Aa=this.ra=!1}function Dd(a,b,c){return a.ka?new OffscreenCanvas(b,c):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}
function Ed(a,b,c,d,e){var f=1;if(b.width>e||b.height>e)f=e/Math.max(b.width,b.height);if(1>f||!0===c){if("undefined"!==typeof HTMLImageElement&&b instanceof HTMLImageElement||"undefined"!==typeof HTMLCanvasElement&&b instanceof HTMLCanvasElement||"undefined"!==typeof ImageBitmap&&b instanceof ImageBitmap)return e=c?za:Math.floor,c=e(f*b.width),f=e(f*b.height),void 0===a.o&&(a.o=Dd(a,c,f)),a=d?Dd(a,c,f):a.o,a.width=c,a.height=f,a.getContext("2d").drawImage(b,0,0,c,f),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+
b.width+"x"+b.height+") to ("+c+"x"+f+")."),a;"data"in b&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+b.width+"x"+b.height+").")}return b}function Fd(a){return ya(a.width)&&ya(a.height)}function Gd(a,b){return a.ia&&b&&1003!==a.O&&1006!==a.O}function Hd(a,b,c,d,e){a.h.generateMipmap(b);a.properties.get(c).Sa=Math.log2(Math.max(d,e))}
function Id(a,b,c,d){if(!1===a.B)return c;if(null!==b){if(void 0!==a.h[b])return a.h[b];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+b+"'")}b=c;c===a.h.RED&&(d===a.h.FLOAT&&(b=a.h.R32F),d===a.h.HALF_FLOAT&&(b=a.h.R16F),d===a.h.UNSIGNED_BYTE&&(b=a.h.R8));c===a.h.RGB&&(d===a.h.FLOAT&&(b=a.h.RGB32F),d===a.h.HALF_FLOAT&&(b=a.h.RGB16F),d===a.h.UNSIGNED_BYTE&&(b=a.h.RGB8));c===a.h.RGBA&&(d===a.h.FLOAT&&(b=a.h.RGBA32F),d===a.h.HALF_FLOAT&&(b=a.h.RGBA16F),d===a.h.UNSIGNED_BYTE&&
(b=a.h.RGBA8));b!==a.h.R16F&&b!==a.h.R32F&&b!==a.h.RGBA16F&&b!==a.h.RGBA32F||a.A.get("EXT_color_buffer_float");return b}function Jd(a,b){return 1003===b||1004===b||1005===b?a.h.NEAREST:a.h.LINEAR}Cd.prototype.T=function(a){a=a.target;a.removeEventListener("dispose",this.T);var b=this.properties.get(a);void 0!==b.te&&(this.h.deleteTexture(b.la),this.properties.remove(a));a.og&&this.C.delete(a);this.info.h.ea--};
Cd.prototype.ja=function(a){a=a.target;a.removeEventListener("dispose",this.ja);var b=a.D,c=this.properties.get(a),d=this.properties.get(b);if(a){void 0!==d.la&&this.h.deleteTexture(d.la);a.ga&&a.ga.W();if(a.Xa)for(d=0;6>d;d++)this.h.deleteFramebuffer(c.Ja[d]),c.mb&&this.h.deleteRenderbuffer(c.mb[d]);else this.h.deleteFramebuffer(c.Ja),c.mb&&this.h.deleteRenderbuffer(c.mb),c.Xb&&this.h.deleteFramebuffer(c.Xb),c.$c&&this.h.deleteRenderbuffer(c.$c),c.td&&this.h.deleteRenderbuffer(c.td);this.properties.remove(b);
this.properties.remove(a)}this.info.h.ea--};function Kd(a){var b=a.m;b>=a.J&&console.warn("THREE.WebGLTextures: Trying to use "+b+" texture units while this GPU supports only "+a.J);a.m+=1;return b}
function Ld(a,b,c){var d=a.properties.get(b);if(b.og){var e=a.info.H.frame;a.C.get(b)!==e&&(a.C.set(b,e),b.update())}if(0<b.version&&d.Bb!==b.version)if(e=b.image,void 0===e)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if(!1===e.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{Md(a,d,b,c);return}wd(a.i,a.h.TEXTURE0+c);W(a.i,a.h.TEXTURE_2D,d.la)}
function Nd(a,b,c,d){d?(a.h.texParameteri(b,a.h.TEXTURE_WRAP_S,a.G[c.xb]),a.h.texParameteri(b,a.h.TEXTURE_WRAP_T,a.G[c.yb]),b!==a.h.TEXTURE_3D&&b!==a.h.TEXTURE_2D_ARRAY||a.h.texParameteri(b,a.h.TEXTURE_WRAP_R,a.G[c.pf]),a.h.texParameteri(b,a.h.TEXTURE_MAG_FILTER,a.U[c.xa]),a.h.texParameteri(b,a.h.TEXTURE_MIN_FILTER,a.U[c.O])):(a.h.texParameteri(b,a.h.TEXTURE_WRAP_S,a.h.CLAMP_TO_EDGE),a.h.texParameteri(b,a.h.TEXTURE_WRAP_T,a.h.CLAMP_TO_EDGE),b!==a.h.TEXTURE_3D&&b!==a.h.TEXTURE_2D_ARRAY||a.h.texParameteri(b,
a.h.TEXTURE_WRAP_R,a.h.CLAMP_TO_EDGE),1001===c.xb&&1001===c.yb||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),a.h.texParameteri(b,a.h.TEXTURE_MAG_FILTER,Jd(a,c.xa)),a.h.texParameteri(b,a.h.TEXTURE_MIN_FILTER,Jd(a,c.O)),1003!==c.O&&1006!==c.O&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));if(!0===a.A.has("EXT_texture_filter_anisotropic")){var e=
a.A.get("EXT_texture_filter_anisotropic");if(!(1015===c.type&&!1===a.A.has("OES_texture_float_linear")||!1===a.B&&1016===c.type&&!1===a.A.has("OES_texture_half_float_linear"))&&(1<c.fb||a.properties.get(c).tf)){d=a.h;var f=d.texParameterf;e=e.TEXTURE_MAX_ANISOTROPY_EXT;var g=Math,h=g.min,k=c.fb;var l=a.Fa;if(void 0!==l.i)l=l.i;else{if(!0===l.A.has("EXT_texture_filter_anisotropic")){var p=l.A.get("EXT_texture_filter_anisotropic");l.i=l.h.getParameter(p.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else l.i=0;l=
l.i}f.call(d,b,e,h.call(g,k,l));a.properties.get(c).tf=c.fb}}}function Od(a,b,c){void 0===b.te&&(b.te=!0,c.addEventListener("dispose",a.T),b.la=a.h.createTexture(),a.info.h.ea++)}
function Md(a,b,c,d){var e=a.h.TEXTURE_2D;c.ed&&(e=a.h.TEXTURE_2D_ARRAY);c.zc&&(e=a.h.TEXTURE_3D);Od(a,b,c);wd(a.i,a.h.TEXTURE0+d);W(a.i,e,b.la);a.h.pixelStorei(a.h.UNPACK_FLIP_Y_WEBGL,c.flipY);a.h.pixelStorei(a.h.UNPACK_PREMULTIPLY_ALPHA_WEBGL,c.premultiplyAlpha);a.h.pixelStorei(a.h.UNPACK_ALIGNMENT,c.Qb);a.h.pixelStorei(a.h.UNPACK_COLORSPACE_CONVERSION_WEBGL,a.h.NONE);d=Ed(a,c.image,(a.B?!1:1001!==c.xb||1001!==c.yb||1003!==c.O&&1006!==c.O)&&!1===Fd(c.image),!1,a.cb);var f=Fd(d)||a.B,g=X(a.j,c.format),
h=X(a.j,c.type),k=Id(a,c.Jb,g,h);Nd(a,e,c,f);var l=c.Fc;if(c.Le)k=a.h.DEPTH_COMPONENT,a.B?1015===c.type?k=a.h.DEPTH_COMPONENT32F:1014===c.type?k=a.h.DEPTH_COMPONENT24:1020===c.type?k=a.h.DEPTH24_STENCIL8:k=a.h.DEPTH_COMPONENT16:1015===c.type&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),1026===c.format&&k===a.h.DEPTH_COMPONENT&&1012!==c.type&&1014!==c.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),
c.type=1012,h=X(a.j,c.type)),1027===c.format&&k===a.h.DEPTH_COMPONENT&&(k=a.h.DEPTH_STENCIL,1020!==c.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),c.type=1020,h=X(a.j,c.type))),a.i.Ia(a.h.TEXTURE_2D,0,k,d.width,d.height,0,g,h,null);else if(c.Nd)if(0<l.length&&f){for(var p=0,n=l.length;p<n;p++){var q=l[p];a.i.Ia(a.h.TEXTURE_2D,p,k,q.width,q.height,0,g,h,q.data)}c.ia=!1;b.Sa=l.length-1}else a.i.Ia(a.h.TEXTURE_2D,0,k,d.width,d.height,0,g,h,d.data),
b.Sa=0;else if(c.Ke){p=0;for(n=l.length;p<n;p++)q=l[p],1023!==c.format&&1022!==c.format?null!==g?a.i.pe(a.h.TEXTURE_2D,p,k,q.width,q.height,0,q.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):a.i.Ia(a.h.TEXTURE_2D,p,k,q.width,q.height,0,g,h,q.data);b.Sa=l.length-1}else if(c.ed)a.i.texImage3D(a.h.TEXTURE_2D_ARRAY,0,k,d.width,d.height,d.depth,0,g,h,d.data),b.Sa=0;else if(c.zc)a.i.texImage3D(a.h.TEXTURE_3D,0,k,d.width,d.height,d.depth,
0,g,h,d.data),b.Sa=0;else if(0<l.length&&f){p=0;for(n=l.length;p<n;p++)q=l[p],a.i.Ia(a.h.TEXTURE_2D,p,k,g,h,q);c.ia=!1;b.Sa=l.length-1}else a.i.Ia(a.h.TEXTURE_2D,0,k,g,h,d),b.Sa=0;Gd(c,f)&&Hd(a,e,c,d.width,d.height);b.Bb=c.version;c.kd&&c.kd(c)}
function Pd(a,b,c,d,e){var f=c.D,g=X(a.j,f.format),h=X(a.j,f.type),k=Id(a,f.Jb,g,h);e===a.h.TEXTURE_3D||e===a.h.TEXTURE_2D_ARRAY?a.i.texImage3D(e,0,k,c.width,c.height,c.depth,0,g,h,null):a.i.Ia(e,0,k,c.width,c.height,0,g,h,null);a.h.bindFramebuffer(a.h.FRAMEBUFFER,b);a.h.framebufferTexture2D(a.h.FRAMEBUFFER,d,e,a.properties.get(f).la,0);a.h.bindFramebuffer(a.h.FRAMEBUFFER,null)}
function Qd(a,b,c,d){a.h.bindRenderbuffer(a.h.RENDERBUFFER,b);if(c.ta&&!c.Da){var e=a.h.DEPTH_COMPONENT16;d?((d=c.ga)&&d.Le&&(1015===d.type?e=a.h.DEPTH_COMPONENT32F:1014===d.type&&(e=a.h.DEPTH_COMPONENT24)),a.h.renderbufferStorageMultisample(a.h.RENDERBUFFER,Rd(a,c),e,c.width,c.height)):a.h.renderbufferStorage(a.h.RENDERBUFFER,e,c.width,c.height);a.h.framebufferRenderbuffer(a.h.FRAMEBUFFER,a.h.DEPTH_ATTACHMENT,a.h.RENDERBUFFER,b)}else if(c.ta&&c.Da)d?a.h.renderbufferStorageMultisample(a.h.RENDERBUFFER,
Rd(a,c),a.h.DEPTH24_STENCIL8,c.width,c.height):a.h.renderbufferStorage(a.h.RENDERBUFFER,a.h.DEPTH_STENCIL,c.width,c.height),a.h.framebufferRenderbuffer(a.h.FRAMEBUFFER,a.h.DEPTH_STENCIL_ATTACHMENT,a.h.RENDERBUFFER,b);else{b=c.D;e=X(a.j,b.format);var f=X(a.j,b.type);b=Id(a,b.Jb,e,f);d?a.h.renderbufferStorageMultisample(a.h.RENDERBUFFER,Rd(a,c),b,c.width,c.height):a.h.renderbufferStorage(a.h.RENDERBUFFER,b,c.width,c.height)}a.h.bindRenderbuffer(a.h.RENDERBUFFER,null)}
function Rd(a,b){return a.B&&b.Wd?Math.min(a.Ra,b.gi):0}function Sd(a,b,c){b&&b.hd&&(!1===a.ra&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),a.ra=!0),b=b.D);Ld(a,b,c)}
function Td(a,b,c){b&&b.Xa&&(!1===a.Aa&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),a.Aa=!0),b=b.D);var d=a.properties.get(b);if(0<b.version&&d.Bb!==b.version){if(6===b.image.length){Od(a,d,b);wd(a.i,a.h.TEXTURE0+c);W(a.i,a.h.TEXTURE_CUBE_MAP,d.la);a.h.pixelStorei(a.h.UNPACK_FLIP_Y_WEBGL,b.flipY);a.h.pixelStorei(a.h.UNPACK_PREMULTIPLY_ALPHA_WEBGL,b.premultiplyAlpha);a.h.pixelStorei(a.h.UNPACK_ALIGNMENT,b.Qb);
a.h.pixelStorei(a.h.UNPACK_COLORSPACE_CONVERSION_WEBGL,a.h.NONE);var e=b&&(b.Ke||b.image[0].Ke),f=b.image[0]&&b.image[0].Nd;c=[];for(var g=0;6>g;g++)c[g]=e||f?f?b.image[g].image:b.image[g]:Ed(a,b.image[g],!1,!0,a.Ma);g=c[0];var h=Fd(g)||a.B,k=X(a.j,b.format),l=X(a.j,b.type),p=Id(a,b.Jb,k,l);Nd(a,a.h.TEXTURE_CUBE_MAP,b,h);if(e){for(f=0;6>f;f++){var n=c[f].Fc;for(e=0;e<n.length;e++){var q=n[e];1023!==b.format&&1022!==b.format?null!==k?a.i.pe(a.h.TEXTURE_CUBE_MAP_POSITIVE_X+f,e,p,q.width,q.height,0,
q.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):a.i.Ia(a.h.TEXTURE_CUBE_MAP_POSITIVE_X+f,e,p,q.width,q.height,0,k,l,q.data)}}d.Sa=n.length-1}else{n=b.Fc;for(e=0;6>e;e++)if(f)for(a.i.Ia(a.h.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,p,c[e].width,c[e].height,0,k,l,c[e].data),q=0;q<n.length;q++){var r=n[q].image[e].image;a.i.Ia(a.h.TEXTURE_CUBE_MAP_POSITIVE_X+e,q+1,p,r.width,r.height,0,k,l,r.data)}else for(a.i.Ia(a.h.TEXTURE_CUBE_MAP_POSITIVE_X+
e,0,p,k,l,c[e]),q=0;q<n.length;q++)a.i.Ia(a.h.TEXTURE_CUBE_MAP_POSITIVE_X+e,q+1,p,k,l,n[q].image[e]);d.Sa=n.length}Gd(b,h)&&Hd(a,a.h.TEXTURE_CUBE_MAP,b,g.width,g.height);d.Bb=b.version;b.kd&&b.kd(b)}}else wd(a.i,a.h.TEXTURE0+c),W(a.i,a.h.TEXTURE_CUBE_MAP,d.la)};var Ud=new N,Vd=new yd,Wd=new zd,Xd=new rc,Yd=[],Zd=[],$d=new Float32Array(16),ae=new Float32Array(9),be=new Float32Array(4);function ce(a,b,c){var d=a[0];if(0>=d||0<d)return a;var e=b*c,f=Yd[e];void 0===f&&(f=new Float32Array(e),Yd[e]=f);if(0!==b)for(d.ha(f,0),d=1,e=0;d!==b;++d)e+=c,a[d].ha(f,e);return f}function de(a,b){if(a.length!==b.length)return!1;for(var c=0,d=a.length;c<d;c++)if(a[c]!==b[c])return!1;return!0}function ee(a,b){for(var c=0,d=b.length;c<d;c++)a[c]=b[c]}
function fe(a,b){var c=Zd[b];void 0===c&&(c=new Int32Array(b),Zd[b]=c);for(var d=0;d!==b;++d)c[d]=Kd(a);return c}function ge(a,b,c){this.id=a;this.h=c;this.cache=[];this.size=b.size}m=ge.prototype;m.Vg=function(a,b){var c=this.cache;c[0]!==b&&(a.uniform1f(this.h,b),c[0]=b)};m.$g=function(a,b){var c=this.cache;if(void 0!==b.x){if(c[0]!==b.x||c[1]!==b.y)a.uniform2f(this.h,b.x,b.y),c[0]=b.x,c[1]=b.y}else de(c,b)||(a.uniform2fv(this.h,b),ee(c,b))};
m.eh=function(a,b){var c=this.cache;if(void 0!==b.x){if(c[0]!==b.x||c[1]!==b.y||c[2]!==b.z)a.uniform3f(this.h,b.x,b.y,b.z),c[0]=b.x,c[1]=b.y,c[2]=b.z}else if(void 0!==b.r){if(c[0]!==b.r||c[1]!==b.g||c[2]!==b.b)a.uniform3f(this.h,b.r,b.g,b.b),c[0]=b.r,c[1]=b.g,c[2]=b.b}else de(c,b)||(a.uniform3fv(this.h,b),ee(c,b))};
m.ih=function(a,b){var c=this.cache;if(void 0!==b.x){if(c[0]!==b.x||c[1]!==b.y||c[2]!==b.z||c[3]!==b.w)a.uniform4f(this.h,b.x,b.y,b.z,b.w),c[0]=b.x,c[1]=b.y,c[2]=b.z,c[3]=b.w}else de(c,b)||(a.uniform4fv(this.h,b),ee(c,b))};m.Jg=function(a,b){var c=this.cache,d=b.elements;void 0===d?de(c,b)||(a.uniformMatrix2fv(this.h,!1,b),ee(c,b)):de(c,d)||(be.set(d),a.uniformMatrix2fv(this.h,!1,be),ee(c,d))};
m.Lg=function(a,b){var c=this.cache,d=b.elements;void 0===d?de(c,b)||(a.uniformMatrix3fv(this.h,!1,b),ee(c,b)):de(c,d)||(ae.set(d),a.uniformMatrix3fv(this.h,!1,ae),ee(c,d))};m.Ng=function(a,b){var c=this.cache,d=b.elements;void 0===d?de(c,b)||(a.uniformMatrix4fv(this.h,!1,b),ee(c,b)):de(c,d)||($d.set(d),a.uniformMatrix4fv(this.h,!1,$d),ee(c,d))};m.Pg=function(a,b,c){var d=this.cache,e=Kd(c);d[0]!==e&&(a.uniform1i(this.h,e),d[0]=e);Sd(c,b||Ud,e)};
m.Rg=function(a,b,c){var d=this.cache,e=Kd(c);d[0]!==e&&(a.uniform1i(this.h,e),d[0]=e);a=b||Vd;b=c.properties.get(a);0<a.version&&b.Bb!==a.version?Md(c,b,a,e):(wd(c.i,c.h.TEXTURE0+e),W(c.i,c.h.TEXTURE_2D_ARRAY,b.la))};m.Sg=function(a,b,c){var d=this.cache,e=Kd(c);d[0]!==e&&(a.uniform1i(this.h,e),d[0]=e);a=b||Wd;b=c.properties.get(a);0<a.version&&b.Bb!==a.version?Md(c,b,a,e):(wd(c.i,c.h.TEXTURE0+e),W(c.i,c.h.TEXTURE_3D,b.la))};
m.Tg=function(a,b,c){var d=this.cache,e=Kd(c);d[0]!==e&&(a.uniform1i(this.h,e),d[0]=e);Td(c,b||Xd,e)};m.Xg=function(a,b){var c=this.cache;c[0]!==b&&(a.uniform1i(this.h,b),c[0]=b)};m.bh=function(a,b){var c=this.cache;de(c,b)||(a.uniform2iv(this.h,b),ee(c,b))};m.gh=function(a,b){var c=this.cache;de(c,b)||(a.uniform3iv(this.h,b),ee(c,b))};m.kh=function(a,b){var c=this.cache;de(c,b)||(a.uniform4iv(this.h,b),ee(c,b))};m.Zg=function(a,b){var c=this.cache;c[0]!==b&&(a.uniform1ui(this.h,b),c[0]=b)};
function he(a,b){switch(b){case 5126:return a.Vg;case 35664:return a.$g;case 35665:return a.eh;case 35666:return a.ih;case 35674:return a.Jg;case 35675:return a.Lg;case 35676:return a.Ng;case 5124:case 35670:return a.Xg;case 35667:case 35671:return a.bh;case 35668:case 35672:return a.gh;case 35669:case 35673:return a.kh;case 5125:return a.Zg;case 35678:case 36198:case 36298:case 36306:case 35682:return a.Pg;case 35679:case 36299:case 36307:return a.Sg;case 35680:case 36300:case 36308:case 36293:return a.Tg;
case 36289:case 36303:case 36311:case 36292:return a.Rg}}m.Wg=function(a,b){a.uniform1fv(this.h,b)};m.Yg=function(a,b){a.uniform1iv(this.h,b)};m.dh=function(a,b){a.uniform2iv(this.h,b)};m.hh=function(a,b){a.uniform3iv(this.h,b)};m.lh=function(a,b){a.uniform4iv(this.h,b)};m.ah=function(a,b){b=ce(b,this.size,2);a.uniform2fv(this.h,b)};m.fh=function(a,b){b=ce(b,this.size,3);a.uniform3fv(this.h,b)};m.jh=function(a,b){b=ce(b,this.size,4);a.uniform4fv(this.h,b)};
m.Kg=function(a,b){b=ce(b,this.size,4);a.uniformMatrix2fv(this.h,!1,b)};m.Mg=function(a,b){b=ce(b,this.size,9);a.uniformMatrix3fv(this.h,!1,b)};m.Og=function(a,b){b=ce(b,this.size,16);a.uniformMatrix4fv(this.h,!1,b)};m.Qg=function(a,b,c){var d=b.length,e=fe(c,d);a.uniform1iv(this.h,e);for(a=0;a!==d;++a)Sd(c,b[a]||Ud,e[a])};m.Ug=function(a,b,c){var d=b.length,e=fe(c,d);a.uniform1iv(this.h,e);for(a=0;a!==d;++a)Td(c,b[a]||Xd,e[a])};
function ie(a,b){switch(b){case 5126:return a.Wg;case 35664:return a.ah;case 35665:return a.fh;case 35666:return a.jh;case 35674:return a.Kg;case 35675:return a.Mg;case 35676:return a.Og;case 5124:case 35670:return a.Yg;case 35667:case 35671:return a.dh;case 35668:case 35672:return a.hh;case 35669:case 35673:return a.lh;case 35678:case 36198:case 36298:case 36306:case 35682:return a.Qg;case 35680:case 36300:case 36308:case 36293:return a.Ug}}
function je(a,b,c){ge.call(this,a,b,c);this.id=a;this.h=c;this.cache=[];this.ba=he(this,b.type)}A(je,ge);function ke(a,b,c){ge.call(this,a,b,c);this.id=a;this.h=c;this.cache=[];this.size=b.size;this.ba=ie(this,b.type)}A(ke,ge);function le(a){this.id=a;this.Lc=[];this.map={}}le.prototype.ba=function(a,b,c){for(var d=this.Lc,e=0,f=d.length;e!==f;++e){var g=d[e];g.ba(a,b[g.id],c)}};var ne=/(\w+)(\])?(\[|\.)?/g;
function oe(a,b){this.Lc=[];this.map={};for(var c=a.getProgramParameter(b,a.ACTIVE_UNIFORMS),d=0;d<c;++d){var e=a.getActiveUniform(b,d),f=a.getUniformLocation(b,e.name),g=this,h=e.name,k=h.length;for(ne.lastIndex=0;;){var l=ne.exec(h),p=ne.lastIndex,n=l[1],q=l[3];"]"===l[2]&&(n|=0);if(void 0===q||"["===q&&p+2===k){h=g;e=void 0===q?new je(n,e,f):new ke(n,e,f);h.Lc.push(e);h.map[e.id]=e;break}else q=g.map[n],void 0===q&&(q=new le(n),n=g,g=q,n.Lc.push(g),n.map[g.id]=g),g=q}}}
oe.prototype.ba=function(a,b,c,d){b=this.map[b];void 0!==b&&b.ba(a,c,d)};function pe(a,b,c,d){c=c[d];void 0!==c&&a.ba(b,d,c)}function qe(a,b,c,d){for(var e=0,f=b.length;e!==f;++e){var g=b[e],h=c[g.id];!1!==h.N&&g.ba(a,h.value,d)}};function re(a,b,c){b=a.createShader(b);a.shaderSource(b,c);a.compileShader(b);return b};var se=0;function te(a){switch(a){case 3E3:return["Linear","( value )"];case 3001:return["sRGB","( value )"];case 3002:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case 3007:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case 3003:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",a),["Linear","( value )"]}}
function ue(a,b,c){var d=a.getShaderInfoLog(b).trim();if(a.getShaderParameter(b,a.COMPILE_STATUS)&&""===d)c="";else{a=a.getShaderSource(b).split("\n");for(b=0;b<a.length;b++)a[b]=b+1+": "+a[b];c="THREE.WebGLShader: gl.getShaderInfoLog() "+c+"\n"+d+a.join("\n")}return c}function ve(a,b){b=te(b);return"vec4 "+a+"( vec4 value ) { return "+b[0]+"ToLinear"+b[1]+"; }"}function we(a){return""!==a}
function xe(a,b){return a.replace(/NUM_DIR_LIGHTS/g,b.xg).replace(/NUM_SPOT_LIGHTS/g,b.Dg).replace(/NUM_RECT_AREA_LIGHTS/g,b.Bg).replace(/NUM_POINT_LIGHTS/g,b.Ag).replace(/NUM_HEMI_LIGHTS/g,b.yg).replace(/NUM_DIR_LIGHT_SHADOWS/g,b.wg).replace(/NUM_SPOT_LIGHT_SHADOWS/g,b.Cg).replace(/NUM_POINT_LIGHT_SHADOWS/g,b.zg)}function ye(a,b){return a.replace(/NUM_CLIPPING_PLANES/g,b.Hc).replace(/UNION_CLIPPING_PLANES/g,b.Hc-b.vg)}var ze=/^[ \t]*#include +<([\w\d./]+)>/gm;
function Ae(a,b){a=Ic[b];if(void 0===a)throw Error("Can not resolve #include <"+b+">");return a.replace(ze,Ae)}var Be=/#pragma unroll_loop[\s]+?for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}/g,Ce=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function De(a,b,c,d){console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");return Ee(a,b,c,d)}function Ee(a,b,c,d){a="";for(b=parseInt(b);b<parseInt(c);b++)a+=d.replace(/\[\s*i\s*\]/g,"[ "+b+" ]").replace(/UNROLLED_LOOP_INDEX/g,b);return a}
function Fe(a){var b="precision "+a.precision+" float;\nprecision "+a.precision+" int;";"highp"===a.precision?b+="\n#define HIGH_PRECISION":"mediump"===a.precision?b+="\n#define MEDIUM_PRECISION":"lowp"===a.precision&&(b+="\n#define LOW_PRECISION");return b}
function Ge(a,b,c,d){this.Dd=b;this.parameters=c;this.qf=d;this.V=a.getContext();var e=c.Ga;d=c.vertexShader;var f=c.fragmentShader,g="SHADOWMAP_TYPE_BASIC";1===c.he?g="SHADOWMAP_TYPE_PCF":2===c.he?g="SHADOWMAP_TYPE_PCF_SOFT":3===c.he&&(g="SHADOWMAP_TYPE_VSM");var h=g;g="ENVMAP_TYPE_CUBE";if(c.envMap)switch(c.Ce){case 301:case 302:g="ENVMAP_TYPE_CUBE";break;case 306:case 307:g="ENVMAP_TYPE_CUBE_UV"}var k=g;g="ENVMAP_MODE_REFLECTION";if(c.envMap)switch(c.Ce){case 302:case 307:g="ENVMAP_MODE_REFRACTION"}var l=
g;g="ENVMAP_BLENDING_NONE";if(c.envMap)switch(c.ob){case 0:g="ENVMAP_BLENDING_MULTIPLY";break;case 1:g="ENVMAP_BLENDING_MIX";break;case 2:g="ENVMAP_BLENDING_ADD"}var p=g;g=c.B?"":[c.Nf||c.Lf||c.bumpMap||c.ke||c.clearcoatNormalMap||c.hb||"physical"===c.nd?"#extension GL_OES_standard_derivatives : enable":"",(c.Pf||c.Na)&&c.fe?"#extension GL_EXT_frag_depth : enable":"",c.Of&&c.Hg?"#extension GL_EXT_draw_buffers : require":"",(c.De||c.envMap)&&c.ef?"#extension GL_EXT_shader_texture_lod : enable":""].filter(we).join("\n");
var n=[];for(r in e){var q=e[r];!1!==q&&n.push("#define "+r+" "+q)}q=n.join("\n");var r=this.V.createProgram();n=c.Wa?"#version "+c.Wa+"\n":"";if(c.Bc)e=[q].filter(we).join("\n"),0<e.length&&(e+="\n"),g=[g,q].filter(we).join("\n"),0<g.length&&(g+="\n");else{e=[Fe(c),"#define SHADER_NAME "+c.ge,q,c.ag?"#define USE_INSTANCING":"",c.He?"#define USE_INSTANCING_COLOR":"",c.jf?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR 2","#define MAX_BONES "+c.ug,c.pd&&c.fog?"#define USE_FOG":"",c.pd&&c.Fe?"#define FOG_EXP2":
"",c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.envMap?"#define "+l:"",c.lightMap?"#define USE_LIGHTMAP":"",c.aoMap?"#define USE_AOMAP":"",c.emissiveMap?"#define USE_EMISSIVEMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.normalMap&&c.Ze?"#define OBJECTSPACE_NORMALMAP":"",c.normalMap&&c.ke?"#define TANGENTSPACE_NORMALMAP":"",c.clearcoatMap?"#define USE_CLEARCOATMAP":"",c.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",c.clearcoatNormalMap?
"#define USE_CLEARCOAT_NORMALMAP":"",c.displacementMap&&c.jf?"#define USE_DISPLACEMENTMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.roughnessMap?"#define USE_ROUGHNESSMAP":"",c.metalnessMap?"#define USE_METALNESSMAP":"",c.alphaMap?"#define USE_ALPHAMAP":"",c.transmissionMap?"#define USE_TRANSMISSIONMAP":"",c.ne?"#define USE_TANGENT":"",c.wb?"#define USE_COLOR":"",c.nf?"#define USE_UV":"",c.mf?"#define UVS_VERTEX_ONLY":"",c.hb?"#define FLAT_SHADED":"",c.da?"#define USE_SKINNING":"",c.oh?"#define BONE_TEXTURE":
"",c.aa?"#define USE_MORPHTARGETS":"",c.kb&&!1===c.hb?"#define USE_MORPHNORMALS":"",c.Ae?"#define DOUBLE_SIDED":"",c.Ee?"#define FLIP_SIDED":"",c.od?"#define USE_SHADOWMAP":"",c.od?"#define "+h:"",c.Nc?"#define USE_SIZEATTENUATION":"",c.Na?"#define USE_LOGDEPTHBUF":"",c.Na&&c.fe?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",
"#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS",
"\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(we).join("\n");var u=Fe(c),t="#define SHADER_NAME "+c.ge,v=c.Ua?"#define ALPHATEST "+c.Ua+
(c.Ua%1?"":".0"):"",x=c.pd&&c.fog?"#define USE_FOG":"",w=c.pd&&c.Fe?"#define FOG_EXP2":"",y=c.map?"#define USE_MAP":"",z=c.matcap?"#define USE_MATCAP":"",B=c.envMap?"#define USE_ENVMAP":"";k=c.envMap?"#define "+k:"";l=c.envMap?"#define "+l:"";p=c.envMap?"#define "+p:"";var T=c.lightMap?"#define USE_LIGHTMAP":"",da=c.aoMap?"#define USE_AOMAP":"",Ba=c.emissiveMap?"#define USE_EMISSIVEMAP":"",Ca=c.bumpMap?"#define USE_BUMPMAP":"",Da=c.normalMap?"#define USE_NORMALMAP":"",Ea=c.normalMap&&c.Ze?"#define OBJECTSPACE_NORMALMAP":
"",Fa=c.normalMap&&c.ke?"#define TANGENTSPACE_NORMALMAP":"",Ga=c.clearcoatMap?"#define USE_CLEARCOATMAP":"",Ha=c.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",fa=c.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",F=c.specularMap?"#define USE_SPECULARMAP":"",Wa=c.roughnessMap?"#define USE_ROUGHNESSMAP":"",yc=c.metalnessMap?"#define USE_METALNESSMAP":"",Xa=c.alphaMap?"#define USE_ALPHAMAP":"",Pf=c.sheen?"#define USE_SHEEN":"",Qf=c.transmissionMap?"#define USE_TRANSMISSIONMAP":
"",Rf=c.ne?"#define USE_TANGENT":"",Sf=c.wb||c.He?"#define USE_COLOR":"",Tf=c.nf?"#define USE_UV":"",Uf=c.mf?"#define UVS_VERTEX_ONLY":"",Vf=c.gradientMap?"#define USE_GRADIENTMAP":"",Wf=c.hb?"#define FLAT_SHADED":"",Xf=c.Ae?"#define DOUBLE_SIDED":"",Yf=c.Ee?"#define FLIP_SIDED":"",Zf=c.od?"#define USE_SHADOWMAP":"";h=c.od?"#define "+h:"";var $f=c.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",ag=c.ce?"#define PHYSICALLY_CORRECT_LIGHTS":"",bg=c.Na?"#define USE_LOGDEPTHBUF":"",cg=c.Na&&c.fe?"#define USE_LOGDEPTHBUF_EXT":
"",dg=(c.De||c.envMap)&&c.ef?"#define TEXTURE_LOD_EXT":"",eg=0!==c.$a?"#define TONE_MAPPING":"",fg=0!==c.$a?Ic.tonemapping_pars_fragment:"";if(0!==c.$a){var ca=c.$a;switch(ca){case 1:ca="Linear";break;case 2:ca="Reinhard";break;case 3:ca="OptimizedCineon";break;case 4:ca="ACESFilmic";break;case 5:ca="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",ca),ca="Linear"}ca="vec3 toneMapping( vec3 color ) { return "+ca+"ToneMapping( color ); }"}else ca="";var gg=c.Hb?"#define DITHERING":
"",hg=Ic.encodings_pars_fragment,ig=c.map?ve("mapTexelToLinear",c.sg):"",jg=c.matcap?ve("matcapTexelToLinear",c.tg):"",kg=c.envMap?ve("envMapTexelToLinear",c.Mf):"",lg=c.emissiveMap?ve("emissiveMapTexelToLinear",c.Kf):"",mg=c.lightMap?ve("lightMapTexelToLinear",c.rg):"",me=te(c.tb);g=[g,u,t,q,v,"#define GAMMA_FACTOR 2",x,w,y,z,B,k,l,p,T,da,Ba,Ca,Da,Ea,Fa,Ga,Ha,fa,F,Wa,yc,Xa,Pf,Qf,Rf,Sf,Tf,Uf,Vf,Wf,Xf,Yf,Zf,h,$f,ag,bg,cg,dg,"uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",
eg,fg,ca,gg,hg,ig,jg,kg,lg,mg,"vec4 linearToOutputTexel( vec4 value ) { return LinearTo"+me[0]+me[1]+"; }",c.pb?"#define DEPTH_PACKING "+c.pb:"","\n"].filter(we).join("\n")}d=d.replace(ze,Ae);d=xe(d,c);d=ye(d,c);f=f.replace(ze,Ae);f=xe(f,c);f=ye(f,c);d=d.replace(Ce,Ee).replace(Be,De);f=f.replace(Ce,Ee).replace(Be,De);c.B&&!0!==c.Bc&&(n="#version 300 es\n",e="#define attribute in\n#define varying out\n#define texture2D texture\n"+e,g=["#define varying in","300 es"===c.Wa?"":"out highp vec4 pc_fragColor;",
"300 es"===c.Wa?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+g);f=n+g+f;d=re(this.V,this.V.VERTEX_SHADER,n+e+d);f=re(this.V,
this.V.FRAGMENT_SHADER,f);this.V.attachShader(r,d);this.V.attachShader(r,f);void 0!==c.cd?this.V.bindAttribLocation(r,0,c.cd):!0===c.aa&&this.V.bindAttribLocation(r,0,"position");this.V.linkProgram(r);a.Gf.Ef&&(a=this.V.getProgramInfoLog(r).trim(),!1===this.V.getProgramParameter(r,this.V.LINK_STATUS)?(g=ue(this.V,d,"vertex"),e=ue(this.V,f,"fragment"),console.error("THREE.WebGLProgram: shader error: ",this.V.getError(),"gl.VALIDATE_STATUS",this.V.getProgramParameter(r,this.V.VALIDATE_STATUS),"gl.getProgramInfoLog",
a,g,e)):""!==a&&console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",a));this.V.deleteShader(d);this.V.deleteShader(f);this.h=this.i=void 0;this.name=c.ge;this.id=se++;this.Dd=b;this.lf=1;this.Y=r;this.vertexShader=d;this.fragmentShader=f}Ge.prototype.$b=function(){void 0===this.i&&(this.i=new oe(this.V,this.Y));return this.i};
function He(a){if(void 0===a.h){for(var b=a.V,c=a.Y,d={},e=b.getProgramParameter(c,b.ACTIVE_ATTRIBUTES),f=0;f<e;f++){var g=b.getActiveAttrib(c,f).name;d[g]=b.getAttribLocation(c,g)}a.h=d}return a.h};function Ie(a,b,c,d){this.h=a;this.A=b;this.attributes=c;this.m=d;this.G=a.getParameter(a.MAX_VERTEX_ATTRIBS);this.C=d.B?null:b.get("OES_vertex_array_object");this.J=d.B||null!==this.C;this.j={};this.i=this.o=Je(this,null)}function Ke(a,b){a.m.B?a.h.deleteVertexArray(b):a.C.deleteVertexArrayOES(b)}function Je(a,b){for(var c=[],d=[],e=[],f=0;f<a.G;f++)c[f]=0,d[f]=0,e[f]=0;return{$:null,Y:null,fa:!1,$d:c,Be:d,vf:e,object:b,attributes:{},index:null}}
Ie.prototype.N=function(a,b){var c=this.i.attributes;a=a.attributes;var d=0,e;for(e in a){var f=c[e],g=a[e];if(void 0===f||f.uf!==g||f.data!==g.data)return!0;d++}return this.i.wf!==d||this.i.index!==b?!0:!1};function Le(a){a=a.i.$d;for(var b=0,c=a.length;b<c;b++)a[b]=0}function Y(a,b,c){var d=a.i.Be,e=a.i.vf;a.i.$d[b]=1;0===d[b]&&(a.h.enableVertexAttribArray(b),d[b]=1);e[b]!==c&&((a.m.B?a.h:a.A.get("ANGLE_instanced_arrays"))[a.m.B?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](b,c),e[b]=c)}
function Me(a){for(var b=a.i.$d,c=a.i.Be,d=0,e=c.length;d<e;d++)c[d]!==b[d]&&(a.h.disableVertexAttribArray(d),c[d]=0)}function Ne(a,b,c,d,e,f,g){!0!==a.m.B||d!==a.h.INT&&d!==a.h.UNSIGNED_INT?a.h.vertexAttribPointer(b,c,d,e,f,g):a.h.vertexAttribIPointer(b,c,d,f,g)}Ie.prototype.W=function(){Oe(this);for(var a in this.j){var b=this.j[a],c;for(c in b){var d=b[c],e;for(e in d)Ke(this,d[e].object),delete d[e];delete b[c]}delete this.j[a]}};
function Oe(a){Pe(a);if(a.i!==a.o){a.i=a.o;var b=a.i.object;a.m.B?a.h.bindVertexArray(b):a.C.bindVertexArrayOES(b)}}function Pe(a){a.o.$=null;a.o.Y=null;a.o.fa=!1};function Qe(a,b,c,d){this.i=a;this.attributes=b;this.info=c;this.m=d;this.wa={};this.h=new WeakMap}
Qe.prototype.j=function(a){a=a.target;null!==a.index&&this.attributes.remove(a.index);for(var b in a.attributes)this.attributes.remove(a.attributes[b]);a.removeEventListener("dispose",this.j);delete this.wa[a.id];if(b=this.h.get(a))this.attributes.remove(b),this.h.delete(a);b=this.m;if(void 0!==b.j[a.id]){var c=b.j[a.id],d;for(d in c){var e=c[d],f;for(f in e)Ke(b,e[f].object),delete e[f];delete c[d]}delete b.j[a.id]}!0===a.Ne&&delete a.pc;this.info.h.wa--};
Qe.prototype.get=function(a,b){if(!0===this.wa[b.id])return b;b.addEventListener("dispose",this.j);this.wa[b.id]=!0;this.info.h.wa++;return b};Qe.prototype.update=function(a){var b=a.attributes;for(d in b)this.attributes.update(b[d],this.i.ARRAY_BUFFER);a=a.ya;for(var c in a){b=a[c];var d=0;for(var e=b.length;d<e;d++)this.attributes.update(b[d],this.i.ARRAY_BUFFER)}};
function Re(a,b){var c=[],d=b.index,e=b.attributes.position;if(null!==d){e=d.R;d=d.version;for(var f=0,g=e.length;f<g;f+=3){var h=e[f],k=e[f+1],l=e[f+2];c.push(h,k,k,l,l,h)}}else for(f=e.R,d=e.version,e=0,f=f.length/3-1;e<f;e+=3)g=e,h=e+1,k=e+2,c.push(g,h,h,k,k,g);c=new (65535<fc(c)?cc:bc)(c,1);c.version=d;(d=a.h.get(b))&&a.attributes.remove(d);a.h.set(b,c)};function Se(a,b,c,d){this.i=new WeakMap;this.j=a;this.wa=b;this.attributes=c;this.info=d}Se.prototype.update=function(a){var b=this.info.H.frame,c=this.wa.get(a,a.$);this.i.get(c)!==b&&(this.wa.update(c),this.i.set(c,b));a.Lb&&(void 0===a.va?b=!1:(b=a.va,b=void 0!==b.dispose&&-1!==b.dispose.indexOf(this.h)),!1===b&&a.addEventListener("dispose",this.h),this.attributes.update(a.dd,this.j.ARRAY_BUFFER),null!==a.yc&&this.attributes.update(a.yc,this.j.ARRAY_BUFFER));return c};
Se.prototype.W=function(){this.i=new WeakMap};Se.prototype.h=function(a){a=a.target;a.removeEventListener("dispose",this.h);this.attributes.remove(a.dd);null!==a.yc&&this.attributes.remove(a.yc)};function Te(a,b){return a.jb!==b.jb?a.jb-b.jb:a.na!==b.na?a.na-b.na:a.Y!==b.Y?a.Y.id-b.Y.id:a.M.id!==b.M.id?a.M.id-b.M.id:a.z!==b.z?a.z-b.z:a.id-b.id}function Ue(a,b){return a.jb!==b.jb?a.jb-b.jb:a.na!==b.na?a.na-b.na:a.z!==b.z?b.z-a.z:a.id-b.id}function Ve(a){this.properties=a;this.j=[];this.i=0;this.h=[];this.za=[];this.m={id:-1}}
function We(a,b,c,d,e,f,g){var h=a.j[a.i],k=a.properties.get(d);void 0===h?(h={id:b.id,object:b,$:c,M:d,Y:k.Y||a.m,jb:e,na:b.na,z:f,group:g},a.j[a.i]=h):(h.id=b.id,h.object=b,h.$=c,h.M=d,h.Y=k.Y||a.m,h.jb=e,h.na=b.na,h.z=f,h.group=g);a.i++;return h}Ve.prototype.push=function(a,b,c,d,e,f){a=We(this,a,b,c,d,e,f);(!0===c.za?this.za:this.h).push(a)};Ve.prototype.unshift=function(a,b,c,d,e,f){a=We(this,a,b,c,d,e,f);(!0===c.za?this.za:this.h).unshift(a)};
Ve.prototype.sort=function(a,b){1<this.h.length&&this.h.sort(a||Te);1<this.za.length&&this.za.sort(b||Ue)};function Xe(a){this.properties=a;this.h=new WeakMap}Xe.prototype.get=function(a,b){!1===this.h.has(a)?(b=new Ve(this.properties),this.h.set(a,[b])):b>=this.h.get(a).length?(b=new Ve(this.properties),this.h.get(a).push(b)):b=this.h.get(a)[b];return b};Xe.prototype.W=function(){this.h=new WeakMap};function Ye(a,b,c){this.va=void 0;this.width=a;this.height=b;this.depth=1;this.scissor=new K(0,0,a,b);this.Ig=!1;this.viewport=new K(0,0,a,b);c=c||{};this.D=new N(void 0,c.mapping,c.xb,c.yb,c.xa,c.O,c.format,c.type,c.fb,c.encoding);this.D.image={};this.D.image.width=a;this.D.image.height=b;this.D.image.depth=1;this.D.ia=void 0!==c.ia?c.ia:!1;this.D.O=void 0!==c.O?c.O:1006;this.ta=void 0!==c.ta?c.ta:!0;this.Da=void 0!==c.Da?c.Da:!1;this.ga=void 0!==c.ga?c.ga:null}A(Ye,Va);m=Ye.prototype;
m.md=function(a,b,c){c=void 0===c?1:c;if(this.width!==a||this.height!==b||this.depth!==c)this.width=a,this.height=b,this.depth=c,this.D.image.width=a,this.D.image.height=b,this.D.image.depth=c,this.W();this.viewport.set(0,0,a,b);this.scissor.set(0,0,a,b)};m.clone=function(){return(new this.constructor).l(this)};m.l=function(a){this.width=a.width;this.height=a.height;this.depth=a.depth;this.viewport.l(a.viewport);this.D=a.D.clone();this.ta=a.ta;this.Da=a.Da;this.ga=a.ga;return this};m.W=function(){this.dispatchEvent({type:"dispose"})};
m.hd=!0;function Ze(a,b,c){J.call(this);this.type="CubeCamera";!0!==c.Xa?console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter."):(this.h=c,c=new L(90,1,a,b),c.P=this.P,c.ab.set(0,-1,0),c.Oa(new D(1,0,0)),this.add(c),c=new L(90,1,a,b),c.P=this.P,c.ab.set(0,-1,0),c.Oa(new D(-1,0,0)),this.add(c),c=new L(90,1,a,b),c.P=this.P,c.ab.set(0,0,1),c.Oa(new D(0,1,0)),this.add(c),c=new L(90,1,a,b),c.P=this.P,c.ab.set(0,0,-1),c.Oa(new D(0,-1,0)),this.add(c),
c=new L(90,1,a,b),c.P=this.P,c.ab.set(0,-1,0),c.Oa(new D(0,0,1)),this.add(c),a=new L(90,1,a,b),a.P=this.P,a.ab.set(0,-1,0),a.Oa(new D(0,0,-1)),this.add(a))}A(Ze,J);
Ze.prototype.update=function(a,b){null===this.parent&&this.mc();var c=this.h,d=ba(this.children),e=d.next().value,f=d.next().value,g=d.next().value,h=d.next().value,k=d.next().value;d=d.next().value;var l=a.xr.enabled,p=a.m;a.xr.enabled=!1;var n=c.D.ia;c.D.ia=!1;Z(a,c,0);a.H(b,e);Z(a,c,1);a.H(b,f);Z(a,c,2);a.H(b,g);Z(a,c,3);a.H(b,h);Z(a,c,4);a.H(b,k);c.D.ia=n;Z(a,c,5);a.H(b,d);Z(a,p);a.xr.enabled=l};function $e(a,b){Ye.call(this,a,a,b);b=b||{};this.D=new rc(void 0,b.mapping,b.xb,b.yb,b.xa,b.O,b.format,b.type,b.fb,b.encoding);this.D.ia=void 0!==b.ia?b.ia:!1;this.D.O=void 0!==b.O?b.O:1006;this.D.ud=!1}A($e,Ye);$e.prototype.clear=function(a,b,c,d){for(var e=a.m,f=0;6>f;f++)Z(a,this,f),a.clear(b,c,d);Z(a,e)};$e.prototype.Xa=!0;function af(a){this.i=a;this.h=new WeakMap}function bf(a,b){303===b?a.mapping=301:304===b&&(a.mapping=302);return a}
af.prototype.get=function(a){if(a&&a.isTexture){var b=a.mapping;if(303===b||304===b){if(this.h.has(a))return b=this.h.get(a).D,bf(b,a.mapping);var c=a.image;if(c&&0<c.height){b=this.i.m;c=new $e(c.height/2);var d=this.i;c.D.type=a.type;c.D.format=1023;c.D.encoding=a.encoding;c.D.ia=a.ia;c.D.O=a.O;c.D.xa=a.xa;var e=new qc(5,5,5),f=new Hc({name:"CubemapFromEquirect",uniforms:Gc({tEquirect:{value:null}}),vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",
fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",S:1,nb:0});f.uniforms.tEquirect.value=a;e=new tc(e,f);f=a.O;1008===a.O&&(a.O=1006);(new Ze(1,10,c)).update(d,e);a.O=f;e.$.W();e.M.W();this.h.set(a,c);Z(this.i,
b);a.addEventListener("dispose",this.j);return bf(c.D,a.mapping)}return null}}return a};af.prototype.j=function(a){a=a.target;a.removeEventListener("dispose",this.j);var b=this.h.get(a);void 0!==b&&(this.h.delete(a),b.W())};af.prototype.W=function(){this.h=new WeakMap};function cf(a,b,c,d,e){this.i=a;this.T=b;this.U=c;this.G=d;this.premultipliedAlpha=e;this.J=new O(0);this.m=null;this.o=0;this.C=null}
cf.prototype.H=function(a,b,c,d){(b=!0===b.ac?b.background:null)&&b.isTexture&&(b=this.T.get(b));c=this.i.xr;(c=c.Tf&&c.rf)&&"additive"===c.environmentBlendMode&&(b=null);null===b?df(this,this.J,0):b&&b.isColor&&(df(this,b,1),d=!0);(this.i.xf||d)&&this.i.clear(this.i.yf,this.i.zf,this.i.Af);if(b&&(b.Md||b.Xa||306===b.mapping)){void 0===this.h&&(this.h=new tc(new qc(1,1,1),new Hc({name:"BackgroundCubeMaterial",uniforms:Gc(ad),vertexShader:bd,fragmentShader:cd,S:1,Fb:!1,Gb:!1,fog:!1})),delete this.h.$.attributes.normal,
delete this.h.$.attributes.uv,this.h.be=function(e){var f=this.I.elements;e=e.I.elements;f[12]=e[12];f[13]=e[13];f[14]=e[14]},this.h.M.envMap.get=function(){return this.uniforms.envMap.value},this.G.update(this.h));b.Xa&&(b=b.D);this.h.M.uniforms.envMap.value=b;this.h.M.uniforms.flipEnvMap.value=b.Md&&b.ud?-1:1;if(this.m!==b||this.o!==b.version||this.C!==this.i.$a)this.h.M.N=!0,this.m=b,this.o=b.version,this.C=this.i.$a;a.unshift(this.h,this.h.$,this.h.M,0,0,null)}else if(b&&b.isTexture){void 0===
this.j&&(this.j=new tc(new Fc(2,2),new Hc({name:"BackgroundMaterial",uniforms:Gc(Yc),vertexShader:Zc,fragmentShader:$c,S:0,Fb:!1,Gb:!1,fog:!1})),delete this.j.$.attributes.normal,this.j.M.map.get=function(){return this.uniforms.t2D.value},this.G.update(this.j));this.j.M.uniforms.t2D.value=b;!0===b.pa&&b.bb();this.j.M.uniforms.uvTransform.value.l(b.matrix);if(this.m!==b||this.o!==b.version||this.C!==this.i.$a)this.j.M.N=!0,this.m=b,this.o=b.version,this.C=this.i.$a;a.unshift(this.j,this.j.$,this.j.M,
0,0,null)}};function df(a,b,c){gd(a.U.i.color,b.r,b.g,b.b,c,a.premultipliedAlpha)};function ef(a,b,c,d){this.j=a;this.A=b;this.info=c;this.B=d.B;this.mode=void 0}ef.prototype.h=function(a){this.mode=a};ef.prototype.H=function(a,b){this.j.drawArrays(this.mode,a,b);this.info.update(b,this.mode,1)};
ef.prototype.i=function(a,b,c){if(0!==c){if(this.B){var d=this.j;var e="drawArraysInstanced"}else if(d=this.A.get("ANGLE_instanced_arrays"),e="drawArraysInstancedANGLE",null===d){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}d[e](this.mode,a,b,c);this.info.update(b,this.mode,c)}};function ff(a){this.properties=a;this.o=null;this.j=0;this.m=this.C=!1;this.G=new Ob;this.J=new cb;this.i={value:null,N:!1};this.sb=this.h=0}function gf(a){a.i.value!==a.o&&(a.i.value=a.o,a.i.N=0<a.j);a.h=a.j;a.sb=0}
function hf(a,b,c,d,e){var f=null!==b?b.length:0,g=null;if(0!==f){g=a.i.value;if(!0!==e||null===g){e=d+4*f;c=c.Ya;db(a.J,c);if(null===g||g.length<e)g=new Float32Array(e);for(e=0;e!==f;++e,d+=4)a.G.l(b[e]).L(c,a.J),a.G.normal.ha(g,d),g[d+3]=a.G.h}a.i.value=g;a.i.N=!0}a.h=f;a.sb=0;return g};function jf(a,b,c,d){this.j=a;this.A=b;this.info=c;this.B=d.B;this.Eb=this.type=this.mode=null}jf.prototype.h=function(a){this.mode=a};jf.prototype.H=function(a,b){this.j.drawElements(this.mode,b,this.type,a*this.Eb);this.info.update(b,this.mode,1)};
jf.prototype.i=function(a,b,c){if(0!==c){if(this.B){var d=this.j;var e="drawElementsInstanced"}else if(d=this.A.get("ANGLE_instanced_arrays"),e="drawElementsInstancedANGLE",null===d){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}d[e](this.mode,b,this.type,a*this.Eb,c);this.info.update(b,this.mode,c)}};function kf(a,b){return a[0]-b[0]}function lf(a,b){return Math.abs(b[1])-Math.abs(a[1])}function mf(a){this.j=a;this.m={};this.i=new Float32Array(8);this.h=[];for(a=0;8>a;a++)this.h[a]=[a,0]}
mf.prototype.update=function(a,b,c,d){var e=a.cc;a=void 0===e?0:e.length;var f=this.m[b.id];if(void 0===f){f=[];for(var g=0;g<a;g++)f[g]=[g,0];this.m[b.id]=f}for(g=0;g<a;g++){var h=f[g];h[0]=g;h[1]=e[g]}f.sort(lf);for(e=0;8>e;e++)e<a&&f[e][1]?(this.h[e][0]=f[e][0],this.h[e][1]=f[e][1]):(this.h[e][0]=Number.MAX_SAFE_INTEGER,this.h[e][1]=0);this.h.sort(kf);a=c.aa&&b.ya.position;c=c.kb&&b.ya.normal;for(e=f=0;8>e;e++)h=this.h[e],g=h[0],h=h[1],g!==Number.MAX_SAFE_INTEGER&&h?(a&&b.getAttribute("morphTarget"+
e)!==a[g]&&b.setAttribute("morphTarget"+e,a[g]),c&&b.getAttribute("morphNormal"+e)!==c[g]&&b.setAttribute("morphNormal"+e,c[g]),this.i[e]=h,f+=h):(a&&!0===b.hasAttribute("morphTarget"+e)&&delete b.attributes["morphTarget"+e],c&&!0===b.hasAttribute("morphNormal"+e)&&delete b.attributes["morphNormal"+e],this.i[e]=0);b=b.rb?1:1-f;d.$b().ba(this.j,"morphTargetBaseInfluence",b);d.$b().ba(this.j,"morphTargetInfluences",this.i)};function nf(a,b,c,d,e,f){this.h=a;this.J=b;this.A=c;this.G=d;this.C=e;this.sa=f;this.i=[];this.B=d.B;this.Na=d.Na;this.j=d.m;this.T=d.U;this.U=d.C;this.precision=d.precision;this.o={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",
PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};this.m="precision isWebGL2 supportsVertexTextures outputEncoding instancing instancingColor map mapEncoding matcap matcapEncoding envMap envMapMode envMapEncoding envMapCubeUV lightMap lightMapEncoding aoMap emissiveMap emissiveMapEncoding bumpMap normalMap objectSpaceNormalMap tangentSpaceNormalMap clearcoatMap clearcoatRoughnessMap clearcoatNormalMap displacementMap specularMap roughnessMap metalnessMap gradientMap alphaMap combine vertexColors vertexTangents vertexUvs uvsVertexOnly fog useFog fogExp2 flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights numRectAreaLights numDirLightShadows numPointLightShadows numSpotLightShadows shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes numClipIntersection depthPacking dithering sheen transmissionMap".split(" ")}
function of(a){a&&a.isTexture?a=a.encoding:a&&a.hd?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),a=a.D.encoding):a=3E3;return a}nf.prototype.$b=function(a){var b=this.o[a.type];b?(console.log("GET "+b),a=dd(b),a=Gc(a.uniforms)):a=a.uniforms;return a};function pf(){this.lights={}}
pf.prototype.get=function(a){if(void 0!==this.lights[a.id])return this.lights[a.id];switch(a.type){case "DirectionalLight":var b={direction:new D,color:new O};break;case "SpotLight":b={position:new D,direction:new D,color:new O,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case "PointLight":b={position:new D,color:new O,distance:0,decay:0};break;case "HemisphereLight":b={direction:new D,skyColor:new O,groundColor:new O};break;case "RectAreaLight":b={color:new O,position:new D,Ld:new D,Kd:new D}}return this.lights[a.id]=
b};function qf(){this.lights={}}qf.prototype.get=function(a){if(void 0!==this.lights[a.id])return this.lights[a.id];switch(a.type){case "DirectionalLight":var b={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new M};break;case "SpotLight":b={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new M};break;case "PointLight":b={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new M,shadowCameraNear:1,shadowCameraFar:1E3}}return this.lights[a.id]=b};var rf=0;
function sf(a,b){return(b.Ka?1:0)-(a.Ka?1:0)}function tf(a,b){this.A=a;this.C=b;this.cache=new pf;this.o=new qf;this.h={version:0,hash:{ze:-1,cf:-1,hf:-1,df:-1,Ge:-1,We:-1,Xe:-1,Ye:-1},ad:[0,0,0],ld:[],rc:[],Gd:[],directionalShadowMap:[],directionalShadowMatrix:[],Oc:[],je:[],spotShadowMap:[],spotShadowMatrix:[],Kc:[],Fg:null,Gg:null,Jc:[],de:[],pointShadowMap:[],pointShadowMatrix:[],xc:[]};for(a=0;9>a;a++)this.h.ld.push(new D);this.j=new D;this.m=new G;this.i=new G}
function uf(a,b,c){var d=0,e=0,f=0,g=0,h=0;c=c.Ya;for(var k=0,l=b.length;k<l;k++){var p=b[k];if(p.cg){var n=a.h.rc[d];E(n.direction,p.I);E(a.j,p.target.I);n.direction.sub(a.j);n.direction.lc(c);d++}else if(p.lg)n=a.h.Oc[f],E(n.position,p.I),n.position.L(c),E(n.direction,p.I),E(a.j,p.target.I),n.direction.sub(a.j),n.direction.lc(c),f++;else if(p.kg){n=a.h.Kc[g];E(n.position,p.I);n.position.L(c);a.i.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);a.m.l(p.I);var q=a.m;q.Pa(c,q);Na(a.i,a.m);n.Ld.set(.5*p.width,
0,0);n.Kd.set(0,.5*p.height,0);n.Ld.L(a.i);n.Kd.L(a.i);g++}else p.Sd?(n=a.h.Jc[e],E(n.position,p.I),n.position.L(c),e++):p.fg&&(n=a.h.xc[h],E(n.direction,p.I),n.direction.lc(c),n.direction.normalize(),h++)}};function vf(a,b){this.lights=new tf(a,b);this.qb=[];this.Pb=[];this.h={qb:this.qb,Pb:this.Pb,lights:this.lights}}function wf(a){a.qb.length=0;a.Pb.length=0}
function xf(a){var b=a.lights;a=a.qb;for(var c=0,d=0,e=0,f=0;9>f;f++)b.h.ld[f].set(0,0,0);var g=f=0,h=0,k=0,l=0,p=0,n=0,q=0;a.sort(sf);for(var r=0,u=a.length;r<u;r++){var t=a[r],v=t.color,x=t.Ie,w=t.distance,y=t.shadow&&t.shadow.map?t.shadow.map.D:null;if(t.Nh)c+=v.r*x,d+=v.g*x,e+=v.b*x;else if(t.Uh)for(y=0;9>y;y++)b.h.ld[y].wd(t.hi.Eh[y],x);else if(t.cg){x=b.cache.get(t);x.color.l(t.color).X(t.Ie);if(t.Ka){var z=t.shadow;v=b.o.get(t);v.shadowBias=z.j;v.shadowNormalBias=z.o;v.shadowRadius=z.ca;v.shadowMapSize=
z.h;b.h.Gd[f]=v;b.h.directionalShadowMap[f]=y;b.h.directionalShadowMatrix[f]=t.shadow.matrix;p++}b.h.rc[f]=x;f++}else t.lg?(z=b.cache.get(t),E(z.position,t.I),z.color.l(v).X(x),z.distance=w,z.coneCos=Math.cos(t.angle),z.penumbraCos=Math.cos(t.angle*(1-t.ei)),z.decay=t.decay,t.Ka&&(x=t.shadow,v=b.o.get(t),v.shadowBias=x.j,v.shadowNormalBias=x.o,v.shadowRadius=x.ca,v.shadowMapSize=x.h,b.h.je[h]=v,b.h.spotShadowMap[h]=y,b.h.spotShadowMatrix[h]=t.shadow.matrix,q++),b.h.Oc[h]=z,h++):t.kg?(y=b.cache.get(t),
y.color.l(v).X(x),y.Ld.set(.5*t.width,0,0),y.Kd.set(0,.5*t.height,0),b.h.Kc[k]=y,k++):t.Sd?(x=b.cache.get(t),x.color.l(t.color).X(t.Ie),x.distance=t.distance,x.decay=t.decay,t.Ka&&(z=t.shadow,v=b.o.get(t),v.shadowBias=z.j,v.shadowNormalBias=z.o,v.shadowRadius=z.ca,v.shadowMapSize=z.h,v.shadowCameraNear=z.i.lb,v.shadowCameraFar=z.i.Va,b.h.de[g]=v,b.h.pointShadowMap[g]=y,b.h.pointShadowMatrix[g]=t.shadow.matrix,n++),b.h.Jc[g]=x,g++):t.fg&&(y=b.cache.get(t),y.skyColor.l(t.color).X(x),y.groundColor.l(t.groundColor).X(x),
b.h.xc[l]=y,l++)}0<k&&(b.C.B||!0!==b.A.has("OES_texture_float_linear")&&!0!==b.A.has("OES_texture_half_float_linear")&&console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions."));b.h.ad[0]=c;b.h.ad[1]=d;b.h.ad[2]=e;a=b.h.hash;if(a.ze!==f||a.cf!==g||a.hf!==h||a.df!==k||a.Ge!==l||a.We!==p||a.Xe!==n||a.Ye!==q)b.h.rc.length=f,b.h.Oc.length=h,b.h.Kc.length=k,b.h.Jc.length=g,b.h.xc.length=l,b.h.Gd.length=p,b.h.directionalShadowMap.length=p,b.h.de.length=n,b.h.pointShadowMap.length=
n,b.h.je.length=q,b.h.spotShadowMap.length=q,b.h.directionalShadowMatrix.length=p,b.h.pointShadowMatrix.length=n,b.h.spotShadowMatrix.length=q,a.ze=f,a.cf=g,a.hf=h,a.df=k,a.Ge=l,a.We=p,a.Xe=n,a.Ye=q,b.h.version=rf++}function yf(a,b){this.A=a;this.i=b;this.h=new WeakMap}yf.prototype.get=function(a,b){b=void 0===b?0:b;!1===this.h.has(a)?(b=new vf(this.A,this.i),this.h.set(a,[b])):b>=this.h.get(a).length?(b=new vf(this.A,this.i),this.h.get(a).push(b)):b=this.h.get(a)[b];return b};
yf.prototype.W=function(){this.h=new WeakMap};function zf(a){P.call(this);this.type="MeshDepthMaterial";this.pb=3200;this.aa=this.da=!1;this.displacementMap=this.alphaMap=this.map=null;this.displacementScale=1;this.displacementBias=0;this.fa=!1;this.Ea=1;this.fog=!1;Rb(this,a)}A(zf,P);
zf.prototype.l=function(a){P.prototype.l.call(this,a);this.pb=a.pb;this.da=a.da;this.aa=a.aa;this.map=a.map;this.alphaMap=a.alphaMap;this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.fa=a.fa;this.Ea=a.Ea;return this};zf.prototype.hg=!0;function Af(a){P.call(this);this.type="MeshDistanceMaterial";this.referencePosition=new D;this.nearDistance=1;this.farDistance=1E3;this.aa=this.da=!1;this.displacementMap=this.alphaMap=this.map=null;this.displacementScale=1;this.displacementBias=0;this.fog=!1;Rb(this,a)}A(Af,P);
Af.prototype.l=function(a){P.prototype.l.call(this,a);this.referencePosition.l(a.referencePosition);this.nearDistance=a.nearDistance;this.farDistance=a.farDistance;this.da=a.da;this.aa=a.aa;this.map=a.map;this.alphaMap=a.alphaMap;this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;return this};Af.prototype.Qe=!0;function Bf(a,b,c){this.h=a;this.ra=b;this.m=c;this.J=new wc;this.i=new M;this.j=new M;this.T=new K;this.U=[];this.ja=[];this.ka={};this.ub={0:1,1:0,2:2};this.o=new Hc({Ga:{Bh:.25,xh:.125},uniforms:{gf:{value:null},ff:{value:new M},ca:{value:4}},vertexShader:"\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}\n",fragmentShader:"\nuniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n\n#include <packing>\n\nvoid main() {\n\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\n\t// This seems totally useless but it's a crazy work around for a Adreno compiler bug\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\n\t\t#ifdef HORIZONTAL_PASS\n\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\n\t\t#else\n\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\n\t\t#endif\n\n\t}\n\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n\n}\n"});
this.C=this.o.clone();this.C.Ga.yh=1;a=new lc;a.setAttribute("position",new $b(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));this.G=new tc(a,this.o);this.enabled=!1;this.Db=!0;this.N=!1;this.type=1}
Bf.prototype.H=function(a,b,c){if(!1!==this.enabled&&(!1!==this.Db||!1!==this.N)&&0!==a.length){var d=this.h.m,e=this.h.se,f=this.h.oe,g=this.h.i;sd(g,0);gd(g.i.color,1,1,1,1);id(g.i.depth,!0);kd(g,g.h.SCISSOR_TEST);for(var h=0,k=a.length;h<k;h++){var l=a[h],p=l.shadow;if(void 0===p)console.warn("THREE.WebGLShadowMap:",l,"has no shadow.");else if(!1!==p.Db||!1!==p.N){this.i.l(p.h);var n=p.G();this.i.multiply(n);this.j.l(p.h);if(this.i.x>this.m||this.i.y>this.m)this.i.x>this.m&&(this.j.x=Math.floor(this.m/
n.x),this.i.x=this.j.x*n.x,p.h.x=this.j.x),this.i.y>this.m&&(this.j.y=Math.floor(this.m/n.y),this.i.y=this.j.y*n.y,p.h.y=this.j.y);null!==p.map||p.C||3!==this.type||(n={O:1006,xa:1006,format:1023},p.map=new Ye(this.i.x,this.i.y,n),p.map.D.name=l.name+".shadowMap",p.m=new Ye(this.i.x,this.i.y,n),qb(p.i));null===p.map&&(p.map=new Ye(this.i.x,this.i.y,{O:1003,xa:1003,format:1023}),p.map.D.name=l.name+".shadowMap",qb(p.i));Z(this.h,p.map);this.h.clear();n=p.T();for(var q=0;q<n;q++){var r=p.getViewport(q);
this.T.set(this.j.x*r.x,this.j.y*r.y,this.j.x*r.z,this.j.y*r.w);g.viewport(this.T);p.U(l,q);this.J=p.J();Cf(this,b,c,p.i,l,this.type)}p.C||3!==this.type||(l=c,n=this.ra.update(this.G),this.o.uniforms.gf.value=p.map.D,this.o.uniforms.ff.value=p.h,this.o.uniforms.ca.value=p.ca,Z(this.h,p.m),this.h.clear(),Df(this.h,l,null,n,this.o,this.G,null),this.C.uniforms.gf.value=p.m.D,this.C.uniforms.ff.value=p.h,this.C.uniforms.ca.value=p.ca,Z(this.h,p.map),this.h.clear(),Df(this.h,l,null,n,this.C,this.G,null));
p.N=!1}}this.N=!1;Z(this.h,d,e,f)}};Bf.prototype.Aa=function(a,b,c){c=a<<0|b<<1|c<<2;var d=this.U[c];void 0===d&&(d=new zf({pb:3201,aa:a,da:b}),this.U[c]=d);return d};Bf.prototype.Fa=function(a,b,c){c=a<<0|b<<1|c<<2;var d=this.ja[c];void 0===d&&(d=new Af({aa:a,da:b}),this.ja[c]=d);return d};
function Ef(a,b,c,d,e,f,g,h){var k=a.Aa,l=b.Gh;!0===e.Sd&&(k=a.Fa,l=b.Hh);void 0===l?(l=!1,!0===d.aa&&(l=c.ya&&c.ya.position&&0<c.ya.position.length),c=!1,!0===b.Ud&&(!0===d.da?c=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",b)),b=k(l,c,!0===b.Lb)):b=l;a.h.re&&!0===d.Zb&&0!==d.gb.length&&(l=b.F,k=d.F,c=a.ka[l],void 0===c&&(c={},a.ka[l]=c),l=c[k],void 0===l&&(l=b.clone(),c[k]=l),b=l);b.visible=d.visible;b.fa=d.fa;3===h?b.S=null!==d.ub?d.ub:d.S:b.S=null!==
d.ub?d.ub:a.ub[d.S];b.Zb=d.Zb;b.gb=d.gb;b.qc=d.qc;b.Ea=d.Ea;b.Ob=d.Ob;!0===e.Sd&&!0===b.Qe&&(E(b.referencePosition,e.I),b.nearDistance=f,b.farDistance=g);return b}
function Cf(a,b,c,d,e,f){if(!1!==b.visible){if(b.P.test(c.P)&&(b.Ac||b.Pd||b.Td)&&(b.Ka||b.Za&&3===f)&&(!b.Ib||xc(a.J,b))){b.jd.Pa(d.Ya,b.I);var g=a.ra.update(b),h=b.M;if(Array.isArray(h))for(var k=g.groups,l=0,p=k.length;l<p;l++){var n=k[l],q=h[n.Xd];q&&q.visible&&(q=Ef(a,b,g,q,e,d.lb,d.Va,f),Df(a.h,d,null,g,q,b,n))}else h.visible&&(h=Ef(a,b,g,h,e,d.lb,d.Va,f),Df(a.h,d,null,g,h,b,null))}b=b.children;g=0;for(h=b.length;g<h;g++)Cf(a,b[g],c,d,e,f)}};function Ff(a){a=void 0===a?[]:a;L.call(this);this.ye=a;this.bg=!0}A(Ff,L);function Gf(){this.va=void 0;this.rf=null;this.framebufferScaleFactor=1;this.h=new L;bb(this.h.P,1);this.h.viewport=new K;this.i=new L;bb(this.i.P,2);this.i.viewport=new K;this.ye=[this.h,this.i];this.j=new Ff;bb(this.j.P,1);bb(this.j.P,2);this.enabled=!1;this.W=function(){}}A(Gf,Va);Gf.prototype.Tf=function(){return null};function Hf(a){this.properties=a}
function If(a,b,c){b.opacity.value=c.opacity;c.color&&b.diffuse.value.l(c.color);c.emissive&&b.emissive.value.l(c.emissive).X(c.bd);c.map&&(b.map.value=c.map);c.alphaMap&&(b.alphaMap.value=c.alphaMap);c.specularMap&&(b.specularMap.value=c.specularMap);var d=a.properties.get(c).envMap;d&&(b.envMap.value=d,b.flipEnvMap.value=d.Md&&d.ud?-1:1,b.reflectivity.value=c.reflectivity,b.refractionRatio.value=c.refractionRatio,a=a.properties.get(d).Sa,void 0!==a&&(b.maxMipLevel.value=a));c.lightMap&&(b.lightMap.value=
c.lightMap,b.lightMapIntensity.value=c.lightMapIntensity);c.aoMap&&(b.aoMap.value=c.aoMap,b.aoMapIntensity.value=c.aoMapIntensity);if(c.map)var e=c.map;else c.specularMap?e=c.specularMap:c.displacementMap?e=c.displacementMap:c.normalMap?e=c.normalMap:c.bumpMap?e=c.bumpMap:c.roughnessMap?e=c.roughnessMap:c.metalnessMap?e=c.metalnessMap:c.alphaMap?e=c.alphaMap:c.emissiveMap?e=c.emissiveMap:c.clearcoatMap?e=c.clearcoatMap:c.clearcoatNormalMap?e=c.clearcoatNormalMap:c.clearcoatRoughnessMap&&(e=c.clearcoatRoughnessMap);
void 0!==e&&(e.hd&&(e=e.D),!0===e.pa&&e.bb(),b.uvTransform.value.l(e.matrix));if(c.aoMap)var f=c.aoMap;else c.lightMap&&(f=c.lightMap);void 0!==f&&(f.hd&&(f=f.D),!0===f.pa&&f.bb(),b.uv2Transform.value.l(f.matrix))}
function Jf(a,b,c){b.roughness.value=c.roughness;b.metalness.value=c.metalness;c.roughnessMap&&(b.roughnessMap.value=c.roughnessMap);c.metalnessMap&&(b.metalnessMap.value=c.metalnessMap);c.emissiveMap&&(b.emissiveMap.value=c.emissiveMap);c.bumpMap&&(b.bumpMap.value=c.bumpMap,b.bumpScale.value=c.bumpScale,1===c.S&&(b.bumpScale.value*=-1));c.normalMap&&(b.normalMap.value=c.normalMap,b.normalScale.value.l(c.normalScale),1===c.S&&b.normalScale.value.Qa());c.displacementMap&&(b.displacementMap.value=c.displacementMap,
b.displacementScale.value=c.displacementScale,b.displacementBias.value=c.displacementBias);a.properties.get(c).envMap&&(b.envMapIntensity.value=c.envMapIntensity)};function Kf(){var a=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");a.style.display="block";return a}
function Lf(){function a(p,n){for(var q=0;q<p.length;q++){var r=c.getContext(p[q],n);if(null!==r)return r}return null}var b={antialias:!0};console.log("pre "+JSON.stringify(b));this.parameters=b=b||{};var c=void 0!==b.canvas?b.canvas:Kf();this.o=c;this.Jf=void 0!==b.context?b.context:null;var d=void 0!==b.alpha?b.alpha:!1,e=void 0!==b.depth?b.depth:!0,f=void 0!==b.stencil?b.stencil:!0,g=void 0!==b.antialias?b.antialias:!1,h=void 0!==b.premultipliedAlpha?b.premultipliedAlpha:!0;this.Qf=h;var k=void 0!==
b.preserveDrawingBuffer?b.preserveDrawingBuffer:!1,l=void 0!==b.powerPreference?b.powerPreference:"default";b=void 0!==b.failIfMajorPerformanceCaveat?b.failIfMajorPerformanceCaveat:!1;this.ma=this.j=null;this.ka=[];this.ra=[];this.$f=this.o;this.Gf={Ef:!0};this.Af=this.zf=this.yf=this.xf=!0;this.gb=[];this.re=!1;this.tb=3E3;this.ce=!1;this.$a=0;this.Ue=8;this.Te=4;this.oc=!1;this.oe=this.se=0;this.ue=this.m=null;this.cb=-1;this.U=null;this.ja=new K;this.zb=new K;this.Wb=null;this.Ab=this.o.width;
this.Aa=this.o.height;this.C=1;this.T=new K(0,0,this.Ab,this.Aa);this.ve=new K(0,0,this.Ab,this.Aa);this.Sf=!1;this.Rb=new wc;this.rd=this.Ra=!1;this.Fa=new G;this.J=new D;this.nc={background:null,fog:null,Ha:null,Ic:null,ac:!0};this.h=this.Jf;try{d={alpha:d,depth:e,stencil:f,antialias:g,premultipliedAlpha:h,preserveDrawingBuffer:k,powerPreference:l,failIfMajorPerformanceCaveat:b};console.log("contextAttributes "+JSON.stringify(d));this.o.addEventListener("webglcontextlost",this.$e,!1);this.o.addEventListener("webglcontextrestored",
this.af,!1);if(null===this.h&&(e=["webgl2","webgl","experimental-webgl"],this.h=a(e,d),null===this.h)){if(a(e))throw Error("Error creating WebGL context with your selected attributes.");throw Error("Error creating WebGL context.");}void 0===this.h.getShaderPrecisionFormat&&(this.h.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(p){throw console.error("THREE.WebGLRenderer: "+p.message),p;}Mf(this);this.xr=new Gf(this,this.h);this.Sb=new Ac;this.Sb.i=this.sf;"undefined"!==
typeof window&&(this.Sb.context=window);"undefined"!==typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}
function Mf(a){var b=new Bc(a.h);var c=new Cc(a.h,b,a.parameters);c.B?U(b,"EXT_color_buffer_float"):(U(b,"WEBGL_depth_texture"),U(b,"OES_texture_float"),U(b,"OES_texture_half_float"),U(b,"OES_texture_half_float_linear"),U(b,"OES_standard_derivatives"),U(b,"OES_element_index_uint"),U(b,"OES_vertex_array_object"),U(b,"ANGLE_instanced_arrays"));U(b,"OES_texture_float_linear");U(b,"EXT_color_buffer_half_float");var d=new Bd(a.h,b,c);var e=new qd(a.h,b,c);e.scissor(a.zb.l(a.ve).X(a.C).floor());e.viewport(a.ja.l(a.T).X(a.C).floor());
var f=new xd(a.h);var g=new Ad;d=new Cd(a.h,b,e,g,c,d,f);var h=new af(a);var k=new Ec(a.h,c);var l=new Ie(a.h,b,k,c);var p=new Qe(a.h,k,f,l);var n=new Se(a.h,p,k,f);var q=new mf(a.h);var r=new ff(g);var u=new nf(a,h,b,c,l,r);var t=new Hf(g);var v=new Xe(g);var x=new yf(b,c);var w=new cf(a,h,e,n,a.Qf);var y=new Bf(a,n,c.o);var z=new ef(a.h,b,f,c);var B=new jf(a.h,b,f,c);f.j=u.i;a.qe=c;a.A=b;a.properties=g;a.we=v;a.Vb=x;a.sd=y;a.i=e;a.info=f;a.G=l;a.sa=r;a.Ub=n;a.background=w;a.ea=d;a.Tb=h;a.Ma=u;a.bc=
t;a.attributes=k;a.pg=B;a.Uf=z;a.qg=q;a.wa=p}m=Lf.prototype;m.getContext=function(){return this.h};m.md=function(a,b,c){this.Ab=a;this.Aa=b;this.o.width=Math.floor(a*this.C);this.o.height=Math.floor(b*this.C);!1!==c&&(this.o.style.width=a+"px",this.o.style.height=b+"px");(0).Vd?this.T.set((0).x,(0).y,(0).z,(0).w):this.T.set(0,0,a,b);this.i.viewport(this.ja.l(this.T).X(this.C).floor())};m.getViewport=function(a){return a.l(this.T)};
m.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=this.h.COLOR_BUFFER_BIT;if(void 0===b||b)d|=this.h.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=this.h.STENCIL_BUFFER_BIT;this.h.clear(d)};m.W=function(){this.o.removeEventListener("webglcontextlost",this.$e,!1);this.o.removeEventListener("webglcontextrestored",this.af,!1);this.we.W();this.Vb.W();this.properties.W();this.Tb.W();this.Ub.W();this.G.W();this.xr.W();var a=this.Sb;a.context.cancelAnimationFrame(a.h);a.j=!1};
m.$e=function(a){a.preventDefault();this.oc=!0};m.af=function(){this.oc=!1;Mf(this)};m.bf=function(a){a=a.target;a.removeEventListener("dispose",this.bf);Nf(this,a);this.properties.remove(a)};function Nf(a,b){b=a.properties.get(b).Y;if(void 0!==b&&(a=a.Ma,0===--b.lf)){a.i[a.i.indexOf(b)]=a.i[a.i.length-1];a.i.pop();a=b.qf;for(var c in a.j){var d=a.j[c];if(void 0!==d[b.id]){var e=d[b.id],f;for(f in e)Ke(a,e[f].object),delete e[f];delete d[b.id]}}b.V.deleteProgram(b.Y);b.Y=void 0}}
function Of(a,b,c){b.H(function(d){Le(a.G);var e=a.properties.get(d);d.Xf&&!e.position&&(e.position=a.h.createBuffer());d.Wf&&!e.normal&&(e.normal=a.h.createBuffer());d.Yf&&!e.qd&&(e.qd=a.h.createBuffer());d.Vf&&!e.color&&(e.color=a.h.createBuffer());var f=He(c);d.Xf&&(a.h.bindBuffer(a.h.ARRAY_BUFFER,e.position),a.h.bufferData(a.h.ARRAY_BUFFER,d.fi,a.h.DYNAMIC_DRAW),Y(a.G,f.position,0),a.h.vertexAttribPointer(f.position,3,a.h.FLOAT,!1,0,0));d.Wf&&(a.h.bindBuffer(a.h.ARRAY_BUFFER,e.normal),a.h.bufferData(a.h.ARRAY_BUFFER,
d.di,a.h.DYNAMIC_DRAW),Y(a.G,f.normal,0),a.h.vertexAttribPointer(f.normal,3,a.h.FLOAT,!1,0,0));d.Yf&&(a.h.bindBuffer(a.h.ARRAY_BUFFER,e.qd),a.h.bufferData(a.h.ARRAY_BUFFER,d.mi,a.h.DYNAMIC_DRAW),Y(a.G,f.qd,0),a.h.vertexAttribPointer(f.qd,2,a.h.FLOAT,!1,0,0));d.Vf&&(a.h.bindBuffer(a.h.ARRAY_BUFFER,e.color),a.h.bufferData(a.h.ARRAY_BUFFER,d.Fh,a.h.DYNAMIC_DRAW),Y(a.G,f.color,0),a.h.vertexAttribPointer(f.color,3,a.h.FLOAT,!1,0,0));Me(a.G);a.h.drawArrays(a.h.TRIANGLES,0,d.count);d.count=0})}
function Df(a,b,c,d,e,f,g){null===c&&(c=a.nc);var h=f.Ac&&0>Ra(f.I),k=ng(a,b,c,e,f);td(a.i,e,h);b=d.index;h=d.attributes.position;if(null===b){if(void 0===h||0===h.count)return}else if(0===b.count)return;c=1;if(!0===e.fa){b=a.wa;if(c=b.h.get(d)){var l=d.index;null!==l&&c.version<l.version&&Re(b,d)}else Re(b,d);b=b.h.get(d);c=2}(e.aa||e.kb)&&a.qg.update(f,d,e,k);l=a.G;var p=b,n=!1;if(l.J){n=!0===e.fa;var q=l.j[d.id];void 0===q&&(q={},l.j[d.id]=q);var r=q[k.id];void 0===r&&(r={},q[k.id]=r);q=r[n];void 0===
q&&(q=l.m.B?l.h.createVertexArray():l.C.createVertexArrayOES(),q=Je(l,q),r[n]=q);n=q;l.i!==n&&(l.i=n,n=l.i.object,l.m.B?l.h.bindVertexArray(n):l.C.bindVertexArrayOES(n));if(n=l.N(d,p)){r={};q=d.attributes;var u=0;for(x in q){var t=q[x],v={uf:t};t.data&&(v.data=t.data);r[x]=v;u++}l.i.attributes=r;l.i.wf=u;l.i.index=p}}else{var x=!0===e.fa;if(l.i.$!==d.id||l.i.Y!==k.id||l.i.fa!==x)l.i.$=d.id,l.i.Y=k.id,l.i.fa=x,n=!0}!0===f.Lb&&(n=!0);null!==p&&l.attributes.update(p,l.h.ELEMENT_ARRAY_BUFFER);if(n){if(!1!==
l.m.B||!f.Lb&&!d.Ne||null!==l.A.get("ANGLE_instanced_arrays")){Le(l);x=d.attributes;k=He(k);n=e.Hf;for(var w in k)if(r=k[w],0<=r){var y=x[w];if(void 0!==y){q=y.dc;u=y.ua;var z=l.attributes.get(y);if(void 0!==z)if(t=z.buffer,v=z.type,z=z.Eb,y.Od){var B=y.data,T=B.ii;y=y.offset;B&&B.Sh?(Y(l,r,B.Yd),void 0===d.pc&&(d.pc=B.Yd*B.count)):Y(l,r,0);l.h.bindBuffer(l.h.ARRAY_BUFFER,t);Ne(l,r,u,v,q,T*z,y*z)}else y.Rh?(Y(l,r,y.Yd),void 0===d.pc&&(d.pc=y.Yd*y.count)):Y(l,r,0),l.h.bindBuffer(l.h.ARRAY_BUFFER,t),
Ne(l,r,u,v,q,0,0)}else if("instanceMatrix"===w)u=l.attributes.get(f.dd),void 0!==u&&(q=u.buffer,u=u.type,Y(l,r+0,1),Y(l,r+1,1),Y(l,r+2,1),Y(l,r+3,1),l.h.bindBuffer(l.h.ARRAY_BUFFER,q),l.h.vertexAttribPointer(r+0,4,u,!1,64,0),l.h.vertexAttribPointer(r+1,4,u,!1,64,16),l.h.vertexAttribPointer(r+2,4,u,!1,64,32),l.h.vertexAttribPointer(r+3,4,u,!1,64,48));else if("instanceColor"===w)u=l.attributes.get(f.yc),void 0!==u&&(q=u.buffer,u=u.type,Y(l,r,1),l.h.bindBuffer(l.h.ARRAY_BUFFER,q),l.h.vertexAttribPointer(r,
3,u,!1,12,0));else if(void 0!==n&&(q=n[w],void 0!==q))switch(q.length){case 2:l.h.vertexAttrib2fv(r,q);break;case 3:l.h.vertexAttrib3fv(r,q);break;case 4:l.h.vertexAttrib4fv(r,q);break;default:l.h.vertexAttrib1fv(r,q)}}Me(l)}null!==p&&l.h.bindBuffer(l.h.ELEMENT_ARRAY_BUFFER,l.attributes.get(p).buffer)}w=a.Uf;null!==b&&(l=a.attributes.get(b),p=w=a.pg,p.type=l.type,p.Eb=l.Eb);p=d.i.start*c;x=null!==g?g.start*c:0;l=Math.max(p,x);g=Math.max(0,Math.min(null!==b?b.count:h.count,p+d.i.count*c,x+(null!==
g?g.count*c:Infinity))-1-l+1);0!==g&&(f.Ac?!0===e.fa?(vd(a.i,e.Ea*(null===a.m?a.C:1)),w.h(a.h.LINES)):w.h(a.h.TRIANGLES):f.Pd?(e=e.Ob,void 0===e&&(e=1),vd(a.i,e*(null===a.m?a.C:1)),f.Yh?w.h(a.h.LINES):f.Xh?w.h(a.h.LINE_LOOP):w.h(a.h.LINE_STRIP)):f.Td?w.h(a.h.POINTS):f.mg&&w.h(a.h.TRIANGLES),f.Lb?w.i(l,g,f.count):d.Ne?w.i(l,g,Math.min(d.j,d.pc)):w.H(l,g))}
m.compile=function(a,b){this.ma=this.Vb.get(a);wf(this.ma);ob(a,function(d){d.Oe&&d.P.test(b.P)&&(this.ma.qb.push(d),d.Ka&&this.li.Pb.push(d))});xf(this.ma);var c=new WeakMap;nb(a,function(d){var e=d.M;if(e)if(Array.isArray(e))for(var f=0;f<e.length;f++){var g=e[f];!1===c.has(g)&&(og(this,g,a,d),c.set(g))}else!1===c.has(e)&&(og(this,e,a,d),c.set(e))})};m.sf=function(){};
m.H=function(a,b,c,d){if(void 0!==c){console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");var e=c}if(void 0!==d){console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");var f=d}if(void 0!==b&&!0!==b.Je)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else if(!0!==this.oc){Pe(this.G);this.cb=-1;this.U=null;!0===a.Db&&a.mc();null===b.parent&&
b.mc();!0===a.ac&&a.be(b);this.ma=this.Vb.get(a,this.ra.length);wf(this.ma);this.ra.push(this.ma);this.Fa.Pa(b.hc,b.Ya);c=this.Rb.h;var g=this.Fa.elements;d=g[0];var h=g[1],k=g[2],l=g[3],p=g[4],n=g[5],q=g[6],r=g[7],u=g[8],t=g[9],v=g[10],x=g[11],w=g[12],y=g[13],z=g[14];g=g[15];Pb(c[0],l-d,r-p,x-u,g-w).normalize();Pb(c[1],l+d,r+p,x+u,g+w).normalize();Pb(c[2],l+h,r+n,x+t,g+y).normalize();Pb(c[3],l-h,r-n,x-t,g-y).normalize();Pb(c[4],l-k,r-q,x-v,g-z).normalize();Pb(c[5],l+k,r+q,x+v,g+z).normalize();this.rd=
this.re;c=this.sa;d=this.gb;h=this.rd;k=0!==d.length||h||0!==c.j||c.C;c.C=h;c.o=hf(c,d,b,0);c.j=d.length;this.Ra=k;c=this.j=this.we.get(a,this.ka.length);c.i=0;c.h.length=0;c.za.length=0;this.ka.push(this.j);pg(this,a,b,0,!0);c=this.j;d=c.i;for(h=c.j.length;d<h;d++){k=c.j[d];if(null===k.id)break;k.id=null;k.object=null;k.$=null;k.M=null;k.Y=null;k.group=null}this.j.sort(null,null);!0===this.Ra&&(c=this.sa,c.m=!0,hf(c,null));this.sd.H(this.ma.h.Pb,a,b);xf(this.ma);c=this.ma;uf(c.lights,c.qb,b);!0===
this.Ra&&(c=this.sa,c.m=!1,gf(c));c=this.info;c.H.frame++;c.H.xe=0;c.H.le=0;c.H.points=0;c.H.lines=0;void 0!==e&&Z(this,e);this.background.H(this.j,a,b,f);e=this.j.h;f=this.j.za;0<e.length&&qg(this,e,a,b);0<f.length&&qg(this,f,a,b);null!==this.m&&(a=this.ea,b=this.m,e=b.D,Gd(e,Fd(b)||a.B)&&(f=b.Xa?a.h.TEXTURE_CUBE_MAP:a.h.TEXTURE_2D,c=a.properties.get(e).la,W(a.i,f,c),Hd(a,f,e,b.width,b.height),W(a.i,f,null)),a=this.ea,b=this.m,b.Wd&&(a.B?(e=a.properties.get(b),a.h.bindFramebuffer(a.h.READ_FRAMEBUFFER,
e.Xb),a.h.bindFramebuffer(a.h.DRAW_FRAMEBUFFER,e.Ja),f=b.width,c=b.height,d=a.h.COLOR_BUFFER_BIT,b.ta&&(d|=a.h.DEPTH_BUFFER_BIT),b.Da&&(d|=a.h.STENCIL_BUFFER_BIT),a.h.blitFramebuffer(0,0,f,c,0,0,f,c,d,a.h.NEAREST),a.h.bindFramebuffer(a.h.FRAMEBUFFER,e.Xb)):console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")));id(this.i.i.depth,!0);ld(this.i.i.depth,!0);fd(this.i.i.color,!0);ud(this.i,!1);this.ra.pop();0<this.ra.length?this.ma=this.ra[this.ra.length-1]:this.ma=
null;this.ka.pop();0<this.ka.length?this.j=this.ka[this.ka.length-1]:this.j=null}};
function pg(a,b,c,d,e){if(!1!==b.visible){if(b.P.test(c.P))if(b.Qh)d=b.na;else if(b.Th)!0===b.Db&&b.update(c);else if(b.Oe)a.ma.qb.push(b),b.Ka&&a.ma.Pb.push(b);else if(b.mg){var f;(f=!b.Ib)||(f=a.Rb,vc.center.set(0,0,0),vc.ca=.7071067811865476,vc.L(b.I),f=zc(f));if(f){e&&E(a.J,b.I).L(a.Fa);f=a.Ub.update(b);var g=b.M;g.visible&&a.j.push(b,f,g,d,a.J.z,null)}}else if(b.gg)e&&E(a.J,b.I).L(a.Fa),a.j.push(b,null,b.M,d,a.J.z,null);else if(b.Ac||b.Pd||b.Td)if(b.Ud&&b.vb.frame!==a.info.H.frame&&(b.vb.update(),
b.vb.frame=a.info.H.frame),!b.Ib||xc(a.Rb,b))if(e&&E(a.J,b.I).L(a.Fa),f=a.Ub.update(b),g=b.M,Array.isArray(g))for(var h=f.groups,k=0,l=h.length;k<l;k++){var p=h[k],n=g[p.Xd];n&&n.visible&&a.j.push(b,f,n,d,a.J.z,p)}else g.visible&&a.j.push(b,f,g,d,a.J.z,null);b=b.children;f=0;for(g=b.length;f<g;f++)pg(a,b[f],c,d,e)}}
function qg(a,b,c,d){for(var e=!0===c.ac?c.Ic:null,f=0,g=b.length;f<g;f++){var h=b[f],k=h.object,l=h.$,p=null===e?h.M:e;h=h.group;if(d.bg)for(var n=d.ye,q=0,r=n.length;q<r;q++){var u=n[q];if(k.P.test(u.P)){a.i.viewport(a.ja.l(u.viewport));var t=a.ma;uf(t.lights,t.qb,u);rg(a,k,c,u,l,p,h)}}else rg(a,k,c,d,l,p,h)}}function rg(a,b,c,d,e,f,g){b.be(d);b.jd.Pa(d.Ya,b.I);db(b.Ve,b.jd);b.gg?(c=ng(a,d,c,f,b),td(a.i,f),Oe(a.G),Of(a,b,c)):Df(a,d,c,e,f,b,g)}
function og(a,b,c,d){!0!==c.ac&&(c=a.nc);var e=a.properties.get(b),f=a.ma.h.lights,g=f.h.version,h=a.Ma,k=f.h,l=a.ma.h.Pb,p=c.fog,n=b.Mb?c.Ha:null;n=h.J.get(b.envMap||n);var q=h.o[b.type];if(d.Ud){var r=d.vb.Df;if(h.j)r=1024;else{var u=Math.min(Math.floor((h.T-20)/4),r.length);u<r.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+r.length+" bones. This GPU supports "+u+"."),r=0):r=u}}else r=0;null!==b.precision&&(h.precision=Dc(h.G,b.precision),h.precision!==b.precision&&console.warn("THREE.WebGLProgram.getParameters:",
b.precision,"not supported, using",h.precision,"instead."));if(q){console.log("TODO "+q);var t=dd(q);u=t.vertexShader;t=t.fragmentShader}else u=b.vertexShader,t=b.fragmentShader;var v=h.h.m;d={B:h.B,nd:q,ge:b.type,vertexShader:u,fragmentShader:t,Ga:b.Ga,Bc:!0===b.Bc,Wa:b.Wa,precision:h.precision,ag:!0===d.Lb,He:!0===d.Lb&&null!==d.yc,jf:h.U,tb:null!==v?of(v.D):h.h.tb,map:!!b.map,sg:of(b.map),matcap:!!b.matcap,tg:of(b.matcap),envMap:!!n,Ce:n&&n.mapping,Mf:of(n),Lf:!!n&&(306===n.mapping||307===n.mapping),
lightMap:!!b.lightMap,rg:of(b.lightMap),aoMap:!!b.aoMap,emissiveMap:!!b.emissiveMap,Kf:of(b.emissiveMap),bumpMap:!!b.bumpMap,normalMap:!!b.normalMap,Ze:1===b.ae,ke:0===b.ae,clearcoatMap:!!b.clearcoatMap,clearcoatRoughnessMap:!!b.clearcoatRoughnessMap,clearcoatNormalMap:!!b.clearcoatNormalMap,displacementMap:!!b.displacementMap,roughnessMap:!!b.roughnessMap,metalnessMap:!!b.metalnessMap,specularMap:!!b.specularMap,alphaMap:!!b.alphaMap,gradientMap:!!b.gradientMap,sheen:!!b.sheen,transmissionMap:!!b.transmissionMap,
ob:b.ob,ne:b.normalMap&&b.ne,wb:b.wb,nf:!!b.map||!!b.bumpMap||!!b.normalMap||!!b.specularMap||!!b.alphaMap||!!b.emissiveMap||!!b.roughnessMap||!!b.metalnessMap||!!b.clearcoatMap||!!b.clearcoatRoughnessMap||!!b.clearcoatNormalMap||!!b.displacementMap||!!b.transmissionMap,mf:!(b.map||b.bumpMap||b.normalMap||b.specularMap||b.alphaMap||b.emissiveMap||b.roughnessMap||b.metalnessMap||b.clearcoatNormalMap||b.transmissionMap)&&!!b.displacementMap,fog:!!p,pd:b.fog,Fe:p&&p.eg,hb:!!b.hb,Nc:b.Nc,Na:h.Na,da:b.da&&
0<r,ug:r,oh:h.j,aa:b.aa,kb:b.kb,Ue:h.h.Ue,Te:h.h.Te,xg:k.rc.length,Ag:k.Jc.length,Dg:k.Oc.length,Bg:k.Kc.length,yg:k.xc.length,wg:k.directionalShadowMap.length,zg:k.pointShadowMap.length,Cg:k.spotShadowMap.length,Hc:h.sa.h,vg:h.sa.sb,Hb:b.Hb,od:h.h.sd.enabled&&0<l.length,he:h.h.sd.type,$a:b.Wc?h.h.$a:0,ce:h.h.ce,premultipliedAlpha:b.premultipliedAlpha,Ua:b.Ua,Ae:2===b.S,Ee:1===b.S,pb:void 0!==b.pb?b.pb:!1,cd:b.cd,Nf:b.A&&b.A.If,Pf:b.A&&b.A.Rf,Of:b.A&&b.A.drawBuffers,De:b.A&&b.A.mh,fe:h.B||h.A.has("EXT_frag_depth"),
Hg:h.B||h.A.has("WEBGL_draw_buffers"),ef:h.B||h.A.has("EXT_shader_texture_lod"),Fd:b.Fd()};var x;h=a.Ma;k=[];d.nd?k.push(d.nd):(k.push(d.fragmentShader),k.push(d.vertexShader));if(void 0!==d.Ga)for(x in d.Ga)k.push(x),k.push(d.Ga[x]);if(!1===d.Bc){for(x=0;x<h.m.length;x++)k.push(d[h.m[x]]);k.push(h.h.tb);k.push(2)}k.push(d.Fd);x=k.join();h=e.Y;k=!0;e.Ha=b.Mb?c.Ha:null;e.fog=c.fog;e.envMap=a.Tb.get(b.envMap||e.Ha);if(void 0===h)b.addEventListener("dispose",a.bf);else if(h.Dd!==x)Nf(a,b);else{if(e.Se===
g&&void 0!==d.nd)return;k=!1}if(k){d.uniforms=a.Ma.$b(b);c=a.Ma;h=0;for(k=c.i.length;h<k;h++)if(l=c.i[h],l.Dd===x){var w=l;++w.lf;break}void 0===w&&(w=new Ge(c.h,x,d,c.C),c.i.push(w));e.Y=w;e.uniforms=d.uniforms;e.tb=d.tb}w=e.uniforms;if(!b.Nb&&!b.Bc||!0===b.sa)e.Hc=a.sa.h,e.sb=a.sa.sb,w.gb=a.sa.i;e.Zd=b.Rd||b.gd||b.fd||b.Mb||b.Re||b.Nb&&!0===b.lights;e.Se=g;e.Zd&&(w.ambientLightColor.value=f.h.ad,w.lightProbe.value=f.h.ld,w.directionalLights.value=f.h.rc,w.directionalLightShadows.value=f.h.Gd,w.spotLights.value=
f.h.Oc,w.spotLightShadows.value=f.h.je,w.rectAreaLights.value=f.h.Kc,w.ltc_1.value=f.h.Fg,w.ltc_2.value=f.h.Gg,w.pointLights.value=f.h.Jc,w.pointLightShadows.value=f.h.de,w.hemisphereLights.value=f.h.xc,w.directionalShadowMap.value=f.h.directionalShadowMap,w.directionalShadowMatrix.value=f.h.directionalShadowMatrix,w.spotShadowMap.value=f.h.spotShadowMap,w.spotShadowMatrix.value=f.h.spotShadowMatrix,w.pointShadowMap.value=f.h.pointShadowMap,w.pointShadowMatrix.value=f.h.pointShadowMatrix);a=e.Y.$b().Lc;
b=[];f=0;for(g=a.length;f!==g;++f)c=a[f],c.id in w&&b.push(c);e.kf=b}
function ng(a,b,c,d,e){!0!==c.ac&&(c=a.nc);a.ea.m=0;var f=c.fog,g=d.Mb?c.Ha:null,h=null===a.m?a.tb:a.m.D.encoding,k=a.Tb.get(d.envMap||g),l=a.properties.get(d),p=a.ma.h.lights;if(!0===a.Ra&&(!0===a.rd||b!==a.U)){var n=a.sa,q=b===a.U&&d.id===a.cb,r=d.gb,u=d.qc,t=d.Zb,v=n.properties.get(d);if(!n.C||null===r||0===r.length||n.m&&!t)n.m?hf(n,null):gf(n);else{t=n.m?0:n.j;var x=4*t,w=v.Ff||null;n.i.value=w;w=hf(n,r,b,x,q);for(q=0;q!==x;++q)w[q]=n.o[q];v.Ff=w;n.sb=u?n.h:0;n.h+=t}}d.version===l.Bb?d.fog&&
l.fog!==f?og(a,d,c,e):l.Ha!==g?og(a,d,c,e):l.Zd&&l.Se!==p.h.version?og(a,d,c,e):void 0===l.Hc||l.Hc===a.sa.h&&l.sb===a.sa.sb?l.tb!==h?og(a,d,c,e):l.envMap!==k&&og(a,d,c,e):og(a,d,c,e):(og(a,d,c,e),l.Bb=d.version);p=k=n=!1;c=l.Y;g=c.$b();h=l.uniforms;u=a.i;v=c.Y;u.Ub!==v?(u.h.useProgram(v),u.Ub=v,u=!0):u=!1;u&&(p=k=n=!0);d.id!==a.cb&&(a.cb=d.id,k=!0);if(n||a.U!==b){g.ba(a.h,"projectionMatrix",b.hc);a.qe.Na&&g.ba(a.h,"logDepthBufFC",2/(Math.log(b.Va+1)/Math.LN2));a.U!==b&&(a.U=b,p=k=!0);if(d.Nb||d.fd||
d.gd||d.Mb||d.envMap)n=g.map.Dh,void 0!==n&&n.ba(a.h,E(a.J,b.I));(d.fd||d.gd||d.Rd||d.Qd||d.Mb||d.Nb)&&g.ba(a.h,"isOrthographic",!0===b.bi);(d.fd||d.gd||d.Rd||d.Qd||d.Mb||d.Nb||d.Re||d.da)&&g.ba(a.h,"viewMatrix",b.Ya)}d.da&&(pe(g,a.h,e,"bindMatrix"),pe(g,a.h,e,"bindMatrixInverse"),b=e.vb)&&(n=b.Df,a.qe.m?(null===b.h&&(n=Math.sqrt(4*n.length),n=Math.pow(2,Math.ceil(Math.log(n)/Math.LN2)),n=Math.max(n,4),u=new Float32Array(n*n*4),u.set(b.i),v=new uc(u,n,n,1023,1015),b.i=u,b.h=v,b.j=n),g.ba(a.h,"boneTexture",
b.h,a.ea),g.ba(a.h,"boneTextureSize",b.j)):pe(g,a.h,b,"boneMatrices"));if(k||l.Za!==e.Za)l.Za=e.Za,g.ba(a.h,"receiveShadow",e.Za);if(k){g.ba(a.h,"toneMappingExposure",1);l.Zd&&(b=p,h.ambientLightColor.N=b,h.lightProbe.N=b,h.directionalLights.N=b,h.directionalLightShadows.N=b,h.pointLights.N=b,h.pointLightShadows.N=b,h.spotLights.N=b,h.spotLightShadows.N=b,h.rectAreaLights.N=b,h.hemisphereLights.N=b);f&&d.fog&&(h.fogColor.value.l(f.color),f.Ph?(h.fogNear.value=f.lb,h.fogFar.value=f.Va):f.eg&&(h.fogDensity.value=
f.Ih));f=a.bc;b=a.C;k=a.Aa;if(d.Qd)If(f,h,d);else if(d.Rd)If(f,h,d),d.emissiveMap&&(h.emissiveMap.value=d.emissiveMap);else if(d.gd)If(f,h,d),d.gradientMap&&(h.gradientMap.value=d.gradientMap),d.emissiveMap&&(h.emissiveMap.value=d.emissiveMap),d.bumpMap&&(h.bumpMap.value=d.bumpMap,h.bumpScale.value=d.bumpScale,1===d.S&&(h.bumpScale.value*=-1)),d.normalMap&&(h.normalMap.value=d.normalMap,h.normalScale.value.l(d.normalScale),1===d.S&&h.normalScale.value.Qa()),d.displacementMap&&(h.displacementMap.value=
d.displacementMap,h.displacementScale.value=d.displacementScale,h.displacementBias.value=d.displacementBias);else if(d.fd)If(f,h,d),h.specular.value.l(d.specular),h.shininess.value=Math.max(d.shininess,1E-4),d.emissiveMap&&(h.emissiveMap.value=d.emissiveMap),d.bumpMap&&(h.bumpMap.value=d.bumpMap,h.bumpScale.value=d.bumpScale,1===d.S&&(h.bumpScale.value*=-1)),d.normalMap&&(h.normalMap.value=d.normalMap,h.normalScale.value.l(d.normalScale),1===d.S&&h.normalScale.value.Qa()),d.displacementMap&&(h.displacementMap.value=
d.displacementMap,h.displacementScale.value=d.displacementScale,h.displacementBias.value=d.displacementBias);else if(d.Mb)If(f,h,d),d.ai?(Jf(f,h,d),h.reflectivity.value=d.reflectivity,h.clearcoat.value=d.clearcoat,h.clearcoatRoughness.value=d.clearcoatRoughness,d.sheen&&h.sheen.value.l(d.sheen),d.clearcoatMap&&(h.clearcoatMap.value=d.clearcoatMap),d.clearcoatRoughnessMap&&(h.clearcoatRoughnessMap.value=d.clearcoatRoughnessMap),d.clearcoatNormalMap&&(h.clearcoatNormalScale.value.l(d.clearcoatNormalScale),
h.clearcoatNormalMap.value=d.clearcoatNormalMap,1===d.S&&h.clearcoatNormalScale.value.Qa()),h.transmission.value=d.transmission,d.transmissionMap&&(h.transmissionMap.value=d.transmissionMap)):Jf(f,h,d);else if(d.Zh)If(f,h,d),d.matcap&&(h.matcap.value=d.matcap),d.bumpMap&&(h.bumpMap.value=d.bumpMap,h.bumpScale.value=d.bumpScale,1===d.S&&(h.bumpScale.value*=-1)),d.normalMap&&(h.normalMap.value=d.normalMap,h.normalScale.value.l(d.normalScale),1===d.S&&h.normalScale.value.Qa()),d.displacementMap&&(h.displacementMap.value=
d.displacementMap,h.displacementScale.value=d.displacementScale,h.displacementBias.value=d.displacementBias);else if(d.hg)If(f,h,d),d.displacementMap&&(h.displacementMap.value=d.displacementMap,h.displacementScale.value=d.displacementScale,h.displacementBias.value=d.displacementBias);else if(d.Qe)If(f,h,d),d.displacementMap&&(h.displacementMap.value=d.displacementMap,h.displacementScale.value=d.displacementScale,h.displacementBias.value=d.displacementBias),h.referencePosition.value.l(d.referencePosition),
h.nearDistance.value=d.nearDistance,h.farDistance.value=d.farDistance;else if(d.$h)If(f,h,d),d.bumpMap&&(h.bumpMap.value=d.bumpMap,h.bumpScale.value=d.bumpScale,1===d.S&&(h.bumpScale.value*=-1)),d.normalMap&&(h.normalMap.value=d.normalMap,h.normalScale.value.l(d.normalScale),1===d.S&&h.normalScale.value.Qa()),d.displacementMap&&(h.displacementMap.value=d.displacementMap,h.displacementScale.value=d.displacementScale,h.displacementBias.value=d.displacementBias);else if(d.Vh)h.diffuse.value.l(d.color),
h.opacity.value=d.opacity,d.Wh&&(h.dashSize.value=d.dashSize,h.totalSize.value=d.dashSize+d.Id,h.scale.value=d.scale);else if(d.ci){h.diffuse.value.l(d.color);h.opacity.value=d.opacity;h.size.value=d.size*b;h.scale.value=.5*k;d.map&&(h.map.value=d.map);d.alphaMap&&(h.alphaMap.value=d.alphaMap);if(d.map)var y=d.map;else d.alphaMap&&(y=d.alphaMap);void 0!==y&&(!0===y.pa&&y.bb(),h.uvTransform.value.l(y.matrix))}else if(d.ng){h.diffuse.value.l(d.color);h.opacity.value=d.opacity;h.rotation.value=d.rotation;
d.map&&(h.map.value=d.map);d.alphaMap&&(h.alphaMap.value=d.alphaMap);if(d.map)var z=d.map;else d.alphaMap&&(z=d.alphaMap);void 0!==z&&(!0===z.pa&&z.bb(),h.uvTransform.value.l(z.matrix))}else d.Re?(h.color.value.l(d.color),h.opacity.value=d.opacity):d.Nb&&(d.me=!1);qe(a.h,l.kf,h,a.ea)}d.Nb&&!0===d.me&&(qe(a.h,l.kf,h,a.ea),d.me=!1);d.ng&&g.ba(a.h,"center",e.center);g.ba(a.h,"modelViewMatrix",e.jd);g.ba(a.h,"normalMatrix",e.Ve);g.ba(a.h,"modelMatrix",e.I);return c}
function Z(a,b,c,d){c=void 0===c?0:c;d=void 0===d?0:d;a.m=b;a.se=c;a.oe=d;if(b&&void 0===a.properties.get(b).Ja){var e=a.ea,f=b.D,g=e.properties.get(b),h=e.properties.get(f);b.addEventListener("dispose",e.ja);h.la=e.h.createTexture();e.info.h.ea++;var k=!0===b.Xa,l=!0===b.Wd,p=f.zc||f.ed,n=Fd(b)||e.B;!e.B||1022!==f.format||1015!==f.type&&1016!==f.type||(f.format=1023,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead."));if(k)for(g.Ja=
[],l=0;6>l;l++)g.Ja[l]=e.h.createFramebuffer();else if(g.Ja=e.h.createFramebuffer(),l)if(e.B){g.Xb=e.h.createFramebuffer();g.$c=e.h.createRenderbuffer();e.h.bindRenderbuffer(e.h.RENDERBUFFER,g.$c);l=X(e.j,f.format);var q=X(e.j,f.type);l=Id(e,f.Jb,l,q);e.h.renderbufferStorageMultisample(e.h.RENDERBUFFER,Rd(e,b),l,b.width,b.height);e.h.bindFramebuffer(e.h.FRAMEBUFFER,g.Xb);e.h.framebufferRenderbuffer(e.h.FRAMEBUFFER,e.h.COLOR_ATTACHMENT0,e.h.RENDERBUFFER,g.$c);e.h.bindRenderbuffer(e.h.RENDERBUFFER,
null);b.ta&&(g.td=e.h.createRenderbuffer(),Qd(e,g.td,b,!0));e.h.bindFramebuffer(e.h.FRAMEBUFFER,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(k){W(e.i,e.h.TEXTURE_CUBE_MAP,h.la);Nd(e,e.h.TEXTURE_CUBE_MAP,f,n);for(h=0;6>h;h++)Pd(e,g.Ja[h],b,e.h.COLOR_ATTACHMENT0,e.h.TEXTURE_CUBE_MAP_POSITIVE_X+h);Gd(f,n)&&Hd(e,e.h.TEXTURE_CUBE_MAP,f,b.width,b.height);W(e.i,e.h.TEXTURE_CUBE_MAP,null)}else k=e.h.TEXTURE_2D,p&&(e.B?k=f.zc?e.h.TEXTURE_3D:
e.h.TEXTURE_2D_ARRAY:console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")),W(e.i,k,h.la),Nd(e,k,f,n),Pd(e,g.Ja,b,e.h.COLOR_ATTACHMENT0,k),Gd(f,n)&&Hd(e,e.h.TEXTURE_2D,f,b.width,b.height),W(e.i,e.h.TEXTURE_2D,null);if(b.ta){f=e.properties.get(b);g=!0===b.Xa;if(b.ga){if(g)throw Error("target.depthTexture not supported in Cube render targets");if(b&&b.Xa)throw Error("Depth Texture with cube render targets is not supported");e.h.bindFramebuffer(e.h.FRAMEBUFFER,
f.Ja);if(!b.ga||!b.ga.Le)throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");e.properties.get(b.ga).la&&b.ga.image.width===b.width&&b.ga.image.height===b.height||(b.ga.image.width=b.width,b.ga.image.height=b.height,b.ga.N=!0);Ld(e,b.ga,0);f=e.properties.get(b.ga).la;if(1026===b.ga.format)e.h.framebufferTexture2D(e.h.FRAMEBUFFER,e.h.DEPTH_ATTACHMENT,e.h.TEXTURE_2D,f,0);else if(1027===b.ga.format)e.h.framebufferTexture2D(e.h.FRAMEBUFFER,e.h.DEPTH_STENCIL_ATTACHMENT,e.h.TEXTURE_2D,
f,0);else throw Error("Unknown depthTexture format");}else if(g)for(f.mb=[],g=0;6>g;g++)e.h.bindFramebuffer(e.h.FRAMEBUFFER,f.Ja[g]),f.mb[g]=e.h.createRenderbuffer(),Qd(e,f.mb[g],b,!1);else e.h.bindFramebuffer(e.h.FRAMEBUFFER,f.Ja),f.mb=e.h.createRenderbuffer(),Qd(e,f.mb,b,!1);e.h.bindFramebuffer(e.h.FRAMEBUFFER,null)}}g=null;f=e=!1;if(b){n=b.D;if(n.zc||n.ed)f=!0;n=a.properties.get(b).Ja;b.Xa?(g=n[c],e=!0):b.Wd?g=a.properties.get(b).Xb:g=n;a.ja.l(b.viewport);a.zb.l(b.scissor);a.Wb=b.Ig}else a.ja.l(a.T).X(a.C).floor(),
a.zb.l(a.ve).X(a.C).floor(),a.Wb=a.Sf;a.ue!==g&&(a.h.bindFramebuffer(a.h.FRAMEBUFFER,g),a.ue=g);a.i.viewport(a.ja);a.i.scissor(a.zb);g=a.i;a.Wb?jd(g,g.h.SCISSOR_TEST):kd(g,g.h.SCISSOR_TEST);e?(b=a.properties.get(b.D),a.h.framebufferTexture2D(a.h.FRAMEBUFFER,a.h.COLOR_ATTACHMENT0,a.h.TEXTURE_CUBE_MAP_POSITIVE_X+c,b.la,d)):f&&(b=a.properties.get(b.D),a.h.framebufferTextureLayer(a.h.FRAMEBUFFER,a.h.COLOR_ATTACHMENT0,b.la,d||0,c||0))};var sg,tg,ug,vg;sg=new L(70,window.innerWidth/window.innerHeight,1,1E3);sg.position.z=400;tg=new Eb;var wg=(new Db).load("https://threejs.org/examples/textures/crate.gif"),xg=new qc(200,200,200),yg=new sc({map:wg});vg=new tc(xg,yg);tg.add(vg);ug=new Lf;var zg=window.devicePixelRatio;void 0!==zg&&(ug.C=zg,ug.md(ug.Ab,ug.Aa,!1));ug.md(window.innerWidth,window.innerHeight);document.body.appendChild(ug.$f);window.addEventListener("resize",Ag,!1);Bg();
function Ag(){sg.Cb=window.innerWidth/window.innerHeight;qb(sg);ug.md(window.innerWidth,window.innerHeight)}function Bg(){requestAnimationFrame(Bg);vg.rotation.x+=.005;vg.rotation.y+=.01;ug.H(tg,sg)};
